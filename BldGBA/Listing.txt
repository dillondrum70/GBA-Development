F00:0001       ;LITTLE ENDIAN
F00:0002       ;LITTLE ENDIAN
F00:0003       ;LITTLE ENDIAN
F00:0004       ;LITTLE ENDIAN
F00:0005       ;LITTLE ENDIAN
F00:0006       ;LITTLE ENDIAN
F00:0007       ;LITTLE ENDIAN
F00:0008       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0009       
F00:0010       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0011       .ORG 0x08000000	;GBA ROM (the cartridge) Address starts at 0x08000000
F00:0012       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0013       
F00:0014       .EQU InputLocation, 0x04000130	;Location in memory where input is stored
F00:0015       
F00:0016       ;OR these masks with data at input location to get input, returns 0 if pressed
F00:0017       .EQU Key_A, 			0b0000000000000001				
F00:0018       .EQU Key_B, 			0b0000000000000010
F00:0019       .EQU Key_Select, 		0b0000000000000100
F00:0020       .EQU Key_Start, 		0b0000000000001000
F00:0021       .EQU Key_Right, 		0b0000000000010000
F00:0022       .EQU Key_Left, 			0b0000000000100000
F00:0023       .EQU Key_Up, 			0b0000000001000000
F00:0024       .EQU Key_Down, 			0b0000000010000000
F00:0025       .EQU Key_RightBump, 	0b0000000100000000
F00:0026       .EQU Key_LeftBump, 		0b0000001000000000
F00:0027       
F00:0028       .EQU MaskKey, 			0b1111110000000000	;Mask out other bits
F00:0029       
F00:0030       .EQU BackgroundColor, 0b1100001000010000
F00:0031       
F00:0032       .EQU ScreenXBound, 240
F00:0033       .EQU ScreenYBound, 160
F00:0034       
F00:0035       ;Constant
F00:0036       .EQU PlayerWidth, 16
F00:0037       .EQU PlayerHeight, 16
F00:0038       
F00:0039       .EQU FacingDown, 0
F00:0040       .EQU FacingLeft, 1
F00:0041       .EQU FacingUp, 2
F00:0042       .EQU FacingRight, 3
F00:0043       
F00:0044       ;Variable
F00:0045       .EQU PlayerX, Ram+34	;Player's x position
F00:0046       .EQU PlayerY, Ram+35	;Player's y position
F00:0047       
F00:0048       .EQU PlayerFace, Ram+36	;Direction player faces
F00:0049       .EQU PlayerCurrentAnim, Ram+37	;Address of current animation indices
F00:0050       .EQU PlayerAnimIndex, Ram+38	;current index of frame in animation
F00:0051       
F00:0052       ;Access animation array -> get index in array -> value from the animation is an index in the sprite tilemap -> pass inde
F00:0053       
F00:0054       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0055       
F00:0056       B Main	;Branch to start of program
               S01:08000000:  38 00 00 EA
F00:0057       
F00:0058       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0059       ;GBA Header
F00:0060       ;004h    156   Nintendo Logo    (compressed bitmap, required!)
F00:0061       	.BYTE 0xC8,0x60,0x4F,0xE2,0x01,0x70,0x8F,0xE2,0x17,0xFF,0x2F,0xE1,0x12,0x4F,0x11,0x48     ; C
               S01:08000004:  C8
               S01:08000005:  60
               S01:08000006:  4F
               S01:08000007:  E2
               S01:08000008:  01
               S01:08000009:  70
               S01:0800000A:  8F
               S01:0800000B:  E2
               S01:0800000C:  17
               S01:0800000D:  FF
               S01:0800000E:  2F
               S01:0800000F:  E1
               S01:08000010:  12
               S01:08000011:  4F
               S01:08000012:  11
               S01:08000013:  48
F00:0062       	.BYTE 0x12,0x4C,0x20,0x60,0x64,0x60,0x7C,0x62,0x30,0x1C,0x39,0x1C,0x10,0x4A,0x00,0xF0     ; D
               S01:08000014:  12
               S01:08000015:  4C
               S01:08000016:  20
               S01:08000017:  60
               S01:08000018:  64
               S01:08000019:  60
               S01:0800001A:  7C
               S01:0800001B:  62
               S01:0800001C:  30
               S01:0800001D:  1C
               S01:0800001E:  39
               S01:0800001F:  1C
               S01:08000020:  10
               S01:08000021:  4A
               S01:08000022:  00
               S01:08000023:  F0
F00:0063           .BYTE 0x14,0xF8,0x30,0x6A,0x80,0x19,0xB1,0x6A,0xF2,0x6A,0x00,0xF0,0x0B,0xF8,0x30,0x6B     ; E
               S01:08000024:  14
               S01:08000025:  F8
               S01:08000026:  30
               S01:08000027:  6A
               S01:08000028:  80
               S01:08000029:  19
               S01:0800002A:  B1
               S01:0800002B:  6A
               S01:0800002C:  F2
               S01:0800002D:  6A
               S01:0800002E:  00
               S01:0800002F:  F0
               S01:08000030:  0B
               S01:08000031:  F8
               S01:08000032:  30
               S01:08000033:  6B
F00:0064           .BYTE 0x80,0x19,0xB1,0x6B,0xF2,0x6B,0x00,0xF0,0x08,0xF8,0x70,0x6A,0x77,0x6B,0x07,0x4C     ; F
               S01:08000034:  80
               S01:08000035:  19
               S01:08000036:  B1
               S01:08000037:  6B
               S01:08000038:  F2
               S01:08000039:  6B
               S01:0800003A:  00
               S01:0800003B:  F0
               S01:0800003C:  08
               S01:0800003D:  F8
               S01:0800003E:  70
               S01:0800003F:  6A
               S01:08000040:  77
               S01:08000041:  6B
               S01:08000042:  07
               S01:08000043:  4C
F00:0065           .BYTE 0x60,0x60,0x38,0x47,0x07,0x4B,0xD2,0x18,0x9A,0x43,0x07,0x4B,0x92,0x08,0xD2,0x18     ; 10
               S01:08000044:  60
               S01:08000045:  60
               S01:08000046:  38
               S01:08000047:  47
               S01:08000048:  07
               S01:08000049:  4B
               S01:0800004A:  D2
               S01:0800004B:  18
               S01:0800004C:  9A
               S01:0800004D:  43
               S01:0800004E:  07
               S01:0800004F:  4B
               S01:08000050:  92
               S01:08000051:  08
               S01:08000052:  D2
               S01:08000053:  18
F00:0066           .BYTE 0x0C,0xDF,0xF7,0x46,0x04,0xF0,0x1F,0xE5,0x00,0xFE,0x7F,0x02,0xF0,0xFF,0x7F,0x02     ; 11
               S01:08000054:  0C
               S01:08000055:  DF
               S01:08000056:  F7
               S01:08000057:  46
               S01:08000058:  04
               S01:08000059:  F0
               S01:0800005A:  1F
               S01:0800005B:  E5
               S01:0800005C:  00
               S01:0800005D:  FE
               S01:0800005E:  7F
               S01:0800005F:  02
               S01:08000060:  F0
               S01:08000061:  FF
               S01:08000062:  7F
               S01:08000063:  02
F00:0067           .BYTE 0xF0,0x01,0x00,0x00,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00     ; 12
               S01:08000064:  F0
               S01:08000065:  01
               S01:08000066:  00
               S01:08000067:  00
               S01:08000068:  FF
               S01:08000069:  01
               S01:0800006A:  00
               S01:0800006B:  00
               S01:0800006C:  00
               S01:0800006D:  00
               S01:0800006E:  00
               S01:0800006F:  04
               S01:08000070:  00
               S01:08000071:  00
               S01:08000072:  00
               S01:08000073:  00
F00:0068           .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ; 13
               S01:08000074:  00
               S01:08000075:  00
               S01:08000076:  00
               S01:08000077:  00
               S01:08000078:  00
               S01:08000079:  00
               S01:0800007A:  00
               S01:0800007B:  00
               S01:0800007C:  00
               S01:0800007D:  00
               S01:0800007E:  00
               S01:0800007F:  00
               S01:08000080:  00
               S01:08000081:  00
               S01:08000082:  00
               S01:08000083:  00
F00:0069           .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ; 14
               S01:08000084:  00
               S01:08000085:  00
               S01:08000086:  00
               S01:08000087:  00
               S01:08000088:  00
               S01:08000089:  00
               S01:0800008A:  00
               S01:0800008B:  00
               S01:0800008C:  00
               S01:0800008D:  00
               S01:0800008E:  00
               S01:0800008F:  00
               S01:08000090:  00
               S01:08000091:  00
               S01:08000092:  00
               S01:08000093:  00
F00:0070       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x9E,0x7B,0xEB     ; 15
               S01:08000094:  00
               S01:08000095:  00
               S01:08000096:  00
               S01:08000097:  00
               S01:08000098:  00
               S01:08000099:  00
               S01:0800009A:  00
               S01:0800009B:  00
               S01:0800009C:  00
               S01:0800009D:  00
               S01:0800009E:  00
               S01:0800009F:  00
               S01:080000A0:  1A
               S01:080000A1:  9E
               S01:080000A2:  7B
               S01:080000A3:  EB
F00:0071       	
F00:0072           ;		123456789012
F00:0073           .ASCII "DRUMMOND.NET";0A0h    12    Game Title       (uppercase ascii, max 12 characters)	
               S01:080000A4:  44 52 55 4D 4D 4F 4E 44 2E 4E 45 54
F00:0074           .ASCII "0000"	;0ACh    4     Game Code        (uppercase ascii, 4 characters)
               S01:080000B0:  30 30 30 30
F00:0075       ;0B0h    2     Maker Code       (uppercase ascii, 2 characters)
F00:0076           .BYTE "GB"				;Maker
               S01:080000B4:  47 42
F00:0077       ;0B2h    1     Fixed value      (must be 96h, required!)
F00:0078       	.BYTE 0x96
               S01:080000B6:  96
F00:0079       ;0B3h    1     Main unit code   (00h for current GBA models)
F00:0080       	.BYTE 0x00
               S01:080000B7:  00
F00:0081       ;0B4h    1     Device type      (usually 00h) (bit7=DACS/debug related)
F00:0082       	.BYTE 0x00
               S01:080000B8:  00
F00:0083       ;0B5h    7     Reserved Area    (should be zero filled)
F00:0084       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00
               S01:080000B9:  00
               S01:080000BA:  00
               S01:080000BB:  00
               S01:080000BC:  00
               S01:080000BD:  00
               S01:080000BE:  00
               S01:080000BF:  00
F00:0085       ;0BCh    1     Software version (usually 00h)
F00:0086       	.BYTE 0x00
               S01:080000C0:  00
F00:0087       ;0BDh    1     Complement check (header checksum, required!)
F00:0088       	.BYTE 0x00
               S01:080000C1:  00
F00:0089       ;0BEh    2     Reserved Area    (should be zero filled)
F00:0090       	.BYTE 0x00,0x00
               S01:080000C2:  00
               S01:080000C3:  00
F00:0091       ;0C0h    4     RAM Entry Point  (32bit ARM branch opcode, eg. "B ram_start")
F00:0092       	.BYTE 0x00,0x00,0x00,0x00
               S01:080000C4:  00
               S01:080000C5:  00
               S01:080000C6:  00
               S01:080000C7:  00
F00:0093       ;0C4h    1     Boot mode        (init as 00h - BIOS overwrites this value!)
F00:0094       	.BYTE 0x00
               S01:080000C8:  00
F00:0095       ;0C5h    1     Slave ID Number  (init as 00h - BIOS overwrites this value!)
F00:0096       	.BYTE 0x00
               S01:080000C9:  00
F00:0097       ;0C6h    26    Not used         (seems to be unused)
F00:0098       	.BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
               S01:080000CA:  00
               S01:080000CB:  00
               S01:080000CC:  00
               S01:080000CD:  00
               S01:080000CE:  00
               S01:080000CF:  00
               S01:080000D0:  00
               S01:080000D1:  00
               S01:080000D2:  00
               S01:080000D3:  00
               S01:080000D4:  00
               S01:080000D5:  00
               S01:080000D6:  00
               S01:080000D7:  00
               S01:080000D8:  00
               S01:080000D9:  00
               S01:080000DA:  00
               S01:080000DB:  00
               S01:080000DC:  00
               S01:080000DD:  00
               S01:080000DE:  00
               S01:080000DF:  00
               S01:080000E0:  00
               S01:080000E1:  00
               S01:080000E2:  00
               S01:080000E3:  00
F00:0099       ;0E0h    4     JOYBUS Entry Pt. (32bit ARM branch opcode, eg. "B joy_start")
F00:0100       	.BYTE 0x00,0x00,0x00,0x00
               S01:080000E4:  00
               S01:080000E5:  00
               S01:080000E6:  00
               S01:080000E7:  00
F00:0101       
F00:0102       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0103       
F00:0104       Main:
F00:0105       	MOV sp, #Stack		;Initialize Stack Pointer, starts at memory address 3000000 on GBA
               S01:080000E8:  03 D4 A0 E3
F00:0106       	
F00:0107       	BL ScreenInit
               S01:080000EC:  0C 01 00 EB
F00:0108       	
F00:0109       	;;;;Load background
F00:0110       	BL BackgroundAndSpriteInit
               S01:080000F0:  14 01 00 EB
F00:0111       	
F00:0112       	
F00:0113       	;Initialize player variables
F00:0114       	MOV r0, #PlayerX
               S01:080000F4:  02 04 A0 E3 22 00 80 E3
F00:0115       	MOV r6, #20
               S01:080000FC:  14 60 A0 E3
F00:0116       	STRB r6, [r0]
               S01:08000100:  00 60 C0 E5
F00:0117       	
F00:0118       	MOV r0, #PlayerY
               S01:08000104:  02 04 A0 E3 23 00 80 E3
F00:0119       	MOV r7, #20
               S01:0800010C:  14 70 A0 E3
F00:0120       	STRB r7, [r0]
               S01:08000110:  00 70 C0 E5
F00:0121       	
F00:0122       	MOV r0, #PlayerCurrentAnim
               S01:08000114:  02 04 A0 E3 25 00 80 E3
F00:0123       	ADRL r6, Anim_PlayerIdle	;Start with idle animation, load player idle address
               S01:0800011C:  32 6C 8F E2 8C 60 86 E2
F00:0124       	STR r6, [r0]
               S01:08000124:  00 60 80 E5
F00:0125       	
F00:0126       	MOV r0, #PlayerAnimIndex
               S01:08000128:  02 04 A0 E3 26 00 80 E3
F00:0127       	MOV r6, #0	;Start at first frame
               S01:08000130:  00 60 A0 E3
F00:0128       	STRB r6, [r0]
               S01:08000134:  00 60 C0 E5
F00:0129       	
F00:0130       	MOV r0, #PlayerFace
               S01:08000138:  02 04 A0 E3 24 00 80 E3
F00:0131       	MOV r6, #FacingDown	;Start facing down (towards the screen)
               S01:08000140:  00 60 A0 E3
F00:0132       	STRB r6, [r0]
               S01:08000144:  00 60 C0 E5
F00:0133       
F00:0134       ;16 color sprite (Wide 2x1 using tile patterns)
F00:0135       	;mov r0,#0x00	   		;Sprite Num
F00:0136       	;mov r1,#0x4020   		;Ypos
F00:0137       	;mov r2,#0x0040   		;Xpos
F00:0138       	;mov r3,#0x0001   		;Tile
F00:0139       	;bl DrawSprite
F00:0140       	
F00:0141       ;256 color sprite
F00:0142       	;mov r0,#0x00	   		;Sprite Num
F00:0143       	;mov r1,#0x2000   		;Ypos
F00:0144       	;mov r2,#0x4000   		;Xpos	4=256 color
F00:0145       	;mov r3,#0x000A   		;Tile 
F00:0146       	;bl DrawSprite
F00:0147       	
F00:0148       	;LDR r1, AsciiTestAddress1	;Load test address into r1, parameter 1	
F00:0149       	;BL WriteText
F00:0150       	;BL NewLine
F00:0151       	
F00:0152       	;LDR r1, AsciiTestAddress2	;Load test address into r1, parameter 1	
F00:0153       	;BL WriteText
F00:0154       	;BL NewLine
F00:0155       	
F00:0156       	;LDR r1, AsciiTestAddress3	;Load test address into r1, parameter 1	
F00:0157       	;BL WriteText
F00:0158       	;BL NewLine
F00:0159       	
F00:0160       	;LDR r1, AsciiTestAddress4	;Load test address into r1, parameter 1	
F00:0161       	;BL WriteText
F00:0162       	;BL NewLine
F00:0163       	
F00:0164       GameLoop:
F00:0165       		;MOV r1, #Key_Up					;Pass up key mask to input function
F00:0166       		;BL GetButton					;Call function, value returned in r0
F00:0167       	
F00:0168       		;CMPS r0, #0						;Set flag register to check input
F00:0169       		;MOVE r1, #0b1111110000000000	;Turn blue if up key pressed
F00:0170       		;MOVNE r1, #BackgroundColor		;Stay background gray otherwise
F00:0171       	
F00:0172       		;BL ClearToColor					;Update color
F00:0173       		
F00:0174       		;Load in current player position
F00:0175       		MOV r6, #PlayerX
               S01:08000148:  02 64 A0 E3 22 60 86 E3
F00:0176       		LDRB r8, [r6]
               S01:08000150:  00 80 D6 E5
F00:0177       		MOV r10, r8	;Cache last player x position so we can modify current position
               S01:08000154:  08 A0 A0 E1
F00:0178       		MOV r7, #PlayerY
               S01:08000158:  02 74 A0 E3 23 70 87 E3
F00:0179       		LDRB r9, [r7]
               S01:08000160:  00 90 D7 E5
F00:0180       		MOV r11, r9	;Cache last player y position so we can modify current position
               S01:08000164:  09 B0 A0 E1
F00:0181       		
F00:0182       		;Erase Sprite
F00:0183       		;LDR r5, SpriteTestAddress
F00:0184       		MOV r4, #PlayerHeight
               S01:08000168:  10 40 A0 E3
F00:0185       		MOV r3, #PlayerWidth
               S01:0800016C:  10 30 A0 E3
F00:0186       		;MOV r2, r9
F00:0187       		;MOV r1, r8
F00:0188       		;BL DrawSprite
F00:0189       	
F00:0190       		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Vertical Movement ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0191       		MOV r1, #Key_Up
               S01:08000170:  40 10 A0 E3
F00:0192       		BL GetButton
               S01:08000174:  EE 01 00 EB
F00:0193       		CMPS r0, #0
               S01:08000178:  00 00 50 E3
F00:0194       		ADDNE r9, r9, #1
               S01:0800017C:  01 90 89 12
F00:0195       	
F00:0196       		MOV r1, #Key_Down
               S01:08000180:  80 10 A0 E3
F00:0197       		BL GetButton
               S01:08000184:  EA 01 00 EB
F00:0198       		CMPS r0, #0
               S01:08000188:  00 00 50 E3
F00:0199       		SUBNE r9, r9, #1
               S01:0800018C:  01 90 49 12
F00:0200       		
F00:0201       		;Check greater than lower bound
F00:0202       		MOV r2, #0			;Take 0
               S01:08000190:  00 20 A0 E3
F00:0203       		CMPS r9, r2			;Check if right side of player is out of bounds
               S01:08000194:  02 00 59 E1
F00:0204       		MOVLT r9, r2		;If so, move 0 into y position
               S01:08000198:  02 90 A0 B1
F00:0205       		
F00:0206       		;Check less than upper bound
F00:0207       		ADD r1, r4, r9		;Sum next position and height
               S01:0800019C:  09 10 84 E0
F00:0208       		MOV r2, #ScreenYBound	;Take Screen bound
               S01:080001A0:  A0 20 A0 E3
F00:0209       		CMPS r1, r2				;Check if right side of player is out of bounds
               S01:080001A4:  02 00 51 E1
F00:0210       		SUBGT r2, r2, r4		;If so, Subtract height from screen Y bound...
               S01:080001A8:  04 20 42 C0
F00:0211       		MOVGT r9, r2			;And move that into y position
               S01:080001AC:  02 90 A0 C1
F00:0212       		
F00:0213       	
F00:0214       		;;;;;;;;;;;;;;;;;;;;;;;;;;; Horizontal Movement ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0215       		MOV r1, #Key_Right
               S01:080001B0:  10 10 A0 E3
F00:0216       		BL GetButton
               S01:080001B4:  DE 01 00 EB
F00:0217       		CMPS r0, #0
               S01:080001B8:  00 00 50 E3
F00:0218       		SUBNE r8, r8, #1;;;;;;;;;;;;;;;;;;;********For some reason, when key_right is pressed, adding moves it left so I switc
               S01:080001BC:  01 80 48 12
F00:0219       	
F00:0220       		MOV r1, #Key_Left
               S01:080001C0:  20 10 A0 E3
F00:0221       		BL GetButton
               S01:080001C4:  DA 01 00 EB
F00:0222       		CMPS r0, #0
               S01:080001C8:  00 00 50 E3
F00:0223       		ADDNE r8, r8, #1;;;;;;;;;;;;;;;;;;;;***********
               S01:080001CC:  01 80 88 12
F00:0224       		
F00:0225       		;Check greater than lower bound
F00:0226       		MOV r2, #0			;Take 0
               S01:080001D0:  00 20 A0 E3
F00:0227       		CMPS r8, r2			;Check if right side of player is out of bounds
               S01:080001D4:  02 00 58 E1
F00:0228       		MOVLT r8, r2		;If so, move 0 into x position
               S01:080001D8:  02 80 A0 B1
F00:0229       		
F00:0230       		;Check less than upper bound
F00:0231       		ADD r1, r3, r8		;Sum next position and width
               S01:080001DC:  08 10 83 E0
F00:0232       		MOV r2, #ScreenXBound	;Take Screen bound
               S01:080001E0:  F0 20 A0 E3
F00:0233       		CMPS r1, r2				;Check if right side of player is out of bounds
               S01:080001E4:  02 00 51 E1
F00:0234       		SUBGT r2, r2, r3		;If so, Subtract width from screen x bound...
               S01:080001E8:  03 20 42 C0
F00:0235       		MOVGT r8, r2			;And move that into x position
               S01:080001EC:  02 80 A0 C1
F00:0236       		
F00:0237       		;Do collisions independently so we can still move up and down well moving right against a wall
F00:0238       		;;;;;;;;;;;;;;; Vertical Collision ;;;;;;;;;;;;;;;;;;;;
F00:0239       		MOV r1, r10
               S01:080001F0:  0A 10 A0 E1
F00:0240       		MOV r2, r11
               S01:080001F4:  0B 20 A0 E1
F00:0241       		MOV r3, r9
               S01:080001F8:  09 30 A0 E1
F00:0242       		BL VerticalCollision
               S01:080001FC:  16 01 00 EB
F00:0243       		
F00:0244       		;;;;;;;;;;;;;;;;;;;;;;; Horizontal Background Collision ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0245       		
F00:0246       		MOV r1, r10
               S01:08000200:  0A 10 A0 E1
F00:0247       		MOV r2, r11
               S01:08000204:  0B 20 A0 E1
F00:0248       		MOV r3, r8
               S01:08000208:  08 30 A0 E1
F00:0249       		BL HorizontalCollision
               S01:0800020C:  60 01 00 EB
F00:0250       		
F00:0251       		;;;;;;;;;;;;;;;;;;;;;;; Animation ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0252       		
F00:0253       		MOV r0, #PlayerFace
               S01:08000210:  02 04 A0 E3 24 00 80 E3
F00:0254       		LDRB r1, [r0]
               S01:08000218:  00 10 D0 E5
F00:0255       		
F00:0256       		MOV r0, #PlayerCurrentAnim
               S01:0800021C:  02 04 A0 E3 25 00 80 E3
F00:0257       		LDRB r2, [r0]
               S01:08000224:  00 20 D0 E5
F00:0258       		
F00:0259       		MOV r0, #PlayerAnimIndex
               S01:08000228:  02 04 A0 E3 26 00 80 E3
F00:0260       		LDRB r3, [r0]
               S01:08000230:  00 30 D0 E5
F00:0261       		
F00:0262       		;;;;;;;;;;;;;;;;;;; Render images
F00:0263       		;No parameters, render handles that
F00:0264       		BL Render
               S01:08000234:  AD 01 00 EB
F00:0265       		
F00:0266       		;Slow down frame rate (otherwise it looks very glitchy and everything moves too fast)
F00:0267       		MOV r0, #0x2000
               S01:08000238:  02 0A A0 E3
F00:0268       		DelayFrame:
F00:0269       			SUBS r0, r0, #1
               S01:0800023C:  01 00 50 E2
F00:0270       			BNE DelayFrame
               S01:08000240:  FD FF FF 1A
F00:0271       		DelayNextDraw:
F00:0272       			SUBS r0, r0, #1
               S01:08000244:  01 00 50 E2
F00:0273       			MOV r0, #ScanlineCounter
               S01:08000248:  01 03 A0 E3 06 00 80 E3
F00:0274       			LDR r1, [r0]
               S01:08000250:  00 10 90 E5
F00:0275       			MOV r0, #ScreenYBound
               S01:08000254:  A0 00 A0 E3
F00:0276       			CMPS r1, r0
               S01:08000258:  00 00 51 E1
F00:0277       			BGE DelayNextDraw
               S01:0800025C:  F8 FF FF AA
F00:0278       		DelayNextBlank:
F00:0279       			SUBS r0, r0, #1
               S01:08000260:  01 00 50 E2
F00:0280       			MOV r0, #ScanlineCounter
               S01:08000264:  01 03 A0 E3 06 00 80 E3
F00:0281       			LDR r1, [r0]
               S01:0800026C:  00 10 90 E5
F00:0282       			MOV r0, #ScreenYBound
               S01:08000270:  A0 00 A0 E3
F00:0283       			CMPS r1, r0
               S01:08000274:  00 00 51 E1
F00:0284       			BLT DelayNextBlank
               S01:08000278:  F8 FF FF BA
F00:0285       		
F00:0286       	
F00:0287       	B GameLoop
               S01:0800027C:  B1 FF FF EA
F00:0288       	
F00:0289       AsciiTestAddress1:
F00:0290       	.LONG AsciiTest1	;Address of Ascii string
               S01:08000280:  84 02 00 08
F00:0291       AsciiTest1:
F00:0292       	.BYTE " !\"#$%&'()*+,-./0123456789:;<=",255	;All characters in font, 255 terminated
               S01:08000284:  20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F
               S01:08000294:  30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D
               S01:080002A2:  FF
F00:0293       	;.BYTE "Test f",255
F00:0294       	.ALIGN 4	;Align to 4 bytes
F00:0295       	
F00:0296       AsciiTestAddress2:
F00:0297       	.LONG AsciiTest2
               S01:080002B0:  B4 02 00 08
F00:0298       AsciiTest2:
F00:0299       	.BYTE ">?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[",255
               S01:080002B4:  3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D
               S01:080002C4:  4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B
               S01:080002D2:  FF
F00:0300       	.ALIGN 4
F00:0301       	
F00:0302       AsciiTestAddress3:
F00:0303       	.LONG AsciiTest3
               S01:080002E0:  E4 02 00 08
F00:0304       AsciiTest3:
F00:0305       	.BYTE "\\]^_`abcdefghijklmnopqrstuvwxy",255
               S01:080002E4:  5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B
               S01:080002F4:  6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79
               S01:08000302:  FF
F00:0306       	.ALIGN 4
F00:0307       	
F00:0308       AsciiTestAddress4:
F00:0309       	.LONG AsciiTest4
               S01:08000310:  14 03 00 08
F00:0310       AsciiTest4:
F00:0311       	.BYTE "z{|}~",255
               S01:08000314:  7A 7B 7C 7D 7E
               S01:08000319:  FF
F00:0312       	.ALIGN 4
F00:0313       	
F00:0314       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0315       ;Bitmap includes
F00:0316       
F00:0317       SpriteTestAddress:
F00:0318       	.LONG SpriteTest
               S01:08000320:  24 03 00 08
F00:0319       SpriteTest:
F00:0320       	.incbin "\Bitmaps\StickPlayer.RAW"
               S01:08000324:  00 FC 00 FC 00 FC 00 FC 00 FC 00 FC 00 FC 00 FC
               S01:08000334:  00 FC 00 FC 00 FC 00 FC 00 FC 00 FC 00 FC 00 FC
F00:0321       	
F00:0322       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0323       
F00:0324       ScreenInit:
F00:0325       	STMFD sp!, {r0-r3, lr}
               S01:08000524:  0F 40 2D E9
F00:0326       		;Actual screen initialization, tells console which mode we're in
F00:0327       		MOV r3, #LCDControl		;DISPCNT - LCD Control
               S01:08000528:  01 33 A0 E3
F00:0328       		MOV r2, #0x100;0x403			;4 = Layer 2 on, 3 = ScreenMode 3 
               S01:0800052C:  01 2C A0 E3
F00:0329       		STR r2, [r3]			;Store layer and screen mode in LCD Control address
               S01:08000530:  00 20 83 E5
F00:0330       		
F00:0331       		ADD r3, r3, #0x08;		;Get to BGOCNT - BGO Control at #0x04000008
               S01:08000534:  08 30 83 E2
F00:0332       		MOV r2, #0x4004			;first 4 = Screen size (64x32 tilemap), last 4 = pattern base address, 0x06004000
               S01:08000538:  01 29 A0 E3 04 20 82 E3
F00:0333       		STR r2, [r3]			;Store the values in BGO control
               S01:08000540:  00 20 83 E5
F00:0334       		
F00:0335       		;MOV r1, #BackgroundColor		;Color to fill
F00:0336       		;BL ClearToColor
F00:0337       	LDMFD sp!, {r0-r3, pc}
               S01:08000544:  0F 80 BD E8
F00:0338       	
F00:0339       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0340       BackgroundAndSpriteInit:
F00:0341       	STMFD sp!, {r0-r3, lr}
               S01:08000548:  0F 40 2D E9
F00:0342       	
F00:0343       		;Load Background Palette Colors
F00:0344       		ADRL r1, ColorPalette		;Palette Address
               S01:0800054C:  02 1B 8F E2 3C 10 81 E2
F00:0345       		MOV r2, #BackgroundPaletteMemory
               S01:08000554:  05 24 A0 E3
F00:0346       		MOV r3, #16*2		;Number of colors * bytes per color
               S01:08000558:  20 30 A0 E3
F00:0347       		BL LoadHalfwords
               S01:0800055C:  30 00 00 EB
F00:0348       		
F00:0349       		;Load tilemap images
F00:0350       		ADRL r1, TilemapFiles	;File with tilemap patterns
               S01:08000560:  02 1B 8F E2 48 10 81 E2
F00:0351       		MOV r2, #VramTilemapPixelPatterns
               S01:08000568:  01 29 A0 E3 06 24 82 E3
F00:0352       		MOV r3, #TilemapFiles_END-TilemapFiles
               S01:08000570:  02 3B A0 E3
F00:0353       		BL LoadHalfwords
               S01:08000574:  2A 00 00 EB
F00:0354       		
F00:0355       		;Load tilemap patterns directly into VRAM
F00:0356       		ADRL r1, Tilemap
               S01:08000578:  2E 1C 8F E2 34 10 81 E2
F00:0357       		MOV r2, #VramBase	;Load the pattern into screen block 0 of character block 0
               S01:08000580:  06 24 A0 E3
F00:0358       		MOV r3, #Tilemap_END-Tilemap	;<width> x <height> tilemap with 2 bytes per tile
               S01:08000584:  01 3B A0 E3
F00:0359       		BL LoadBytes
               S01:08000588:  2B 00 00 EB
F00:0360       		
F00:0361       		;Load tilemap into Background Layer VRAM so our 32x32 tilemap becomes 64x32 and repeats
F00:0362       		ADRL r1, Tilemap
               S01:0800058C:  2E 1C 8F E2 20 10 81 E2
F00:0363       		MOV r2, #VramBackground	;Load the pattern into the screen block 1 of character block 0
               S01:08000594:  02 2B A0 E3 06 24 82 E3
F00:0364       		MOV r3, #Tilemap_END-Tilemap	;<width> x <height> tilemap with 2 bytes per tile
               S01:0800059C:  01 3B A0 E3
F00:0365       		BL LoadBytes
               S01:080005A0:  25 00 00 EB
F00:0366       		
F00:0367       		;Load Sprite Palette Colors
F00:0368       		ADRL r1, ColorPalette		;Palette Address
               S01:080005A4:  07 1C 8F E2 E4 10 81 E2
F00:0369       		MOV r2, #SpritePaletteMemory
               S01:080005AC:  02 2C A0 E3 05 24 82 E3
F00:0370       		MOV r3, #16*2		;Number of colors * bytes per color
               S01:080005B4:  20 30 A0 E3
F00:0371       		BL LoadHalfwords
               S01:080005B8:  19 00 00 EB
F00:0372       		
F00:0373       		;Load sprite images
F00:0374       		ADRL r1, SpriteFiles	;File with tilemap patterns
               S01:080005BC:  0F 1C 8F E2 EC 10 81 E2
F00:0375       		MOV r2, #VramSpritePixelPatterns
               S01:080005C4:  01 28 A0 E3 06 24 82 E3
F00:0376       		MOV r3, #SpriteFiles_END-SpriteFiles
               S01:080005CC:  1E 3C A0 E3
F00:0377       		BL LoadHalfwords
               S01:080005D0:  13 00 00 EB
F00:0378       		
F00:0379       		;Turn Screen On
F00:0380       		MOV r0, #LCDControl
               S01:080005D4:  01 03 A0 E3
F00:0381       		MOV r1, #0x1140	;1 = Sprite on, 1 = layer on, 4 = 1D tile layout, 0 = screen mode 0
               S01:080005D8:  45 1D A0 E3
F00:0382       		
F00:0383       		str r1, [r0]
               S01:080005DC:  00 10 80 E5
F00:0384       		
F00:0385       	LDMFD sp!, {r0-r3, pc}
               S01:080005E0:  0F 80 BD E8
F00:0386       	
F00:0387       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0388       ;r1 = color halfword
F00:0389       ClearToColor:
F00:0390       	STMFD sp!, {r1-r3, lr}
               S01:080005E4:  0E 40 2D E9
F00:0391       		MOV r3, #VramBase	;Start with vram base
               S01:080005E8:  06 34 A0 E3
F00:0392       		MOV r2, #240*160	;Take number of pixels in screen
               S01:080005EC:  96 2C A0 E3
F00:0393       		
F00:0394       FillScreen:
F00:0395       		STRH r1, [r3], #2	;Store halfword (color) into position in vram and increment it by 2 bytes (to next pixel)
               S01:080005F0:  B2 10 C3 E0
F00:0396       		SUBS r2, r2, #1		;Decrement and set signs of loop counter
               S01:080005F4:  01 20 52 E2
F00:0397       		BNE FillScreen		;Loop to fill screen
               S01:080005F8:  FC FF FF 1A
F00:0398       		
F00:0399       	LDMFD sp!, {r1-r3, pc}
               S01:080005FC:  0E 80 BD E8
F00:0400       	
F00:0401       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0402       ;r1 = X, r2 = Y
F00:0403       ;Return VRAM position of (x,Y)
F00:0404       ;Based on https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0405       GetScreenPos:
F00:0406       	STMFD sp!, {r1-r4, lr}
               S01:08000600:  1E 40 2D E9
F00:0407       		MOV r0, #VramBase	;Vram
               S01:08000604:  06 04 A0 E3
F00:0408       		MOV r3, #240*2		;bytes in a line (should be 240 * 2, but y position keeps getting shifted down by an extra factor of 2
               S01:08000608:  1E 3E A0 E3
F00:0409       		MUL r2, r3, r2		;Multiply Y by line byte count
               S01:0800060C:  93 02 02 E0
F00:0410       		ADD r0, r0, r2		;Add number of bytes for y position
               S01:08000610:  02 00 80 E0
F00:0411       		MOV r4, #2			;Move 2 into r4
               S01:08000614:  02 40 A0 E3
F00:0412       		MUL r1, r4, r1		;Multiply x by 2, 2 bytes per pixel
               S01:08000618:  94 01 01 E0
F00:0413       		ADD r0, r0, r1		;Add number of bytes for x position
               S01:0800061C:  01 00 80 E0
F00:0414       	LDMFD sp!, {r1-r4, pc}
               S01:08000620:  1E 80 BD E8
F00:0415       	
F00:0416       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0417       ;r1 = Color Palette Location
F00:0418       ;r2 = GBA Palette Memory Location
F00:0419       ;r3 = number of bytes (halfwords, we load 2 at a time)
F00:0420       LoadHalfwords:
F00:0421       	STMFD sp!, {r1-r4, lr}
               S01:08000624:  1E 40 2D E9
F00:0422       	
F00:0423       LoadHalfwordsRep:
F00:0424       		LDRH r4, [r1], #2	;Load current position in color palette into r1 and increment halfword
               S01:08000628:  B2 40 D1 E0
F00:0425       		STRH r4, [r2], #2	;Store palette value in GBA Palette memory and increment halfword
               S01:0800062C:  B2 40 C2 E0
F00:0426       		
F00:0427       		SUBS r3, r3, #2
               S01:08000630:  02 30 53 E2
F00:0428       		BNE LoadHalfwordsRep	;Repeat process until number of bytes reached
               S01:08000634:  FB FF FF 1A
F00:0429       	
F00:0430       	LDMFD sp!, {r1-r4, pc}
               S01:08000638:  1E 80 BD E8
F00:0431       	
F00:0432       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0433       ;r1 = Color Palette Location
F00:0434       ;r2 = GBA Palette Memory Location
F00:0435       ;r3 = number of bytes
F00:0436       LoadBytes:
F00:0437       	STMFD sp!, {r1-r4, lr}
               S01:0800063C:  1E 40 2D E9
F00:0438       	
F00:0439       LoadBytesRep:
F00:0440       		LDRB r4, [r1], #1	;Load current position in from byte array and increment 1 byte
               S01:08000640:  01 40 D1 E4
F00:0441       		STRH r4, [r2], #2	;Store palette value in halfword location and increment halfword
               S01:08000644:  B2 40 C2 E0
F00:0442       		
F00:0443       		SUBS r3, r3, #1
               S01:08000648:  01 30 53 E2
F00:0444       		BNE LoadBytesRep	;Repeat process until number of bytes reached
               S01:0800064C:  FB FF FF 1A
F00:0445       	
F00:0446       	LDMFD sp!, {r1-r4, pc}
               S01:08000650:  1E 80 BD E8
F00:0447       	
F00:0448       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0449       ;r1 = current VRAM position
F00:0450       ;Return VRAM position shifted down one line
F00:0451       ;https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0452       GetNextLine:
F00:0453       	ADD r0, r1, #240*2		;Simple add
               S01:08000654:  1E 0E 81 E2
F00:0454       	MOV pc, lr				;Return
               S01:08000658:  0E F0 A0 E1
F00:0455       	
F00:0456       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0457       ;r1 = current x position
F00:0458       ;r2 = current y position
F00:0459       ;r3 = next y position
F00:0460       ;Checks collision with background objects
F00:0461       ;Check player's position in relation to tiles
F00:0462       ;Get tile at that index in the tilemap ((TilemapWidth * y) + x)
F00:0463       ;If tile is equal or greater than the index mark (non-colliding tiles below, colliding tiles above) reset movement to 0
F00:0464       VerticalCollision:
F00:0465       	STMFD sp!, {r1-r7, lr}
               S01:0800065C:  FE 40 2D E9
F00:0466       		MOV r5, r3	;r5 = next y
               S01:08000660:  03 50 A0 E1
F00:0467       		MOV r6, r1	;r6 = current x
               S01:08000664:  01 60 A0 E1
F00:0468       		MOV r7, r2	;r7 = current y
               S01:08000668:  02 70 A0 E1
F00:0469       			
F00:0470       		CMP r5, r7
               S01:0800066C:  07 00 55 E1
F00:0471       		BEQ VerticalCollision_END
               S01:08000670:  43 00 00 0A
F00:0472       		BGT VerticalCollision_CheckDown	;Greater than means moving down since (0,0) is top left
               S01:08000674:  20 00 00 CA
F00:0473       		;Otherwise, we are less than and don't need to check
F00:0474       			
F00:0475       		VerticalCollision_CheckUp:
F00:0476       		;;;;;;;;;;;Top Left Collision
F00:0477       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0478       		MOV r1, r6	;Load player X position into first register
               S01:08000678:  06 10 A0 E1
F00:0479       		;Add nothing to get rightmost x value
F00:0480       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:0800067C:  08 20 A0 E3
F00:0481       		BL DIV
               S01:08000680:  B2 01 00 EB
F00:0482       		MOV r3, r0
               S01:08000684:  00 30 A0 E1
F00:0483       		
F00:0484       		MOV r1, r5	;Load player next Y position into first register
               S01:08000688:  05 10 A0 E1
F00:0485       		;Add nothing to get top X value
F00:0486       		MOV r2, #TileLength	;Divide Y by length of a tile
               S01:0800068C:  08 20 A0 E3
F00:0487       		BL DIV
               S01:08000690:  AE 01 00 EB
F00:0488       		MOV r4, r0
               S01:08000694:  00 40 A0 E1
F00:0489       		
F00:0490       		;Load tile index from tilemap
F00:0491       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000698:  2D 0C 8F E2 14 00 80 E2
F00:0492       		MOV r1, #TilemapWidth
               S01:080006A0:  20 10 A0 E3
F00:0493       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:080006A4:  91 34 22 E0
F00:0494       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:080006A8:  02 40 D0 E7
F00:0495       		
F00:0496       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0497       		CMP r4, #BackgroundCollideLimit
               S01:080006AC:  12 00 54 E3
F00:0498       		MOVGTE r5, r7	;If colliding, reset y position
               S01:080006B0:  07 50 A0 C1
F00:0499       		BGE VerticalCollision_END	;End early, if we collided here, we couldn't have collided in the opposite direction and we 
               S01:080006B4:  32 00 00 AA
F00:0500       		
F00:0501       		;;;;;;;;;;;Top Right Collision
F00:0502       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0503       		MOV r1, r6	;Load player X position into first register
               S01:080006B8:  06 10 A0 E1
F00:0504       		ADD r1, r1, #PlayerWidth-1	;Add width of player to get rightmost x value, subtract 1 to get flush with wall (so we get
               S01:080006BC:  0F 10 81 E2
F00:0505       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:080006C0:  08 20 A0 E3
F00:0506       		BL DIV
               S01:080006C4:  A1 01 00 EB
F00:0507       		MOV r3, r0
               S01:080006C8:  00 30 A0 E1
F00:0508       		
F00:0509       		MOV r1, r5	;Load player Y position into first register
               S01:080006CC:  05 10 A0 E1
F00:0510       		;Add nothing to get top X value
F00:0511       		MOV r2, #TileLength	;Divide Y by length of a tile
               S01:080006D0:  08 20 A0 E3
F00:0512       		BL DIV
               S01:080006D4:  9D 01 00 EB
F00:0513       		MOV r4, r0
               S01:080006D8:  00 40 A0 E1
F00:0514       		
F00:0515       		;Load tile index from tilemap
F00:0516       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:080006DC:  0B 0B 8F E2 D0 00 80 E2
F00:0517       		MOV r1, #TilemapWidth
               S01:080006E4:  20 10 A0 E3
F00:0518       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:080006E8:  91 34 22 E0
F00:0519       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:080006EC:  02 40 D0 E7
F00:0520       		
F00:0521       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0522       		CMP r4, #BackgroundCollideLimit
               S01:080006F0:  12 00 54 E3
F00:0523       		MOVGTE r5, r7	;If colliding, reset y position
               S01:080006F4:  07 50 A0 C1
F00:0524       		
F00:0525       		B VerticalCollision_END	;Finished checking up, skip to end
               S01:080006F8:  21 00 00 EA
F00:0526       		
F00:0527       		VerticalCollision_CheckDown:
F00:0528       		;;;;;;;;;;;Bottom Left Collision
F00:0529       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0530       		MOV r1, r6	;Load player X position into first register
               S01:080006FC:  06 10 A0 E1
F00:0531       		;Add nothing to get left x value
F00:0532       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000700:  08 20 A0 E3
F00:0533       		BL DIV
               S01:08000704:  91 01 00 EB
F00:0534       		MOV r3, r0
               S01:08000708:  00 30 A0 E1
F00:0535       		
F00:0536       		;Y index is found the same way
F00:0537       		MOV r1, r5	;Load player X position into first register
               S01:0800070C:  05 10 A0 E1
F00:0538       		ADD r1, r1, #PlayerHeight-1	;Add height of player to get bottom y level, subtract 1 to get flush with wall (so we get 
               S01:08000710:  0F 10 81 E2
F00:0539       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000714:  08 20 A0 E3
F00:0540       		BL DIV
               S01:08000718:  8C 01 00 EB
F00:0541       		MOV r4, r0
               S01:0800071C:  00 40 A0 E1
F00:0542       		
F00:0543       		;Load tile index from tilemap
F00:0544       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000720:  0B 0B 8F E2 8C 00 80 E2
F00:0545       		MOV r1, #TilemapWidth
               S01:08000728:  20 10 A0 E3
F00:0546       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:0800072C:  91 34 22 E0
F00:0547       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:08000730:  02 40 D0 E7
F00:0548       		
F00:0549       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0550       		CMP r4, #BackgroundCollideLimit
               S01:08000734:  12 00 54 E3
F00:0551       		MOVGTE r5, r7	;If colliding, reset y position
               S01:08000738:  07 50 A0 C1
F00:0552       		BGE VerticalCollision_END
               S01:0800073C:  10 00 00 AA
F00:0553       		
F00:0554       		;;;;;;;;;;;Bottom Right Collision
F00:0555       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0556       		MOV r1, r6	;Load player X position into first register
               S01:08000740:  06 10 A0 E1
F00:0557       		ADD r1, r1, #PlayerWidth-1;Add width to get right x value, subtract 1 to get flush with wall (so we get index INSIDE t
               S01:08000744:  0F 10 81 E2
F00:0558       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000748:  08 20 A0 E3
F00:0559       		BL DIV
               S01:0800074C:  7F 01 00 EB
F00:0560       		MOV r3, r0
               S01:08000750:  00 30 A0 E1
F00:0561       		
F00:0562       		;Y index is found the same way
F00:0563       		MOV r1, r5	;Load player X position into first register
               S01:08000754:  05 10 A0 E1
F00:0564       		ADD r1, r1, #PlayerHeight-1	;Add height of player to get bottom y level, subtract 1 to get flush with wall (so we get 
               S01:08000758:  0F 10 81 E2
F00:0565       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:0800075C:  08 20 A0 E3
F00:0566       		BL DIV
               S01:08000760:  7A 01 00 EB
F00:0567       		MOV r4, r0
               S01:08000764:  00 40 A0 E1
F00:0568       		
F00:0569       		;Load tile index from tilemap
F00:0570       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000768:  0B 0B 8F E2 44 00 80 E2
F00:0571       		MOV r1, #TilemapWidth
               S01:08000770:  20 10 A0 E3
F00:0572       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:08000774:  91 34 22 E0
F00:0573       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:08000778:  02 40 D0 E7
F00:0574       		
F00:0575       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0576       		CMP r4, #BackgroundCollideLimit
               S01:0800077C:  12 00 54 E3
F00:0577       		MOVGE r5, r7	;If colliding, reset y position
               S01:08000780:  07 50 A0 A1
F00:0578       		
F00:0579       		VerticalCollision_END:
F00:0580       		
F00:0581       		;Update memory with new position
F00:0582       		MOV r6, #PlayerY
               S01:08000784:  02 64 A0 E3 23 60 86 E3
F00:0583       		STRB r5, [r6]
               S01:0800078C:  00 50 C6 E5
F00:0584       	LDMFD sp!, {r1-r7, pc}
               S01:08000790:  FE 80 BD E8
F00:0585       	
F00:0586       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0587       ;r1 = current x position
F00:0588       ;r2 = current y position
F00:0589       ;r3 = next x position
F00:0590       ;Checks collision with background objects
F00:0591       ;Check player's position in relation to tiles
F00:0592       ;Get tile at that index in the tilemap ((TilemapWidth * y) + x)
F00:0593       ;If tile is equal or greater than the index mark (non-colliding tiles below, colliding tiles above) reset movement to 0
F00:0594       HorizontalCollision:
F00:0595       	STMFD sp!, {r1-r7, lr}
               S01:08000794:  FE 40 2D E9
F00:0596       		MOV r5, r3	;r5 = next y
               S01:08000798:  03 50 A0 E1
F00:0597       		MOV r6, r1	;r6 = current x
               S01:0800079C:  01 60 A0 E1
F00:0598       		MOV r7, r2	;r7 = current y
               S01:080007A0:  02 70 A0 E1
F00:0599       		
F00:0600       		CMP r5, r6	;Compare new position to last position
               S01:080007A4:  06 00 55 E1
F00:0601       		BEQ HorizontalCollision_END	;If equal, we haven't moved, don't need to check collision
               S01:080007A8:  43 00 00 0A
F00:0602       		BGT HorizontalCollision_CheckRight	;If current is greater than last position
               S01:080007AC:  20 00 00 CA
F00:0603       		
F00:0604       		HorizontalCollision_CheckLeft:
F00:0605       		;Checking just x component (in case colliding trying to move vertically also and there isn't a collision there or vice
F00:0606       		;;;;;;;;;;;Top Left Collision
F00:0607       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0608       		MOV r1, r5	;Load player X position into first register
               S01:080007B0:  05 10 A0 E1
F00:0609       		;Add nothing to get rightmost x value
F00:0610       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:080007B4:  08 20 A0 E3
F00:0611       		BL DIV
               S01:080007B8:  64 01 00 EB
F00:0612       		MOV r3, r0
               S01:080007BC:  00 30 A0 E1
F00:0613       		
F00:0614       		;Y index is found the same way
F00:0615       		MOV r1, r7	;Load player y position into first register
               S01:080007C0:  07 10 A0 E1
F00:0616       		;Add nothing to get top y value
F00:0617       		MOV r2, #TileLength	;Divide y by length of a tile
               S01:080007C4:  08 20 A0 E3
F00:0618       		BL DIV
               S01:080007C8:  60 01 00 EB
F00:0619       		MOV r4, r0
               S01:080007CC:  00 40 A0 E1
F00:0620       		
F00:0621       		;Load tile index from tilemap
F00:0622       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:080007D0:  2B 0C 8F E2 DC 00 80 E2
F00:0623       		MOV r1, #TilemapWidth
               S01:080007D8:  20 10 A0 E3
F00:0624       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:080007DC:  91 34 22 E0
F00:0625       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:080007E0:  02 40 D0 E7
F00:0626       		
F00:0627       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0628       		CMP r4, #BackgroundCollideLimit
               S01:080007E4:  12 00 54 E3
F00:0629       		MOVGTE r5, r6	;If colliding, reset x position
               S01:080007E8:  06 50 A0 C1
F00:0630       		BGE HorizontalCollision_END
               S01:080007EC:  32 00 00 AA
F00:0631       		
F00:0632       		;;;;;;;;;;;Bottom Left Collision
F00:0633       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0634       		MOV r1, r5	;Load player X position into first register
               S01:080007F0:  05 10 A0 E1
F00:0635       		;Add nothing to get left x value
F00:0636       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:080007F4:  08 20 A0 E3
F00:0637       		BL DIV
               S01:080007F8:  54 01 00 EB
F00:0638       		MOV r3, r0
               S01:080007FC:  00 30 A0 E1
F00:0639       		
F00:0640       		;Y index is found the same way
F00:0641       		MOV r1, r7	;Load player X position into first register
               S01:08000800:  07 10 A0 E1
F00:0642       		ADD r1, r1, #PlayerHeight-1	;Add height of player to get bottom y level, subtract 1 to get flush with wall (so we get 
               S01:08000804:  0F 10 81 E2
F00:0643       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000808:  08 20 A0 E3
F00:0644       		BL DIV
               S01:0800080C:  4F 01 00 EB
F00:0645       		MOV r4, r0
               S01:08000810:  00 40 A0 E1
F00:0646       		
F00:0647       		;Load tile index from tilemap
F00:0648       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000814:  2B 0C 8F E2 98 00 80 E2
F00:0649       		MOV r1, #TilemapWidth
               S01:0800081C:  20 10 A0 E3
F00:0650       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:08000820:  91 34 22 E0
F00:0651       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:08000824:  02 40 D0 E7
F00:0652       		
F00:0653       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0654       		CMP r4, #BackgroundCollideLimit
               S01:08000828:  12 00 54 E3
F00:0655       		MOVGTE r5, r6	;If colliding, reset x position
               S01:0800082C:  06 50 A0 C1
F00:0656       		BGE HorizontalCollision_END
               S01:08000830:  21 00 00 AA
F00:0657       		
F00:0658       		HorizontalCollision_CheckRight:
F00:0659       		
F00:0660       		;;;;;;;;;;;Top Right Collision
F00:0661       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0662       		MOV r1, r5	;Load player X position into first register
               S01:08000834:  05 10 A0 E1
F00:0663       		ADD r1, r1, #PlayerWidth-1	;Add width of player to get rightmost x value, subtract 1 to get flush with wall (so we get
               S01:08000838:  0F 10 81 E2
F00:0664       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:0800083C:  08 20 A0 E3
F00:0665       		BL DIV
               S01:08000840:  42 01 00 EB
F00:0666       		MOV r3, r0
               S01:08000844:  00 30 A0 E1
F00:0667       		
F00:0668       		;Y index is found the same way
F00:0669       		MOV r1, r7	;Load player X position into first register
               S01:08000848:  07 10 A0 E1
F00:0670       		;Add nothing to get top y value
F00:0671       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:0800084C:  08 20 A0 E3
F00:0672       		BL DIV
               S01:08000850:  3E 01 00 EB
F00:0673       		MOV r4, r0
               S01:08000854:  00 40 A0 E1
F00:0674       		
F00:0675       		;Load tile index from tilemap
F00:0676       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000858:  2B 0C 8F E2 54 00 80 E2
F00:0677       		MOV r1, #TilemapWidth
               S01:08000860:  20 10 A0 E3
F00:0678       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:08000864:  91 34 22 E0
F00:0679       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:08000868:  02 40 D0 E7
F00:0680       		
F00:0681       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0682       		CMP r4, #BackgroundCollideLimit
               S01:0800086C:  12 00 54 E3
F00:0683       		MOVGTE r5, r6	;If colliding, reset x position
               S01:08000870:  06 50 A0 C1
F00:0684       		BGE HorizontalCollision_END
               S01:08000874:  10 00 00 AA
F00:0685       		
F00:0686       		;;;;;;;;;;;Bottom Right Collision
F00:0687       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0688       		MOV r1, r5	;Load player X position into first register
               S01:08000878:  05 10 A0 E1
F00:0689       		ADD r1, r1, #PlayerWidth-1;Add width to get right x value, subtract 1 to get flush with wall (so we get index INSIDE t
               S01:0800087C:  0F 10 81 E2
F00:0690       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000880:  08 20 A0 E3
F00:0691       		BL DIV
               S01:08000884:  31 01 00 EB
F00:0692       		MOV r3, r0
               S01:08000888:  00 30 A0 E1
F00:0693       		
F00:0694       		;Y index is found the same way
F00:0695       		MOV r1, r7	;Load player X position into first register
               S01:0800088C:  07 10 A0 E1
F00:0696       		ADD r1, r1, #PlayerHeight-1	;Add height of player to get bottom y level, subtract 1 to get flush with wall (so we get 
               S01:08000890:  0F 10 81 E2
F00:0697       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000894:  08 20 A0 E3
F00:0698       		BL DIV
               S01:08000898:  2C 01 00 EB
F00:0699       		MOV r4, r0
               S01:0800089C:  00 40 A0 E1
F00:0700       		
F00:0701       		;Load tile index from tilemap
F00:0702       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:080008A0:  2B 0C 8F E2 0C 00 80 E2
F00:0703       		MOV r1, #TilemapWidth
               S01:080008A8:  20 10 A0 E3
F00:0704       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:080008AC:  91 34 22 E0
F00:0705       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:080008B0:  02 40 D0 E7
F00:0706       		
F00:0707       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0708       		CMP r4, #BackgroundCollideLimit
               S01:080008B4:  12 00 54 E3
F00:0709       		MOVGTE r5, r6	;If colliding, reset x position
               S01:080008B8:  06 50 A0 C1
F00:0710       		
F00:0711       		HorizontalCollision_END:
F00:0712       		
F00:0713       		;Update memory with new position
F00:0714       		MOV r6, #PlayerX
               S01:080008BC:  02 64 A0 E3 22 60 86 E3
F00:0715       		STRB r5, [r6]
               S01:080008C4:  00 50 C6 E5
F00:0716       	LDMFD sp!, {r1-r7, pc}
               S01:080008C8:  FE 80 BD E8
F00:0717       
F00:0718       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0719       ;r1 = Sprite number to draw
F00:0720       ;r2 = First sprite attribute (See code below for format)
F00:0721       ;r3 = Second sprite attribute (See code below for format)
F00:0722       ;r4	= Third sprite attribute (See code below for format)
F00:0723       ;Based on https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0724       ;Redesigned slightly, GetNextLine was extracted into it's own function
F00:0725       DrawSprite:
F00:0726       	STMFD sp!, {r1-r5, lr}
               S01:080008CC:  3E 40 2D E9
F00:0727       		MOV r5, #SpriteOAMSettings
               S01:080008D0:  07 54 A0 E3
F00:0728       		ADD r5, r5, r1, asl #3	;8 bytes per sprite, bit shift left to get 8 so we can set the first sprite attribute
               S01:080008D4:  81 51 85 E0
F00:0729       		
F00:0730       		;S=Shape Square / HRect / VRect
F00:0731       		;C=Colors 15/256
F00:0732       		;M=Mosaic
F00:0733       		;T=Transparent
F00:0734       		;D=Disable/Doublesize
F00:0735       		;R=Rotation
F00:0736       		;Y=Ypos
F00:0737       		;First Attribute - SSCMTTDRYYYYYYYY
F00:0738       		STRH r2, [r5]
               S01:080008D8:  B0 20 45 E1
F00:0739       		ADD r5, r5, #2	;Move to next halfword to set the second sprite attribute
               S01:080008DC:  02 50 85 E2
F00:0740       		
F00:0741       		;S=Obj Size
F00:0742       		;VH=V/HFlip
F00:0743       		;R=Rotation Parameter
F00:0744       		;X=Xpos
F00:0745       		;Second Attribute - SSVHRRRXXXXXXXXX
F00:0746       		STRH r3, [r5]
               S01:080008E0:  B0 30 45 E1
F00:0747       		ADD r5, r5, #2 ;Move to next halfword to set the third sprite attribute
               S01:080008E4:  02 50 85 E2
F00:0748       		
F00:0749       		;C=Color Palette
F00:0750       		;P=Priority
F00:0751       		;T=Tile Number
F00:0752       		;Third Attribute - CCCCPPTTTTTTTTTT
F00:0753       		STRH r4, [r5]
               S01:080008E8:  B0 40 45 E1
F00:0754       	LDMFD sp!, {r1-r5, pc}
               S01:080008EC:  3E 80 BD E8
F00:0755       	
F00:0756       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0757       ;Choose which frame to render and then render it
F00:0758       ;
F00:0759       Render:
F00:0760       	STMFD sp!, {r1-r5, lr}
               S01:080008F0:  3E 40 2D E9
F00:0761       		;See DrawSprite for meanings of the sprite attribute bits (r2-r4)
F00:0762       		MOV r1,#PlayerSpriteNum
               S01:080008F4:  01 10 A0 E3
F00:0763       		
F00:0764       		MOV r2,#0b0000000000000000
               S01:080008F8:  00 20 A0 E3
F00:0765       		MOV r4, #PlayerY
               S01:080008FC:  02 44 A0 E3 23 40 84 E3
F00:0766       		LDRB r5, [r4]
               S01:08000904:  00 50 D4 E5
F00:0767       		ADD r2, r2, r5	;Add y pos to first sprite attribute (y pos is lowest 8 bits)
               S01:08000908:  05 20 82 E0
F00:0768       		
F00:0769       		MOV r3,#0b0100000000000000
               S01:0800090C:  01 39 A0 E3
F00:0770       		MOV r4, #PlayerX
               S01:08000910:  02 44 A0 E3 22 40 84 E3
F00:0771       		LDRB r5, [r4]
               S01:08000918:  00 50 D4 E5
F00:0772       		ADD r3, r3, r5	;Add x pos to second sprite attribute (x pos is lowest 9 bits)
               S01:0800091C:  05 30 83 E0
F00:0773       		
F00:0774       		MOV r4,#0b0000000000000000
               S01:08000920:  00 40 A0 E3
F00:0775       		MOV r5, #PlayerTileStart	;Index that marks player start is located in lower bits of third attribute
               S01:08000924:  01 50 A0 E3
F00:0776       		ADD r4, r4, r5
               S01:08000928:  05 40 84 E0
F00:0777       	
F00:0778       		BL DrawSprite
               S01:0800092C:  E6 FF FF EB
F00:0779       	LDMFD sp!, {r1-r5, pc}
               S01:08000930:  3E 80 BD E8
F00:0780       	
F00:0781       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0782       ;Use E conditional to check if pressed
F00:0783       ;r1 = key mask
F00:0784       ;Returns keymask in r0
F00:0785       GetButton:
F00:0786       	STMFD sp!, {r1-r2, lr}
               S01:08000934:  06 40 2D E9
F00:0787       		EOR r0, r0, r0
               S01:08000938:  00 00 20 E0
F00:0788       		MOV r2, #InputLocation	;Input memory location
               S01:0800093C:  13 2E A0 E3 01 23 82 E3
F00:0789       		LDRH r0, [r2]			;Get value of input, (1 = not pressed)
               S01:08000944:  B0 00 52 E1
F00:0790       		MOV r2, #MaskKey		;Mask out superfluous bits
               S01:08000948:  3F 2B A0 E3
F00:0791       		BIC r0, r0, r2			;Inverse AND the register to only keep input bits (last 10 bits)
               S01:0800094C:  02 00 C0 E1
F00:0792       		AND r0, r0, r1			;AND return register with input bits with the passed key mask
               S01:08000950:  01 00 00 E0
F00:0793       	LDMFD sp!, {r1-r2, pc}
               S01:08000954:  06 80 BD E8
F00:0794       
F00:0795       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0796       
F00:0797       .INCLUDE "GBA_Core.asm"
F01:0001       .EQU Ram, 0x02000000	;RAM on the GBA starts at 0x02000000, builds upwards, can store whatever we want whereever we want,
F01:0002       
F01:0003       .EQU Stack, 0x03000000
F01:0004       
F01:0005       ;Used in a different screen mode
F01:0006       
F01:0007       .EQU LCDControl, 0x04000000			;Controls which layers are on, what sceenmode we're in
F01:0008       .EQU ScanlineCounter, 0x04000006	;Stores how many lines have been written
F01:0009       
F01:0010       .EQU BackgroundPaletteMemory, 0x05000000		;Location of GBA background palettes in memory
F01:0011       .EQU SpritePaletteMemory, 0x05000200	;Location of GBA hardware sprite palettes in memory memory
F01:0012       
F01:0013       .EQU VramBase, 0x06000000	;Base of VRAM, where address of data that is written to the screen starts, starts at Character
F01:0014       .EQU VramTilemapPixelPatterns, 0x06004000	;Location of tile pixels patterns (images) in memory, starts at Character Bloc
F01:0015       .EQU VramBackground, 0x06000800	;Memory location in VRAM of background layer, Screen Block 1 of Character Block 0
F01:0016       .EQU VramSpritePixelPatterns, 0x06010000	;Location of GBA sprite pixels patterns (images) in memory, screen block 2
F01:0017       
F01:0018       .EQU SpriteOAMSettings, 0x07000000	;Memory address for attributes for sprites that determine how they're drawn
F00:0798       .INCLUDE "GBA_Text.asm"
F02:0001       .include "GBA_Core.asm"
F03:0001       .EQU Ram, 0x02000000	;RAM on the GBA starts at 0x02000000, builds upwards, can store whatever we want whereever we want,
F03:0002       
F03:0003       .EQU Stack, 0x03000000
F03:0004       
F03:0005       ;Used in a different screen mode
F03:0006       
F03:0007       .EQU LCDControl, 0x04000000			;Controls which layers are on, what sceenmode we're in
F03:0008       .EQU ScanlineCounter, 0x04000006	;Stores how many lines have been written
F03:0009       
F03:0010       .EQU BackgroundPaletteMemory, 0x05000000		;Location of GBA background palettes in memory
F03:0011       .EQU SpritePaletteMemory, 0x05000200	;Location of GBA hardware sprite palettes in memory memory
F03:0012       
F03:0013       .EQU VramBase, 0x06000000	;Base of VRAM, where address of data that is written to the screen starts, starts at Character
F03:0014       .EQU VramTilemapPixelPatterns, 0x06004000	;Location of tile pixels patterns (images) in memory, starts at Character Bloc
F03:0015       .EQU VramBackground, 0x06000800	;Memory location in VRAM of background layer, Screen Block 1 of Character Block 0
F03:0016       .EQU VramSpritePixelPatterns, 0x06010000	;Location of GBA sprite pixels patterns (images) in memory, screen block 2
F03:0017       
F03:0018       .EQU SpriteOAMSettings, 0x07000000	;Memory address for attributes for sprites that determine how they're drawn
F02:0002       
F02:0003       .EQU CursorX, Ram+32	;32 bits past ram start
F02:0004       .EQU CursorY, Ram+33	;1 bit past CursorX
F02:0005       
F02:0006       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F02:0007       ;Comments added by me, Dillon Drummond
F02:0008       NewLine:
F02:0009       	STMFD sp!, {r0-r1, lr}	;Store stack pointer, registers 0-12, and link register on stack so we don't lose info from the 
               S01:08000958:  03 40 2D E9
F02:0010       		MOV r0, #CursorX	;Get address of cursor x
               S01:0800095C:  02 04 A0 E3 20 00 80 E3
F02:0011       		EOR r1, r1, r1		;Clear r1
               S01:08000964:  01 10 21 E0
F02:0012       		STRB r1, [r0]		;Store 0 from r1 in CursorX, move cursor back to left side of screen
               S01:08000968:  00 10 C0 E5
F02:0013       		
F02:0014       		MOV r0, #CursorY	;Get Y address
               S01:0800096C:  02 04 A0 E3 21 00 80 E3
F02:0015       		LDRB r1, [r0]		;Store CursorY valye in r1
               S01:08000974:  00 10 D0 E5
F02:0016       		ADD r1, r1, #1		;Add 1 to CursorY
               S01:08000978:  01 10 81 E2
F02:0017       		STRB r1, [r0]		;Store the incremented CursorY vlaue in CursorY, moves cursor down
               S01:0800097C:  00 10 C0 E5
F02:0018       	LDMFD sp!, {r0-r1, pc}	;Load registers from stack, put link register in program counter to return
               S01:08000980:  03 80 BD E8
F02:0019       
F02:0020       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F02:0021       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F02:0022       ;Comments added by me, Dillon Drummond
F02:0023       ;Some changes made
F02:0024       ;Paramters: r1 = string address
F02:0025       WriteText:
F02:0026       	STMFD sp!, {r0-r2, lr}
               S01:08000984:  07 40 2D E9
F02:0027       		MOV r2, r1			;Store parameter in temp variable so new parameter can be passed to WriteChar
               S01:08000988:  01 20 A0 E1
F02:0028       		
F02:0029       RepeatWriteText:
F02:0030       		LDRB r1, [r2], #1 	;Load byte then shift by 1
               S01:0800098C:  01 10 D2 E4
F02:0031       		CMPS r1, #255		;Check if char is null terminator
               S01:08000990:  FF 00 51 E3
F02:0032       		BEQ WriteTextDone	;If null terminator, exit
               S01:08000994:  01 00 00 0A
F02:0033       		BL WriteChar		;Otherwise, write character
               S01:08000998:  01 00 00 EB
F02:0034       		B RepeatWriteText	;Go back to begining of this block and check if there is another character or if at null terminator
               S01:0800099C:  FA FF FF EA
F02:0035       	
F02:0036       WriteTextDone:
F02:0037       	LDMFD sp!, {r0-r2, pc}
               S01:080009A0:  07 80 BD E8
F02:0038       	
F02:0039       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F02:0040       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F02:0041       ;Comments added by me, Dillon Drummond
F02:0042       ;r1 = character to write
F02:0043       WriteChar:
F02:0044       	STMFD sp!, {r0-r12, lr}	;Store registers and link register
               S01:080009A4:  FF 5F 2D E9
F02:0045       		;Clear r4 and r5
F02:0046       		EOR r4, r4, r4
               S01:080009A8:  04 40 24 E0
F02:0047       		EOR r5, r5, r5
               S01:080009AC:  05 50 25 E0
F02:0048       		
F02:0049       		;Loading address of cursor x and y then loading values into r4 and r5
F02:0050       		MOV r3, #CursorX
               S01:080009B0:  02 34 A0 E3 20 30 83 E3
F02:0051       		LDRB r4, [r3]
               S01:080009B8:  00 40 D3 E5
F02:0052       		MOV r3, #CursorY
               S01:080009BC:  02 34 A0 E3 21 30 83 E3
F02:0053       		LDRB r5, [r3]
               S01:080009C4:  00 50 D3 E5
F02:0054       		
F02:0055       		;r4 = cursor x position, r5 = cursor y position
F02:0056       		
F02:0057       		MOV r3, #VramBase	;Load VRAM base address in, addresses after this point will modify screen, 2 bytes, half word, 16 bi
               S01:080009C8:  06 34 A0 E3
F02:0058       		
F02:0059       		;Each char is 8 x 8 pixels
F02:0060       		;Each pixel is 2 bytes
F02:0061       		;8 lines of 16 bytes
F02:0062       		MOV r6, #16		;Bytes in a line of character
               S01:080009CC:  10 60 A0 E3
F02:0063       		MUL r2, r4, r6	;Multiply cursor x position by 16
               S01:080009D0:  94 06 02 E0
F02:0064       		ADD r3, r3, r2	;Add that position to r2 so we are at that x position in VRAM
               S01:080009D4:  02 30 83 E0
F02:0065       		
F02:0066       		MOV r4, #240*8*2	;240 pixels per row, 8 lines per char, 2 bytes per pixel, (no longer need cursor x position, can writ
               S01:080009D8:  0F 4C A0 E3
F02:0067       		MUL r2, r5, r4		;cursor y position * bytes per char row (8 screen lines, 240 pixels per line, 2 bytes per pixel)
               S01:080009DC:  95 04 02 E0
F02:0068       		ADD r3, r3, r2		;Add number of bytes to move over in x direction (r3) and number of bytes to move down in the y direct
               S01:080009E0:  02 30 83 E0
F02:0069       		
F02:0070       		;I added this, could potentially cause problems
F02:0071       		;Within each 8x8 space for chars, they are offset to the right by one pixel for some reason.  Since r3 is the location
F02:0072       		;;;;;;;;;;;;;;;;;;;;;;;
F02:0073       		SUB r3, r3, #2	;Subtract 1 byte from position, solves 1 byte right offset within each char space, may have something t
               S01:080009E4:  02 30 43 E2
F02:0074       		;;;;;;;;;;;;;;;;;;;;;;;
F02:0075       		
F02:0076       		ADR r4,BitmapFont 	;Load address of font into r4
               S01:080009E8:  58 40 8F E2
F02:0077       		
F02:0078       		SUB r1,r1,#32			;Subtract 32 from value in first paramter 
               S01:080009EC:  20 10 41 E2
F02:0079       		ADD r4,r4,r1,asl #3		;Add the value to the bitmap font and shift left 3 to multiply by 8 and get address of the passed
               S01:080009F0:  81 41 84 E0
F02:0080       		
F02:0081       		MOV r10,#8			;Loop counter for lines
               S01:080009F4:  08 A0 A0 E3
F02:0082       WriteLine:
F02:0083       		MOV r7,#8 			;Loop counter for pixels
               S01:080009F8:  08 70 A0 E3
F02:0084       		LDRB r8,[r4],#1				;Load bitmap font value into r8
               S01:080009FC:  01 80 D4 E4
F02:0085       		MOV r9,#0b100000000			;Bitmask gets shifted over 1 through each loop
               S01:08000A00:  01 9C A0 E3
F02:0086       				
F02:0087       		MOV r2, #0b1111111101000000; Color: ABBBBBGGGGGRRRRR	A=Alpha
               S01:08000A04:  FF 2C A0 E3 40 20 82 E3
F02:0088       DrawPixel:
F02:0089       		TST r8,r9			;Test r8 and r9, CMP but with AND function, uses bitmask on bitmap font to check if current pixel in r3 sh
               S01:08000A0C:  09 00 18 E1
F02:0090       		STRNEH r2,[r3]		;SToRe if Not Equal Halfword, stores halfword if test is not equal, sets pixel at r3 to the color in r
               S01:08000A10:  B0 20 43 11
F02:0091       		ADD r3,r3,#2		;Increment r3 by 1 byte
               S01:08000A14:  02 30 83 E2
F02:0092       		MOV r9,r9,ror #1	;Rotate bitmask (0b10000000 checks leftmost pixel, 0b01000000 checks the next one, etc.)
               S01:08000A18:  E9 90 A0 E1
F02:0093       		SUBS r7,r7,#1		;Decrement loop counter for pixels, set signs to check if after 8 pixels
               S01:08000A1C:  01 70 57 E2
F02:0094       		BNE DrawPixel		;Loop for 8 pixels, until zero flag is set
               S01:08000A20:  F9 FF FF 1A
F02:0095       		
F02:0096       		ADD r3,r3,#480-16	;240 pixels * 2 bytes per pixel - 16 
               S01:08000A24:  1D 3E 83 E2
F02:0097       		SUBS r10,r10,#1		;Decrement loop counter for lines, set signs to see if after 8 lines	
               S01:08000A28:  01 A0 5A E2
F02:0098       		BNE WriteLine		;If zeor flag set, exit.  Otherwise, repeat, go to next line
               S01:08000A2C:  F1 FF FF 1A
F02:0099       LineDone:	
F02:0100       		MOV r3,#CursorX		;Get CursorX address
               S01:08000A30:  02 34 A0 E3 20 30 83 E3
F02:0101       		LDRB r1,[r3]		;Get CursorX value
               S01:08000A38:  00 10 D3 E5
F02:0102       		ADD r1,r1,#1		;Increment cursor by 1 position
               S01:08000A3C:  01 10 81 E2
F02:0103       		STRB r1,[r3]		;Store incremented value back in address
               S01:08000A40:  00 10 C3 E5
F02:0104       		
F02:0105       	LDMFD sp!, {r0-r12, pc}	;Return
               S01:08000A44:  FF 9F BD E8
F02:0106       	
F02:0107       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F02:0108       
F02:0109       ;Starts at ASCII number 32, simplifying by starting at 0
F02:0110       ;I translated the Presst Start 2P Google Font into 8 element arrays of byte sized hex codes
F02:0111       ;This effectively defines an 8x8 bitmap of a character
F02:0112       ;Method learned from https://www.chibialiens.com/arm/helloworld.php#LessonH2
F02:0113       BitmapFont:
F02:0114       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	;0 - Space
               S01:08000A48:  00
               S01:08000A49:  00
               S01:08000A4A:  00
               S01:08000A4B:  00
               S01:08000A4C:  00
               S01:08000A4D:  00
               S01:08000A4E:  00
               S01:08000A4F:  00
F02:0115       	.BYTE 0x70,0x70,0x70,0x60,0x60,0x00,0x60,0x00	;1 - !
               S01:08000A50:  70
               S01:08000A51:  70
               S01:08000A52:  70
               S01:08000A53:  60
               S01:08000A54:  60
               S01:08000A55:  00
               S01:08000A56:  60
               S01:08000A57:  00
F02:0116       	.BYTE 0x00,0x66,0x66,0x66,0x00,0x00,0x00,0x00	;2 - "
               S01:08000A58:  00
               S01:08000A59:  66
               S01:08000A5A:  66
               S01:08000A5B:  66
               S01:08000A5C:  00
               S01:08000A5D:  00
               S01:08000A5E:  00
               S01:08000A5F:  00
F02:0117       	.BYTE 0x00,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C	;3 - #
               S01:08000A60:  00
               S01:08000A61:  6C
               S01:08000A62:  FE
               S01:08000A63:  6C
               S01:08000A64:  6C
               S01:08000A65:  6C
               S01:08000A66:  FE
               S01:08000A67:  6C
F02:0118       	.BYTE 0x00,0x10,0x7C,0xD0,0x7C,0x16,0xFC,0x10	;4 - $
               S01:08000A68:  00
               S01:08000A69:  10
               S01:08000A6A:  7C
               S01:08000A6B:  D0
               S01:08000A6C:  7C
               S01:08000A6D:  16
               S01:08000A6E:  FC
               S01:08000A6F:  10
F02:0119       	.BYTE 0x00,0x62,0xA4,0xC8,0x10,0x26,0x4A,0x8C	;5 - %
               S01:08000A70:  00
               S01:08000A71:  62
               S01:08000A72:  A4
               S01:08000A73:  C8
               S01:08000A74:  10
               S01:08000A75:  26
               S01:08000A76:  4A
               S01:08000A77:  8C
F02:0120       	.BYTE 0x00,0x70,0xD8,0xD8,0x70,0xDA,0xCC,0x7E	;6 - &
               S01:08000A78:  00
               S01:08000A79:  70
               S01:08000A7A:  D8
               S01:08000A7B:  D8
               S01:08000A7C:  70
               S01:08000A7D:  DA
               S01:08000A7E:  CC
               S01:08000A7F:  7E
F02:0121       	.BYTE 0x00,0x30,0x30,0x60,0x00,0x00,0x00,0x00	;7 - '
               S01:08000A80:  00
               S01:08000A81:  30
               S01:08000A82:  30
               S01:08000A83:  60
               S01:08000A84:  00
               S01:08000A85:  00
               S01:08000A86:  00
               S01:08000A87:  00
F02:0122       	.BYTE 0x00,0x0C,0x18,0x30,0x30,0x30,0x18,0x0C	;8 - (
               S01:08000A88:  00
               S01:08000A89:  0C
               S01:08000A8A:  18
               S01:08000A8B:  30
               S01:08000A8C:  30
               S01:08000A8D:  30
               S01:08000A8E:  18
               S01:08000A8F:  0C
F02:0123       	.BYTE 0x00,0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30	;9 - )
               S01:08000A90:  00
               S01:08000A91:  30
               S01:08000A92:  18
               S01:08000A93:  0C
               S01:08000A94:  0C
               S01:08000A95:  0C
               S01:08000A96:  18
               S01:08000A97:  30
F02:0124       	.BYTE 0x00,0x6C,0x38,0xFE,0x38,0x6C,0x00,0x00	;10 - *
               S01:08000A98:  00
               S01:08000A99:  6C
               S01:08000A9A:  38
               S01:08000A9B:  FE
               S01:08000A9C:  38
               S01:08000A9D:  6C
               S01:08000A9E:  00
               S01:08000A9F:  00
F02:0125       	.BYTE 0x00,0x18,0x18,0x7E,0x7E,0x18,0x18,0x00	;11 - +
               S01:08000AA0:  00
               S01:08000AA1:  18
               S01:08000AA2:  18
               S01:08000AA3:  7E
               S01:08000AA4:  7E
               S01:08000AA5:  18
               S01:08000AA6:  18
               S01:08000AA7:  00
F02:0126       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x60	;12 - ,
               S01:08000AA8:  00
               S01:08000AA9:  00
               S01:08000AAA:  00
               S01:08000AAB:  00
               S01:08000AAC:  00
               S01:08000AAD:  30
               S01:08000AAE:  30
               S01:08000AAF:  60
F02:0127       	.BYTE 0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00	;12 - -
               S01:08000AB0:  00
               S01:08000AB1:  00
               S01:08000AB2:  00
               S01:08000AB3:  3C
               S01:08000AB4:  00
               S01:08000AB5:  00
               S01:08000AB6:  00
               S01:08000AB7:  00
F02:0128       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30	;13 - .
               S01:08000AB8:  00
               S01:08000AB9:  00
               S01:08000ABA:  00
               S01:08000ABB:  00
               S01:08000ABC:  00
               S01:08000ABD:  00
               S01:08000ABE:  30
               S01:08000ABF:  30
F02:0129       	.BYTE 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80	;14 - /
               S01:08000AC0:  01
               S01:08000AC1:  02
               S01:08000AC2:  04
               S01:08000AC3:  08
               S01:08000AC4:  10
               S01:08000AC5:  20
               S01:08000AC6:  40
               S01:08000AC7:  80
F02:0130       	.BYTE 0x38,0x4C,0xC6,0xC6,0xC6,0xC6,0x64,0x38	;15 - 0
               S01:08000AC8:  38
               S01:08000AC9:  4C
               S01:08000ACA:  C6
               S01:08000ACB:  C6
               S01:08000ACC:  C6
               S01:08000ACD:  C6
               S01:08000ACE:  64
               S01:08000ACF:  38
F02:0131       	.BYTE 0x00,0x18,0x38,0x18,0x18,0x18,0x18,0x7E	;16 - 1
               S01:08000AD0:  00
               S01:08000AD1:  18
               S01:08000AD2:  38
               S01:08000AD3:  18
               S01:08000AD4:  18
               S01:08000AD5:  18
               S01:08000AD6:  18
               S01:08000AD7:  7E
F02:0132       	.BYTE 0x00,0x7C,0xC6,0x0E,0x3C,0x78,0xE0,0xFE	;17 - 2
               S01:08000AD8:  00
               S01:08000AD9:  7C
               S01:08000ADA:  C6
               S01:08000ADB:  0E
               S01:08000ADC:  3C
               S01:08000ADD:  78
               S01:08000ADE:  E0
               S01:08000ADF:  FE
F02:0133       	.BYTE 0x00,0x7E,0x0C,0x18,0x3C,0x06,0xC6,0x7C	;18 - 3
               S01:08000AE0:  00
               S01:08000AE1:  7E
               S01:08000AE2:  0C
               S01:08000AE3:  18
               S01:08000AE4:  3C
               S01:08000AE5:  06
               S01:08000AE6:  C6
               S01:08000AE7:  7C
F02:0134       	.BYTE 0x00,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C	;19 - 4
               S01:08000AE8:  00
               S01:08000AE9:  1C
               S01:08000AEA:  3C
               S01:08000AEB:  6C
               S01:08000AEC:  CC
               S01:08000AED:  FE
               S01:08000AEE:  0C
               S01:08000AEF:  0C
F02:0135       	.BYTE 0x00,0xFC,0xC0,0xFC,0x06,0x06,0xC6,0x7C	;20 - 5
               S01:08000AF0:  00
               S01:08000AF1:  FC
               S01:08000AF2:  C0
               S01:08000AF3:  FC
               S01:08000AF4:  06
               S01:08000AF5:  06
               S01:08000AF6:  C6
               S01:08000AF7:  7C
F02:0136       	.BYTE 0x00,0x3C,0x60,0xC0,0xFC,0xC6,0xC6,0x7C	;21 - 6
               S01:08000AF8:  00
               S01:08000AF9:  3C
               S01:08000AFA:  60
               S01:08000AFB:  C0
               S01:08000AFC:  FC
               S01:08000AFD:  C6
               S01:08000AFE:  C6
               S01:08000AFF:  7C
F02:0137       	.BYTE 0x00,0xFE,0xC6,0x0C,0x18,0x30,0x30,0x30	;22 - 7
               S01:08000B00:  00
               S01:08000B01:  FE
               S01:08000B02:  C6
               S01:08000B03:  0C
               S01:08000B04:  18
               S01:08000B05:  30
               S01:08000B06:  30
               S01:08000B07:  30
F02:0138       	.BYTE 0x00,0x78,0xC4,0xE4,0x78,0x9E,0x86,0x7C	;23 - 8
               S01:08000B08:  00
               S01:08000B09:  78
               S01:08000B0A:  C4
               S01:08000B0B:  E4
               S01:08000B0C:  78
               S01:08000B0D:  9E
               S01:08000B0E:  86
               S01:08000B0F:  7C
F02:0139       	.BYTE 0x00,0x7C,0xC6,0xC6,0x7E,0x06,0x0C,0x78	;24 - 9
               S01:08000B10:  00
               S01:08000B11:  7C
               S01:08000B12:  C6
               S01:08000B13:  C6
               S01:08000B14:  7E
               S01:08000B15:  06
               S01:08000B16:  0C
               S01:08000B17:  78
F02:0140       	.BYTE 0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00	;25 - :
               S01:08000B18:  00
               S01:08000B19:  30
               S01:08000B1A:  30
               S01:08000B1B:  00
               S01:08000B1C:  00
               S01:08000B1D:  30
               S01:08000B1E:  30
               S01:08000B1F:  00
F02:0141       	.BYTE 0x00,0x30,0x30,0x00,0x30,0x30,0x60,0x00	;26 - ;
               S01:08000B20:  00
               S01:08000B21:  30
               S01:08000B22:  30
               S01:08000B23:  00
               S01:08000B24:  30
               S01:08000B25:  30
               S01:08000B26:  60
               S01:08000B27:  00
F02:0142       	.BYTE 0x00,0x0C,0x18,0x30,0x18,0x0C,0x00,0x00	;27 - <
               S01:08000B28:  00
               S01:08000B29:  0C
               S01:08000B2A:  18
               S01:08000B2B:  30
               S01:08000B2C:  18
               S01:08000B2D:  0C
               S01:08000B2E:  00
               S01:08000B2F:  00
F02:0143       	.BYTE 0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00	;28 - =
               S01:08000B30:  00
               S01:08000B31:  00
               S01:08000B32:  7E
               S01:08000B33:  00
               S01:08000B34:  7E
               S01:08000B35:  00
               S01:08000B36:  00
               S01:08000B37:  00
F02:0144       	.BYTE 0x00,0x30,0x18,0x0C,0x18,0x30,0x00,0x00	;29 - >
               S01:08000B38:  00
               S01:08000B39:  30
               S01:08000B3A:  18
               S01:08000B3B:  0C
               S01:08000B3C:  18
               S01:08000B3D:  30
               S01:08000B3E:  00
               S01:08000B3F:  00
F02:0145       	.BYTE 0x00,0x7C,0xFE,0xC6,0x0C,0x38,0x00,0x38	;30 - ?
               S01:08000B40:  00
               S01:08000B41:  7C
               S01:08000B42:  FE
               S01:08000B43:  C6
               S01:08000B44:  0C
               S01:08000B45:  38
               S01:08000B46:  00
               S01:08000B47:  38
F02:0146       	.BYTE 0x00,0x7C,0x82,0xBA,0xAA,0xBE,0x80,0x7C	;31 - @
               S01:08000B48:  00
               S01:08000B49:  7C
               S01:08000B4A:  82
               S01:08000B4B:  BA
               S01:08000B4C:  AA
               S01:08000B4D:  BE
               S01:08000B4E:  80
               S01:08000B4F:  7C
F02:0147       	.BYTE 0x00,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6	;32 - A
               S01:08000B50:  00
               S01:08000B51:  38
               S01:08000B52:  6C
               S01:08000B53:  C6
               S01:08000B54:  C6
               S01:08000B55:  FE
               S01:08000B56:  C6
               S01:08000B57:  C6
F02:0148       	.BYTE 0x00,0xFC,0xC6,0xC6,0xFC,0xC6,0xC6,0xFC	;33 - B
               S01:08000B58:  00
               S01:08000B59:  FC
               S01:08000B5A:  C6
               S01:08000B5B:  C6
               S01:08000B5C:  FC
               S01:08000B5D:  C6
               S01:08000B5E:  C6
               S01:08000B5F:  FC
F02:0149       	.BYTE 0x00,0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C	;34 - C
               S01:08000B60:  00
               S01:08000B61:  3C
               S01:08000B62:  66
               S01:08000B63:  C0
               S01:08000B64:  C0
               S01:08000B65:  C0
               S01:08000B66:  66
               S01:08000B67:  3C
F02:0150       	.BYTE 0x00,0xF8,0xCC,0xC6,0xC6,0xC6,0xCC,0xF8	;35 - D
               S01:08000B68:  00
               S01:08000B69:  F8
               S01:08000B6A:  CC
               S01:08000B6B:  C6
               S01:08000B6C:  C6
               S01:08000B6D:  C6
               S01:08000B6E:  CC
               S01:08000B6F:  F8
F02:0151       	.BYTE 0x00,0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xFE	;36 - E
               S01:08000B70:  00
               S01:08000B71:  FE
               S01:08000B72:  C0
               S01:08000B73:  C0
               S01:08000B74:  FC
               S01:08000B75:  C0
               S01:08000B76:  C0
               S01:08000B77:  FE
F02:0152       	.BYTE 0x00,0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xC0	;37 - F
               S01:08000B78:  00
               S01:08000B79:  FE
               S01:08000B7A:  C0
               S01:08000B7B:  C0
               S01:08000B7C:  FC
               S01:08000B7D:  C0
               S01:08000B7E:  C0
               S01:08000B7F:  C0
F02:0153       	.BYTE 0x00,0x3E,0x60,0xC0,0xCE,0xC6,0x66,0x3E	;38 - G
               S01:08000B80:  00
               S01:08000B81:  3E
               S01:08000B82:  60
               S01:08000B83:  C0
               S01:08000B84:  CE
               S01:08000B85:  C6
               S01:08000B86:  66
               S01:08000B87:  3E
F02:0154       	.BYTE 0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,0xC6	;39 - H
               S01:08000B88:  00
               S01:08000B89:  C6
               S01:08000B8A:  C6
               S01:08000B8B:  C6
               S01:08000B8C:  C6
               S01:08000B8D:  FE
               S01:08000B8E:  C6
               S01:08000B8F:  C6
F02:0155       	.BYTE 0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x7E	;40 - I
               S01:08000B90:  00
               S01:08000B91:  7E
               S01:08000B92:  18
               S01:08000B93:  18
               S01:08000B94:  18
               S01:08000B95:  18
               S01:08000B96:  18
               S01:08000B97:  7E
F02:0156       	.BYTE 0x00,0x06,0x06,0x06,0x06,0x06,0xC6,0x7C	;41 - J
               S01:08000B98:  00
               S01:08000B99:  06
               S01:08000B9A:  06
               S01:08000B9B:  06
               S01:08000B9C:  06
               S01:08000B9D:  06
               S01:08000B9E:  C6
               S01:08000B9F:  7C
F02:0157       	.BYTE 0x00,0xC6,0xCC,0xD8,0xF0,0xF8,0xDC,0xCE	;42 - K
               S01:08000BA0:  00
               S01:08000BA1:  C6
               S01:08000BA2:  CC
               S01:08000BA3:  D8
               S01:08000BA4:  F0
               S01:08000BA5:  F8
               S01:08000BA6:  DC
               S01:08000BA7:  CE
F02:0158       	.BYTE 0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x7E	;43 - L
               S01:08000BA8:  00
               S01:08000BA9:  60
               S01:08000BAA:  60
               S01:08000BAB:  60
               S01:08000BAC:  60
               S01:08000BAD:  60
               S01:08000BAE:  60
               S01:08000BAF:  7E
F02:0159       	.BYTE 0x00,0xC6,0xEE,0xFE,0xD6,0xD6,0xC6,0xC6	;44 - M
               S01:08000BB0:  00
               S01:08000BB1:  C6
               S01:08000BB2:  EE
               S01:08000BB3:  FE
               S01:08000BB4:  D6
               S01:08000BB5:  D6
               S01:08000BB6:  C6
               S01:08000BB7:  C6
F02:0160       	.BYTE 0x00,0xC6,0xE6,0xF6,0xDE,0xDE,0xC6,0xC6	;45 - N
               S01:08000BB8:  00
               S01:08000BB9:  C6
               S01:08000BBA:  E6
               S01:08000BBB:  F6
               S01:08000BBC:  DE
               S01:08000BBD:  DE
               S01:08000BBE:  C6
               S01:08000BBF:  C6
F02:0161       	.BYTE 0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C	;46 - O
               S01:08000BC0:  00
               S01:08000BC1:  7C
               S01:08000BC2:  C6
               S01:08000BC3:  C6
               S01:08000BC4:  C6
               S01:08000BC5:  C6
               S01:08000BC6:  C6
               S01:08000BC7:  7C
F02:0162       	.BYTE 0x00,0xFC,0xC6,0xC6,0xC6,0xFC,0xC0,0xC0	;47 - P
               S01:08000BC8:  00
               S01:08000BC9:  FC
               S01:08000BCA:  C6
               S01:08000BCB:  C6
               S01:08000BCC:  C6
               S01:08000BCD:  FC
               S01:08000BCE:  C0
               S01:08000BCF:  C0
F02:0163       	.BYTE 0x00,0x7C,0xC6,0xC6,0xC6,0xDE,0xCC,0x7A	;48 - Q
               S01:08000BD0:  00
               S01:08000BD1:  7C
               S01:08000BD2:  C6
               S01:08000BD3:  C6
               S01:08000BD4:  C6
               S01:08000BD5:  DE
               S01:08000BD6:  CC
               S01:08000BD7:  7A
F02:0164       	.BYTE 0x00,0xFC,0xC6,0xC6,0xCE,0xF8,0xDC,0xCE	;49 - R
               S01:08000BD8:  00
               S01:08000BD9:  FC
               S01:08000BDA:  C6
               S01:08000BDB:  C6
               S01:08000BDC:  CE
               S01:08000BDD:  F8
               S01:08000BDE:  DC
               S01:08000BDF:  CE
F02:0165       	.BYTE 0x00,0x7C,0xC6,0xC0,0x7C,0x06,0xC6,0x7C	;50 - S
               S01:08000BE0:  00
               S01:08000BE1:  7C
               S01:08000BE2:  C6
               S01:08000BE3:  C0
               S01:08000BE4:  7C
               S01:08000BE5:  06
               S01:08000BE6:  C6
               S01:08000BE7:  7C
F02:0166       	.BYTE 0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x18	;51 - T
               S01:08000BE8:  00
               S01:08000BE9:  7E
               S01:08000BEA:  18
               S01:08000BEB:  18
               S01:08000BEC:  18
               S01:08000BED:  18
               S01:08000BEE:  18
               S01:08000BEF:  18
F02:0167       	.BYTE 0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C	;52 - U
               S01:08000BF0:  00
               S01:08000BF1:  C6
               S01:08000BF2:  C6
               S01:08000BF3:  C6
               S01:08000BF4:  C6
               S01:08000BF5:  C6
               S01:08000BF6:  C6
               S01:08000BF7:  7C
F02:0168       	.BYTE 0x00,0xC6,0xC6,0xC6,0xEE,0x7C,0x38,0x10	;53 - V
               S01:08000BF8:  00
               S01:08000BF9:  C6
               S01:08000BFA:  C6
               S01:08000BFB:  C6
               S01:08000BFC:  EE
               S01:08000BFD:  7C
               S01:08000BFE:  38
               S01:08000BFF:  10
F02:0169       	.BYTE 0x00,0xD6,0xD6,0xD6,0xD6,0xFE,0xEE,0x44	;54 - W
               S01:08000C00:  00
               S01:08000C01:  D6
               S01:08000C02:  D6
               S01:08000C03:  D6
               S01:08000C04:  D6
               S01:08000C05:  FE
               S01:08000C06:  EE
               S01:08000C07:  44
F02:0170       	.BYTE 0x00,0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6	;55 - X
               S01:08000C08:  00
               S01:08000C09:  C6
               S01:08000C0A:  C6
               S01:08000C0B:  6C
               S01:08000C0C:  38
               S01:08000C0D:  6C
               S01:08000C0E:  C6
               S01:08000C0F:  C6
F02:0171       	.BYTE 0x00,0x66,0x66,0x66,0x3C,0x18,0x18,0x18	;56 - Y
               S01:08000C10:  00
               S01:08000C11:  66
               S01:08000C12:  66
               S01:08000C13:  66
               S01:08000C14:  3C
               S01:08000C15:  18
               S01:08000C16:  18
               S01:08000C17:  18
F02:0172       	.BYTE 0x00,0xFE,0x0E,0x1C,0x38,0x70,0xE0,0xFE	;57 - Z
               S01:08000C18:  00
               S01:08000C19:  FE
               S01:08000C1A:  0E
               S01:08000C1B:  1C
               S01:08000C1C:  38
               S01:08000C1D:  70
               S01:08000C1E:  E0
               S01:08000C1F:  FE
F02:0173       	.BYTE 0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x3C	;58 - [
               S01:08000C20:  00
               S01:08000C21:  3C
               S01:08000C22:  30
               S01:08000C23:  30
               S01:08000C24:  30
               S01:08000C25:  30
               S01:08000C26:  30
               S01:08000C27:  3C
F02:0174       	.BYTE 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01	;59 - \ 
               S01:08000C28:  80
               S01:08000C29:  40
               S01:08000C2A:  20
               S01:08000C2B:  10
               S01:08000C2C:  08
               S01:08000C2D:  04
               S01:08000C2E:  02
               S01:08000C2F:  01
F02:0175       	.BYTE 0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C	;60 - ]
               S01:08000C30:  00
               S01:08000C31:  3C
               S01:08000C32:  0C
               S01:08000C33:  0C
               S01:08000C34:  0C
               S01:08000C35:  0C
               S01:08000C36:  0C
               S01:08000C37:  3C
F02:0176       	.BYTE 0x00,0x38,0x6C,0x00,0x00,0x00,0x00,0x00	;61 - ^
               S01:08000C38:  00
               S01:08000C39:  38
               S01:08000C3A:  6C
               S01:08000C3B:  00
               S01:08000C3C:  00
               S01:08000C3D:  00
               S01:08000C3E:  00
               S01:08000C3F:  00
F02:0177       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE	;62 - _
               S01:08000C40:  00
               S01:08000C41:  00
               S01:08000C42:  00
               S01:08000C43:  00
               S01:08000C44:  00
               S01:08000C45:  00
               S01:08000C46:  00
               S01:08000C47:  FE
F02:0178       	.BYTE 0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00 	;63 - `
               S01:08000C48:  00
               S01:08000C49:  10
               S01:08000C4A:  08
               S01:08000C4B:  00
               S01:08000C4C:  00
               S01:08000C4D:  00
               S01:08000C4E:  00
               S01:08000C4F:  00
F02:0179       	.BYTE 0x00,0x00,0x00,0x7C,0x06,0x7E,0xC6,0x7E	;64 - a
               S01:08000C50:  00
               S01:08000C51:  00
               S01:08000C52:  00
               S01:08000C53:  7C
               S01:08000C54:  06
               S01:08000C55:  7E
               S01:08000C56:  C6
               S01:08000C57:  7E
F02:0180       	.BYTE 0x00,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0x7C	;65 - b
               S01:08000C58:  00
               S01:08000C59:  C0
               S01:08000C5A:  C0
               S01:08000C5B:  FC
               S01:08000C5C:  C6
               S01:08000C5D:  C6
               S01:08000C5E:  C6
               S01:08000C5F:  7C
F02:0181       	.BYTE 0x00,0x00,0x00,0x7E,0xC0,0xC0,0xC0,0x7E	;66 - c
               S01:08000C60:  00
               S01:08000C61:  00
               S01:08000C62:  00
               S01:08000C63:  7E
               S01:08000C64:  C0
               S01:08000C65:  C0
               S01:08000C66:  C0
               S01:08000C67:  7E
F02:0182       	.BYTE 0x00,0x06,0x06,0x7E,0xC6,0xC6,0xC6,0x7E	;67 - d
               S01:08000C68:  00
               S01:08000C69:  06
               S01:08000C6A:  06
               S01:08000C6B:  7E
               S01:08000C6C:  C6
               S01:08000C6D:  C6
               S01:08000C6E:  C6
               S01:08000C6F:  7E
F02:0183       	.BYTE 0x00,0x00,0x00,0x7C,0xC6,0xFE,0xC0,0x7C	;68 - e
               S01:08000C70:  00
               S01:08000C71:  00
               S01:08000C72:  00
               S01:08000C73:  7C
               S01:08000C74:  C6
               S01:08000C75:  FE
               S01:08000C76:  C0
               S01:08000C77:  7C
F02:0184       	.BYTE 0x00,0x0E,0x18,0x7E,0x18,0x18,0x18,0x18	;69 - f
               S01:08000C78:  00
               S01:08000C79:  0E
               S01:08000C7A:  18
               S01:08000C7B:  7E
               S01:08000C7C:  18
               S01:08000C7D:  18
               S01:08000C7E:  18
               S01:08000C7F:  18
F02:0185       	.BYTE 0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x7C	;70 - g
               S01:08000C80:  00
               S01:08000C81:  00
               S01:08000C82:  7E
               S01:08000C83:  C6
               S01:08000C84:  C6
               S01:08000C85:  7E
               S01:08000C86:  06
               S01:08000C87:  7C
F02:0186       	.BYTE 0x00,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xC6	;71 - h
               S01:08000C88:  00
               S01:08000C89:  C0
               S01:08000C8A:  C0
               S01:08000C8B:  FC
               S01:08000C8C:  C6
               S01:08000C8D:  C6
               S01:08000C8E:  C6
               S01:08000C8F:  C6
F02:0187       	.BYTE 0x00,0x18,0x00,0x38,0x18,0x18,0x18,0x7E	;72 - i
               S01:08000C90:  00
               S01:08000C91:  18
               S01:08000C92:  00
               S01:08000C93:  38
               S01:08000C94:  18
               S01:08000C95:  18
               S01:08000C96:  18
               S01:08000C97:  7E
F02:0188       	.BYTE 0x00,0x0C,0x00,0x1C,0x0C,0x0C,0x0C,0x78	;73 - j
               S01:08000C98:  00
               S01:08000C99:  0C
               S01:08000C9A:  00
               S01:08000C9B:  1C
               S01:08000C9C:  0C
               S01:08000C9D:  0C
               S01:08000C9E:  0C
               S01:08000C9F:  78
F02:0189       	.BYTE 0x00,0xC0,0xC0,0xC6,0xCC,0xF8,0xCC,0xC6	;74 - k
               S01:08000CA0:  00
               S01:08000CA1:  C0
               S01:08000CA2:  C0
               S01:08000CA3:  C6
               S01:08000CA4:  CC
               S01:08000CA5:  F8
               S01:08000CA6:  CC
               S01:08000CA7:  C6
F02:0190       	.BYTE 0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x7E	;75 - l
               S01:08000CA8:  00
               S01:08000CA9:  38
               S01:08000CAA:  18
               S01:08000CAB:  18
               S01:08000CAC:  18
               S01:08000CAD:  18
               S01:08000CAE:  18
               S01:08000CAF:  7E
F02:0191       	.BYTE 0x00,0x00,0x00,0xFC,0xB6,0xB6,0xB6,0xB6	;76 - m
               S01:08000CB0:  00
               S01:08000CB1:  00
               S01:08000CB2:  00
               S01:08000CB3:  FC
               S01:08000CB4:  B6
               S01:08000CB5:  B6
               S01:08000CB6:  B6
               S01:08000CB7:  B6
F02:0192       	.BYTE 0x00,0x00,0x00,0xFC,0xC6,0xC6,0xC6,0xC6	;77 - n
               S01:08000CB8:  00
               S01:08000CB9:  00
               S01:08000CBA:  00
               S01:08000CBB:  FC
               S01:08000CBC:  C6
               S01:08000CBD:  C6
               S01:08000CBE:  C6
               S01:08000CBF:  C6
F02:0193       	.BYTE 0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C	;78 - o
               S01:08000CC0:  00
               S01:08000CC1:  00
               S01:08000CC2:  00
               S01:08000CC3:  7C
               S01:08000CC4:  C6
               S01:08000CC5:  C6
               S01:08000CC6:  C6
               S01:08000CC7:  7C
F02:0194       	.BYTE 0x00,0x00,0xFC,0xC6,0xC6,0xFC,0xC0,0xC0	;79 - p
               S01:08000CC8:  00
               S01:08000CC9:  00
               S01:08000CCA:  FC
               S01:08000CCB:  C6
               S01:08000CCC:  C6
               S01:08000CCD:  FC
               S01:08000CCE:  C0
               S01:08000CCF:  C0
F02:0195       	.BYTE 0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x06	;80 - q
               S01:08000CD0:  00
               S01:08000CD1:  00
               S01:08000CD2:  7E
               S01:08000CD3:  C6
               S01:08000CD4:  C6
               S01:08000CD5:  7E
               S01:08000CD6:  06
               S01:08000CD7:  06
F02:0196       	.BYTE 0x00,0x00,0x00,0x6E,0x70,0x60,0x60,0x60	;81 - r
               S01:08000CD8:  00
               S01:08000CD9:  00
               S01:08000CDA:  00
               S01:08000CDB:  6E
               S01:08000CDC:  70
               S01:08000CDD:  60
               S01:08000CDE:  60
               S01:08000CDF:  60
F02:0197       	.BYTE 0x00,0x00,0x00,0x7C,0xC0,0x7C,0x06,0xFC	;82 - s
               S01:08000CE0:  00
               S01:08000CE1:  00
               S01:08000CE2:  00
               S01:08000CE3:  7C
               S01:08000CE4:  C0
               S01:08000CE5:  7C
               S01:08000CE6:  06
               S01:08000CE7:  FC
F02:0198       	.BYTE 0x00,0x18,0x18,0x7E,0x18,0x18,0x18,0x18	;83 - t
               S01:08000CE8:  00
               S01:08000CE9:  18
               S01:08000CEA:  18
               S01:08000CEB:  7E
               S01:08000CEC:  18
               S01:08000CED:  18
               S01:08000CEE:  18
               S01:08000CEF:  18
F02:0199       	.BYTE 0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0x7E	;84 - u
               S01:08000CF0:  00
               S01:08000CF1:  00
               S01:08000CF2:  00
               S01:08000CF3:  C6
               S01:08000CF4:  C6
               S01:08000CF5:  C6
               S01:08000CF6:  C6
               S01:08000CF7:  7E
F02:0200       	.BYTE 0x00,0x00,0x00,0x66,0x66,0x66,0x3C,0x18	;85 - v
               S01:08000CF8:  00
               S01:08000CF9:  00
               S01:08000CFA:  00
               S01:08000CFB:  66
               S01:08000CFC:  66
               S01:08000CFD:  66
               S01:08000CFE:  3C
               S01:08000CFF:  18
F02:0201       	.BYTE 0x00,0x00,0x00,0xD6,0xD6,0xD6,0xD6,0x6C	;86 - w
               S01:08000D00:  00
               S01:08000D01:  00
               S01:08000D02:  00
               S01:08000D03:  D6
               S01:08000D04:  D6
               S01:08000D05:  D6
               S01:08000D06:  D6
               S01:08000D07:  6C
F02:0202       	.BYTE 0x00,0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6	;87 - x
               S01:08000D08:  00
               S01:08000D09:  00
               S01:08000D0A:  00
               S01:08000D0B:  C6
               S01:08000D0C:  6C
               S01:08000D0D:  38
               S01:08000D0E:  6C
               S01:08000D0F:  C6
F02:0203       	.BYTE 0x00,0x00,0xC6,0xC6,0xC6,0x7E,0x06,0x7C	;88 - y
               S01:08000D10:  00
               S01:08000D11:  00
               S01:08000D12:  C6
               S01:08000D13:  C6
               S01:08000D14:  C6
               S01:08000D15:  7E
               S01:08000D16:  06
               S01:08000D17:  7C
F02:0204       	.BYTE 0x00,0x00,0x00,0xFE,0x1C,0x38,0x70,0xFE	;89 - z
               S01:08000D18:  00
               S01:08000D19:  00
               S01:08000D1A:  00
               S01:08000D1B:  FE
               S01:08000D1C:  1C
               S01:08000D1D:  38
               S01:08000D1E:  70
               S01:08000D1F:  FE
F02:0205       	.BYTE 0x00,0x0C,0x18,0x18,0x30,0x18,0x18,0x0C	;90 - {
               S01:08000D20:  00
               S01:08000D21:  0C
               S01:08000D22:  18
               S01:08000D23:  18
               S01:08000D24:  30
               S01:08000D25:  18
               S01:08000D26:  18
               S01:08000D27:  0C
F02:0206       	.BYTE 0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18	;91 - |
               S01:08000D28:  00
               S01:08000D29:  18
               S01:08000D2A:  18
               S01:08000D2B:  18
               S01:08000D2C:  18
               S01:08000D2D:  18
               S01:08000D2E:  18
               S01:08000D2F:  18
F02:0207       	.BYTE 0x00,0x30,0x18,0x18,0x0C,0x18,0x18,0x30	;92 - }
               S01:08000D30:  00
               S01:08000D31:  30
               S01:08000D32:  18
               S01:08000D33:  18
               S01:08000D34:  0C
               S01:08000D35:  18
               S01:08000D36:  18
               S01:08000D37:  30
F02:0208       	.BYTE 0x00,0x00,0x70,0xBA,0x1C,0x00,0x00,0x00	;93 - ~
               S01:08000D38:  00
               S01:08000D39:  00
               S01:08000D3A:  70
               S01:08000D3B:  BA
               S01:08000D3C:  1C
               S01:08000D3D:  00
               S01:08000D3E:  00
               S01:08000D3F:  00
F02:0209       	;.BYTE 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
F00:0799       .INCLUDE "GBA_Math.asm"
F04:0001       ;r1 = dividend
F04:0002       ;r2 = divisor
F04:0003       ;Don't bother saving r2, not changed
F04:0004       MOD:
F04:0005       	ADD r1, r1, r2	;Gives the result of flipping bits from r2 in r1
               S01:08000D40:  02 10 81 E0
F04:0006       	AND r0, r1, r2	;Thus, AND will give us the bits that represent the remainder
               S01:08000D44:  02 00 01 E0
F04:0007       	SUB r1, r1, r2	;Reset r1 to original value
               S01:08000D48:  02 10 41 E0
F04:0008       	
F04:0009       	MOV pc, lr
               S01:08000D4C:  0E F0 A0 E1
F04:0010       
F04:0011       ;http://www.tofla.iconbar.com/tofla/arm/arm02/index.htm
F04:0012       ;r1 = dividend
F04:0013       ;r2 = divisor
F04:0014       DIV:
F04:0015       STMFD sp!, {r1-r4, lr}
               S01:08000D50:  1E 40 2D E9
F04:0016       	;divide by 0 check
F04:0017       	CMP r2, #0
               S01:08000D54:  00 00 52 E3
F04:0018       	BEQ DIV_End
               S01:08000D58:  0B 00 00 0A
F04:0019       	
F04:0020       	EOR r0, r0, r0
               S01:08000D5C:  00 00 20 E0
F04:0021       	MOV r3, #1	;set bit 0, will be shifted left and right
               S01:08000D60:  01 30 A0 E3
F04:0022       	
F04:0023       	;Bitshift both left until divisor is almost greater than dividend
F04:0024       	DIV_Start:
F04:0025       		CMP r2, r1
               S01:08000D64:  01 00 52 E1
F04:0026       		MOVLS r2, r2, LSL#1	;r2 will set the corresponding bit in r3 for every time subtraction succeeds
               S01:08000D68:  82 20 A0 91
F04:0027       		MOVLS r3, r3, LSL#1	;Bitshift r3 left to see the limit of the flag, how far r2 must go
               S01:08000D6C:  83 30 A0 91
F04:0028       	BLS DIV_Start
               S01:08000D70:  FB FF FF 9A
F04:0029       	
F04:0030       	DIV_Next:
F04:0031       		CMP r1, r2	;Check if another subtraction can be made, carry flag set if (r1 > r2)
               S01:08000D74:  02 00 51 E1
F04:0032       		SUBCS r1, r1, r2	;Subtract if carry flag is set in result
               S01:08000D78:  02 10 41 20
F04:0033       		ADDCS r0, r0, r3	;Add current bit in r3 to accumulator, r0
               S01:08000D7C:  03 00 80 20
F04:0034       		
F04:0035       		MOVS r3, r3, LSR#1	;Shift r3 into carry flag
               S01:08000D80:  A3 30 B0 E1
F04:0036       		MOVCC r2, r2, LSR#1	;if bit 0 of r3 is o, shift r2 right (carry clear)
               S01:08000D84:  A2 20 A0 31
F04:0037       	
F04:0038       		BCC DIV_Next	;Loop while carry is clear, carry is not clear when r1 < r2 and subtraction yields our result
               S01:08000D88:  F9 FF FF 3A
F04:0039       		
F04:0040       	DIV_End:
F04:0041       LDMFD sp!, {r1-r4, pc}
               S01:08000D8C:  1E 80 BD E8
F00:0800       
F00:0801       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0802       
F00:0803       ;-BBBBBGGGGGRRRRR
F00:0804       ColorPalette:
F00:0805       	.WORD 0b0000000000000000; ;0  %-BBBBBGGGGGRRRRR
               S01:08000D90:  00 00
F00:0806           .WORD 0b0000000000010000; ;1  %-BBBBBGGGGGRRRRR
               S01:08000D92:  10 00
F00:0807           .WORD 0b0000001000000000; ;2  %-BBBBBGGGGGRRRRR
               S01:08000D94:  00 02
F00:0808           .WORD 0b0000001000010000; ;3  %-BBBBBGGGGGRRRRR
               S01:08000D96:  10 02
F00:0809           .WORD 0b0100000000000000; ;4  %-BBBBBGGGGGRRRRR
               S01:08000D98:  00 40
F00:0810           .WORD 0b0100000000010000; ;5  %-BBBBBGGGGGRRRRR
               S01:08000D9A:  10 40
F00:0811           .WORD 0b0100001000000000; ;6  %-BBBBBGGGGGRRRRR
               S01:08000D9C:  00 42
F00:0812           .WORD 0b0110001100011000; ;7  %-BBBBBGGGGGRRRRR
               S01:08000D9E:  18 63
F00:0813           .WORD 0b0100001000010000; ;8  %-BBBBBGGGGGRRRRR
               S01:08000DA0:  10 42
F00:0814           .WORD 0b0000000000011111; ;9  %-BBBBBGGGGGRRRRR
               S01:08000DA2:  1F 00
F00:0815           .WORD 0b0000001111100000; ;10  %-BBBBBGGGGGRRRRR
               S01:08000DA4:  E0 03
F00:0816           .WORD 0b0000001111111111; ;11  %-BBBBBGGGGGRRRRR
               S01:08000DA6:  FF 03
F00:0817           .WORD 0b0111110000000000; ;12  %-BBBBBGGGGGRRRRR
               S01:08000DA8:  00 7C
F00:0818           .WORD 0b0111110000011111; ;13  %-BBBBBGGGGGRRRRR
               S01:08000DAA:  1F 7C
F00:0819           .WORD 0b0111111111100000; ;14  %-BBBBBGGGGGRRRRR
               S01:08000DAC:  E0 7F
F00:0820           .WORD 0b0111111111111111; ;15  %-BBBBBGGGGGRRRRR
               S01:08000DAE:  FF 7F
F00:0821       
F00:0822       	
F00:0823       TilemapFiles:
F00:0824       	.INCBIN "\Tilemaps\GameTilemap.RAW"
               S01:08000DB0:  AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA
               S01:08000DC0:  AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA
F00:0825       TilemapFiles_END:;Points to memory at end of files so we can get their size
F00:0826       
F00:0827       SpriteFiles:
F00:0828       	.INCBIN "\Tilemaps\CharacterSpriteTilemap.RAW"
               S01:080015B0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S01:080015C0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:0829       SpriteFiles_END:
F00:0830       
F00:0831       .EQU PlayerSpriteNum, 0x01	;Sprite number of player
F00:0832       .EQU PlayerTileStart, 1 ;Index of first sprite tile
F00:0833       
F00:0834       ;Indexes where the 4 tiles lie in the tilemap for each frame
F00:0835       Anim_PlayerIdle:	
F00:0836       	.BYTE 0, 4, 8, 4	;Loop through the 3 idle frames
               S01:080033B0:  00
               S01:080033B1:  04
               S01:080033B2:  08
               S01:080033B3:  04
F00:0837       Anim_PlayerIdle_END:
F00:0838       	
F00:0839       .EQU BackgroundCollideLimit, 18	;Colliding tiles start at this index
F00:0840       .EQU TileLength, 8	;Tiles are 8x8 pixels
F00:0841       .EQU TilemapWidth, 32
F00:0842       .EQU TilemapHeight, 32
F00:0843       ;Screen is 240x160 pixels, 32x32 tiles in background, tiles are 8x8, screen shows 30x20 tiles-worth of pixels at a time
F00:0844       Tilemap:
F00:0845       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,25,24,2 ,0 ,0 ,1 ,0 ,12,3 ,3 ,15,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0
               S01:080033B4:  00
               S01:080033B5:  00
               S01:080033B6:  00
               S01:080033B7:  00
               S01:080033B8:  00
               S01:080033B9:  00
               S01:080033BA:  19
               S01:080033BB:  18
               S01:080033BC:  02
               S01:080033BD:  00
               S01:080033BE:  00
               S01:080033BF:  01
               S01:080033C0:  00
               S01:080033C1:  0C
               S01:080033C2:  03
               S01:080033C3:  03
               S01:080033C4:  0F
               S01:080033C5:  00
               S01:080033C6:  02
               S01:080033C7:  00
               S01:080033C8:  00
               S01:080033C9:  00
               S01:080033CA:  02
               S01:080033CB:  00
               S01:080033CC:  00
               S01:080033CD:  00
               S01:080033CE:  01
               S01:080033CF:  00
               S01:080033D0:  01
               S01:080033D1:  00
               S01:080033D2:  00
               S01:080033D3:  00
F00:0846       	.BYTE 0 ,2 ,0 ,1 ,2 ,0 ,25,24,1 ,2 ,0 ,0 ,0 ,12,3 ,3 ,15,1 ,0 ,0 ,0 ,2 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0
               S01:080033D4:  00
               S01:080033D5:  02
               S01:080033D6:  00
               S01:080033D7:  01
               S01:080033D8:  02
               S01:080033D9:  00
               S01:080033DA:  19
               S01:080033DB:  18
               S01:080033DC:  01
               S01:080033DD:  02
               S01:080033DE:  00
               S01:080033DF:  00
               S01:080033E0:  00
               S01:080033E1:  0C
               S01:080033E2:  03
               S01:080033E3:  03
               S01:080033E4:  0F
               S01:080033E5:  01
               S01:080033E6:  00
               S01:080033E7:  00
               S01:080033E8:  00
               S01:080033E9:  02
               S01:080033EA:  00
               S01:080033EB:  01
               S01:080033EC:  00
               S01:080033ED:  00
               S01:080033EE:  02
               S01:080033EF:  00
               S01:080033F0:  00
               S01:080033F1:  00
               S01:080033F2:  01
               S01:080033F3:  00
F00:0847       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,25,24,2 ,0 ,0 ,0 ,0 ,12,3 ,3 ,15,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2
               S01:080033F4:  00
               S01:080033F5:  00
               S01:080033F6:  00
               S01:080033F7:  00
               S01:080033F8:  00
               S01:080033F9:  00
               S01:080033FA:  19
               S01:080033FB:  18
               S01:080033FC:  02
               S01:080033FD:  00
               S01:080033FE:  00
               S01:080033FF:  00
               S01:08003400:  00
               S01:08003401:  0C
               S01:08003402:  03
               S01:08003403:  03
               S01:08003404:  0F
               S01:08003405:  00
               S01:08003406:  02
               S01:08003407:  00
               S01:08003408:  00
               S01:08003409:  00
               S01:0800340A:  00
               S01:0800340B:  00
               S01:0800340C:  00
               S01:0800340D:  00
               S01:0800340E:  00
               S01:0800340F:  00
               S01:08003410:  00
               S01:08003411:  00
               S01:08003412:  00
               S01:08003413:  02
F00:0848       	.BYTE 0 ,0 ,0 ,2 ,0 ,0 ,25,24,0 ,0 ,1 ,14,14,8 ,3 ,3 ,11,14,14,14,14,0 ,0 ,2 ,0 ,0 ,2 ,1 ,0 ,1 ,0 ,0
               S01:08003414:  00
               S01:08003415:  00
               S01:08003416:  00
               S01:08003417:  02
               S01:08003418:  00
               S01:08003419:  00
               S01:0800341A:  19
               S01:0800341B:  18
               S01:0800341C:  00
               S01:0800341D:  00
               S01:0800341E:  01
               S01:0800341F:  0E
               S01:08003420:  0E
               S01:08003421:  08
               S01:08003422:  03
               S01:08003423:  03
               S01:08003424:  0B
               S01:08003425:  0E
               S01:08003426:  0E
               S01:08003427:  0E
               S01:08003428:  0E
               S01:08003429:  00
               S01:0800342A:  00
               S01:0800342B:  02
               S01:0800342C:  00
               S01:0800342D:  00
               S01:0800342E:  02
               S01:0800342F:  01
               S01:08003430:  00
               S01:08003431:  01
               S01:08003432:  00
               S01:08003433:  00
F00:0849       	.BYTE 0 ,1 ,0 ,0 ,2 ,0 ,25,24,0 ,0 ,12,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,15,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0
               S01:08003434:  00
               S01:08003435:  01
               S01:08003436:  00
               S01:08003437:  00
               S01:08003438:  02
               S01:08003439:  00
               S01:0800343A:  19
               S01:0800343B:  18
               S01:0800343C:  00
               S01:0800343D:  00
               S01:0800343E:  0C
               S01:0800343F:  03
               S01:08003440:  03
               S01:08003441:  03
               S01:08003442:  03
               S01:08003443:  03
               S01:08003444:  03
               S01:08003445:  03
               S01:08003446:  03
               S01:08003447:  03
               S01:08003448:  03
               S01:08003449:  0F
               S01:0800344A:  02
               S01:0800344B:  00
               S01:0800344C:  00
               S01:0800344D:  00
               S01:0800344E:  00
               S01:0800344F:  01
               S01:08003450:  00
               S01:08003451:  00
               S01:08003452:  00
               S01:08003453:  00
F00:0850       	.BYTE 0 ,1 ,0 ,0 ,2 ,0 ,25,24,0 ,0 ,12,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,15,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0
               S01:08003454:  00
               S01:08003455:  01
               S01:08003456:  00
               S01:08003457:  00
               S01:08003458:  02
               S01:08003459:  00
               S01:0800345A:  19
               S01:0800345B:  18
               S01:0800345C:  00
               S01:0800345D:  00
               S01:0800345E:  0C
               S01:0800345F:  03
               S01:08003460:  03
               S01:08003461:  03
               S01:08003462:  03
               S01:08003463:  03
               S01:08003464:  03
               S01:08003465:  03
               S01:08003466:  03
               S01:08003467:  03
               S01:08003468:  03
               S01:08003469:  0F
               S01:0800346A:  02
               S01:0800346B:  00
               S01:0800346C:  00
               S01:0800346D:  00
               S01:0800346E:  00
               S01:0800346F:  01
               S01:08003470:  00
               S01:08003471:  00
               S01:08003472:  00
               S01:08003473:  00
F00:0851       	.BYTE 21,21,16,16,16,21,30,24,2 ,0 ,12,3 ,3 ,10,13,13,13,13,9 ,3 ,3 ,15,0 ,2 ,0 ,1 ,2 ,0 ,0 ,0 ,2 ,0
               S01:08003474:  15
               S01:08003475:  15
               S01:08003476:  10
               S01:08003477:  10
               S01:08003478:  10
               S01:08003479:  15
               S01:0800347A:  1E
               S01:0800347B:  18
               S01:0800347C:  02
               S01:0800347D:  00
               S01:0800347E:  0C
               S01:0800347F:  03
               S01:08003480:  03
               S01:08003481:  0A
               S01:08003482:  0D
               S01:08003483:  0D
               S01:08003484:  0D
               S01:08003485:  0D
               S01:08003486:  09
               S01:08003487:  03
               S01:08003488:  03
               S01:08003489:  0F
               S01:0800348A:  00
               S01:0800348B:  02
               S01:0800348C:  00
               S01:0800348D:  01
               S01:0800348E:  02
               S01:0800348F:  00
               S01:08003490:  00
               S01:08003491:  00
               S01:08003492:  02
               S01:08003493:  00
F00:0852       	.BYTE 32,32,16,16,16,32,32,24,0 ,0 ,12,3 ,3 ,15,0 ,2 ,0 ,1 ,12,3 ,3 ,15,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,1 ,0
               S01:08003494:  20
               S01:08003495:  20
               S01:08003496:  10
               S01:08003497:  10
               S01:08003498:  10
               S01:08003499:  20
               S01:0800349A:  20
               S01:0800349B:  18
               S01:0800349C:  00
               S01:0800349D:  00
               S01:0800349E:  0C
               S01:0800349F:  03
               S01:080034A0:  03
               S01:080034A1:  0F
               S01:080034A2:  00
               S01:080034A3:  02
               S01:080034A4:  00
               S01:080034A5:  01
               S01:080034A6:  0C
               S01:080034A7:  03
               S01:080034A8:  03
               S01:080034A9:  0F
               S01:080034AA:  00
               S01:080034AB:  00
               S01:080034AC:  00
               S01:080034AD:  00
               S01:080034AE:  00
               S01:080034AF:  02
               S01:080034B0:  00
               S01:080034B1:  00
               S01:080034B2:  01
               S01:080034B3:  00
F00:0853       	.BYTE 20,27,16,16,16,26,20,27,1 ,2 ,12,3 ,3 ,15,0 ,0 ,0 ,0 ,12,3 ,3 ,15,0 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,2
               S01:080034B4:  14
               S01:080034B5:  1B
               S01:080034B6:  10
               S01:080034B7:  10
               S01:080034B8:  10
               S01:080034B9:  1A
               S01:080034BA:  14
               S01:080034BB:  1B
               S01:080034BC:  01
               S01:080034BD:  02
               S01:080034BE:  0C
               S01:080034BF:  03
               S01:080034C0:  03
               S01:080034C1:  0F
               S01:080034C2:  00
               S01:080034C3:  00
               S01:080034C4:  00
               S01:080034C5:  00
               S01:080034C6:  0C
               S01:080034C7:  03
               S01:080034C8:  03
               S01:080034C9:  0F
               S01:080034CA:  00
               S01:080034CB:  01
               S01:080034CC:  02
               S01:080034CD:  00
               S01:080034CE:  00
               S01:080034CF:  00
               S01:080034D0:  00
               S01:080034D1:  00
               S01:080034D2:  00
               S01:080034D3:  02
F00:0854       	.BYTE 0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,12,3 ,3 ,15,0 ,0 ,0 ,0 ,12,3 ,3 ,15,0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0
               S01:080034D4:  00
               S01:080034D5:  00
               S01:080034D6:  00
               S01:080034D7:  02
               S01:080034D8:  00
               S01:080034D9:  00
               S01:080034DA:  00
               S01:080034DB:  00
               S01:080034DC:  00
               S01:080034DD:  00
               S01:080034DE:  0C
               S01:080034DF:  03
               S01:080034E0:  03
               S01:080034E1:  0F
               S01:080034E2:  00
               S01:080034E3:  00
               S01:080034E4:  00
               S01:080034E5:  00
               S01:080034E6:  0C
               S01:080034E7:  03
               S01:080034E8:  03
               S01:080034E9:  0F
               S01:080034EA:  00
               S01:080034EB:  00
               S01:080034EC:  00
               S01:080034ED:  00
               S01:080034EE:  00
               S01:080034EF:  01
               S01:080034F0:  00
               S01:080034F1:  02
               S01:080034F2:  00
               S01:080034F3:  00
F00:0855       	.BYTE 0 ,1 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,12,3 ,3 ,15,0 ,1 ,0 ,0 ,12,3 ,3 ,15,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0
               S01:080034F4:  00
               S01:080034F5:  01
               S01:080034F6:  00
               S01:080034F7:  00
               S01:080034F8:  00
               S01:080034F9:  01
               S01:080034FA:  00
               S01:080034FB:  02
               S01:080034FC:  00
               S01:080034FD:  00
               S01:080034FE:  0C
               S01:080034FF:  03
               S01:08003500:  03
               S01:08003501:  0F
               S01:08003502:  00
               S01:08003503:  01
               S01:08003504:  00
               S01:08003505:  00
               S01:08003506:  0C
               S01:08003507:  03
               S01:08003508:  03
               S01:08003509:  0F
               S01:0800350A:  02
               S01:0800350B:  00
               S01:0800350C:  00
               S01:0800350D:  00
               S01:0800350E:  02
               S01:0800350F:  00
               S01:08003510:  00
               S01:08003511:  00
               S01:08003512:  00
               S01:08003513:  00
F00:0856       	.BYTE 0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,12,3 ,3 ,11,14,14,14,14,8 ,3 ,3 ,15,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2
               S01:08003514:  00
               S01:08003515:  00
               S01:08003516:  00
               S01:08003517:  01
               S01:08003518:  00
               S01:08003519:  00
               S01:0800351A:  00
               S01:0800351B:  00
               S01:0800351C:  01
               S01:0800351D:  00
               S01:0800351E:  0C
               S01:0800351F:  03
               S01:08003520:  03
               S01:08003521:  0B
               S01:08003522:  0E
               S01:08003523:  0E
               S01:08003524:  0E
               S01:08003525:  0E
               S01:08003526:  08
               S01:08003527:  03
               S01:08003528:  03
               S01:08003529:  0F
               S01:0800352A:  00
               S01:0800352B:  00
               S01:0800352C:  00
               S01:0800352D:  02
               S01:0800352E:  00
               S01:0800352F:  00
               S01:08003530:  00
               S01:08003531:  00
               S01:08003532:  00
               S01:08003533:  02
F00:0857       	.BYTE 0 ,2 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,12,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,15,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0
               S01:08003534:  00
               S01:08003535:  02
               S01:08003536:  00
               S01:08003537:  00
               S01:08003538:  02
               S01:08003539:  00
               S01:0800353A:  00
               S01:0800353B:  00
               S01:0800353C:  02
               S01:0800353D:  00
               S01:0800353E:  0C
               S01:0800353F:  03
               S01:08003540:  03
               S01:08003541:  03
               S01:08003542:  03
               S01:08003543:  03
               S01:08003544:  03
               S01:08003545:  03
               S01:08003546:  03
               S01:08003547:  03
               S01:08003548:  03
               S01:08003549:  0F
               S01:0800354A:  00
               S01:0800354B:  02
               S01:0800354C:  00
               S01:0800354D:  00
               S01:0800354E:  00
               S01:0800354F:  00
               S01:08003550:  02
               S01:08003551:  00
               S01:08003552:  00
               S01:08003553:  00
F00:0858       	.BYTE 0 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,0 ,12,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,15,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0
               S01:08003554:  00
               S01:08003555:  01
               S01:08003556:  00
               S01:08003557:  00
               S01:08003558:  02
               S01:08003559:  00
               S01:0800355A:  00
               S01:0800355B:  01
               S01:0800355C:  00
               S01:0800355D:  00
               S01:0800355E:  0C
               S01:0800355F:  03
               S01:08003560:  03
               S01:08003561:  03
               S01:08003562:  03
               S01:08003563:  03
               S01:08003564:  03
               S01:08003565:  03
               S01:08003566:  03
               S01:08003567:  03
               S01:08003568:  03
               S01:08003569:  0F
               S01:0800356A:  02
               S01:0800356B:  00
               S01:0800356C:  00
               S01:0800356D:  00
               S01:0800356E:  00
               S01:0800356F:  01
               S01:08003570:  00
               S01:08003571:  00
               S01:08003572:  00
               S01:08003573:  00
F00:0859       	.BYTE 0 ,0 ,1 ,2 ,0 ,0 ,1 ,2 ,0 ,0 ,0 ,13,13,13,13,13,13,13,13,13,13,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0
               S01:08003574:  00
               S01:08003575:  00
               S01:08003576:  01
               S01:08003577:  02
               S01:08003578:  00
               S01:08003579:  00
               S01:0800357A:  01
               S01:0800357B:  02
               S01:0800357C:  00
               S01:0800357D:  00
               S01:0800357E:  00
               S01:0800357F:  0D
               S01:08003580:  0D
               S01:08003581:  0D
               S01:08003582:  0D
               S01:08003583:  0D
               S01:08003584:  0D
               S01:08003585:  0D
               S01:08003586:  0D
               S01:08003587:  0D
               S01:08003588:  0D
               S01:08003589:  00
               S01:0800358A:  01
               S01:0800358B:  00
               S01:0800358C:  00
               S01:0800358D:  00
               S01:0800358E:  01
               S01:0800358F:  00
               S01:08003590:  00
               S01:08003591:  00
               S01:08003592:  00
               S01:08003593:  00
F00:0860       	.BYTE 0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,1 ,2 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,2
               S01:08003594:  00
               S01:08003595:  00
               S01:08003596:  00
               S01:08003597:  00
               S01:08003598:  00
               S01:08003599:  02
               S01:0800359A:  00
               S01:0800359B:  00
               S01:0800359C:  00
               S01:0800359D:  02
               S01:0800359E:  00
               S01:0800359F:  00
               S01:080035A0:  00
               S01:080035A1:  00
               S01:080035A2:  00
               S01:080035A3:  01
               S01:080035A4:  02
               S01:080035A5:  00
               S01:080035A6:  01
               S01:080035A7:  00
               S01:080035A8:  02
               S01:080035A9:  00
               S01:080035AA:  00
               S01:080035AB:  00
               S01:080035AC:  00
               S01:080035AD:  02
               S01:080035AE:  00
               S01:080035AF:  00
               S01:080035B0:  00
               S01:080035B1:  02
               S01:080035B2:  00
               S01:080035B3:  02
F00:0861       	.BYTE 1 ,0 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0
               S01:080035B4:  01
               S01:080035B5:  00
               S01:080035B6:  01
               S01:080035B7:  02
               S01:080035B8:  00
               S01:080035B9:  00
               S01:080035BA:  00
               S01:080035BB:  00
               S01:080035BC:  00
               S01:080035BD:  01
               S01:080035BE:  00
               S01:080035BF:  00
               S01:080035C0:  00
               S01:080035C1:  02
               S01:080035C2:  00
               S01:080035C3:  00
               S01:080035C4:  00
               S01:080035C5:  00
               S01:080035C6:  02
               S01:080035C7:  00
               S01:080035C8:  00
               S01:080035C9:  00
               S01:080035CA:  00
               S01:080035CB:  00
               S01:080035CC:  00
               S01:080035CD:  01
               S01:080035CE:  00
               S01:080035CF:  02
               S01:080035D0:  00
               S01:080035D1:  00
               S01:080035D2:  00
               S01:080035D3:  00
F00:0862       	.BYTE 0 ,0 ,2 ,0 ,0 ,2 ,1 ,2 ,0 ,0 ,2 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0
               S01:080035D4:  00
               S01:080035D5:  00
               S01:080035D6:  02
               S01:080035D7:  00
               S01:080035D8:  00
               S01:080035D9:  02
               S01:080035DA:  01
               S01:080035DB:  02
               S01:080035DC:  00
               S01:080035DD:  00
               S01:080035DE:  02
               S01:080035DF:  00
               S01:080035E0:  01
               S01:080035E1:  00
               S01:080035E2:  00
               S01:080035E3:  02
               S01:080035E4:  00
               S01:080035E5:  00
               S01:080035E6:  01
               S01:080035E7:  00
               S01:080035E8:  02
               S01:080035E9:  00
               S01:080035EA:  00
               S01:080035EB:  00
               S01:080035EC:  00
               S01:080035ED:  00
               S01:080035EE:  00
               S01:080035EF:  00
               S01:080035F0:  01
               S01:080035F1:  00
               S01:080035F2:  00
               S01:080035F3:  00
F00:0863       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,1 ,0
               S01:080035F4:  00
               S01:080035F5:  00
               S01:080035F6:  00
               S01:080035F7:  00
               S01:080035F8:  00
               S01:080035F9:  00
               S01:080035FA:  00
               S01:080035FB:  00
               S01:080035FC:  00
               S01:080035FD:  00
               S01:080035FE:  00
               S01:080035FF:  00
               S01:08003600:  00
               S01:08003601:  00
               S01:08003602:  00
               S01:08003603:  00
               S01:08003604:  00
               S01:08003605:  00
               S01:08003606:  00
               S01:08003607:  00
               S01:08003608:  00
               S01:08003609:  00
               S01:0800360A:  01
               S01:0800360B:  00
               S01:0800360C:  02
               S01:0800360D:  00
               S01:0800360E:  00
               S01:0800360F:  00
               S01:08003610:  00
               S01:08003611:  00
               S01:08003612:  01
               S01:08003613:  00
F00:0864       	.BYTE 0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0
               S01:08003614:  00
               S01:08003615:  00
               S01:08003616:  02
               S01:08003617:  00
               S01:08003618:  00
               S01:08003619:  00
               S01:0800361A:  02
               S01:0800361B:  00
               S01:0800361C:  00
               S01:0800361D:  00
               S01:0800361E:  00
               S01:0800361F:  02
               S01:08003620:  00
               S01:08003621:  00
               S01:08003622:  00
               S01:08003623:  00
               S01:08003624:  00
               S01:08003625:  02
               S01:08003626:  00
               S01:08003627:  00
               S01:08003628:  00
               S01:08003629:  00
               S01:0800362A:  02
               S01:0800362B:  00
               S01:0800362C:  00
               S01:0800362D:  00
               S01:0800362E:  02
               S01:0800362F:  00
               S01:08003630:  00
               S01:08003631:  00
               S01:08003632:  00
               S01:08003633:  00
F00:0865       	.BYTE 0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,0
               S01:08003634:  00
               S01:08003635:  00
               S01:08003636:  00
               S01:08003637:  00
               S01:08003638:  02
               S01:08003639:  00
               S01:0800363A:  00
               S01:0800363B:  00
               S01:0800363C:  00
               S01:0800363D:  01
               S01:0800363E:  00
               S01:0800363F:  00
               S01:08003640:  00
               S01:08003641:  00
               S01:08003642:  01
               S01:08003643:  00
               S01:08003644:  00
               S01:08003645:  00
               S01:08003646:  00
               S01:08003647:  02
               S01:08003648:  00
               S01:08003649:  00
               S01:0800364A:  00
               S01:0800364B:  00
               S01:0800364C:  01
               S01:0800364D:  00
               S01:0800364E:  00
               S01:0800364F:  01
               S01:08003650:  00
               S01:08003651:  00
               S01:08003652:  00
               S01:08003653:  00
F00:0866       	.BYTE 0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2
               S01:08003654:  00
               S01:08003655:  00
               S01:08003656:  01
               S01:08003657:  00
               S01:08003658:  00
               S01:08003659:  00
               S01:0800365A:  00
               S01:0800365B:  00
               S01:0800365C:  00
               S01:0800365D:  00
               S01:0800365E:  00
               S01:0800365F:  00
               S01:08003660:  00
               S01:08003661:  00
               S01:08003662:  00
               S01:08003663:  00
               S01:08003664:  00
               S01:08003665:  00
               S01:08003666:  01
               S01:08003667:  00
               S01:08003668:  00
               S01:08003669:  00
               S01:0800366A:  00
               S01:0800366B:  00
               S01:0800366C:  00
               S01:0800366D:  02
               S01:0800366E:  00
               S01:0800366F:  00
               S01:08003670:  00
               S01:08003671:  00
               S01:08003672:  00
               S01:08003673:  02
F00:0867       	.BYTE 0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,1 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0
               S01:08003674:  00
               S01:08003675:  00
               S01:08003676:  02
               S01:08003677:  00
               S01:08003678:  00
               S01:08003679:  00
               S01:0800367A:  00
               S01:0800367B:  02
               S01:0800367C:  00
               S01:0800367D:  00
               S01:0800367E:  00
               S01:0800367F:  01
               S01:08003680:  00
               S01:08003681:  00
               S01:08003682:  00
               S01:08003683:  00
               S01:08003684:  02
               S01:08003685:  00
               S01:08003686:  00
               S01:08003687:  00
               S01:08003688:  00
               S01:08003689:  02
               S01:0800368A:  00
               S01:0800368B:  01
               S01:0800368C:  00
               S01:0800368D:  00
               S01:0800368E:  00
               S01:0800368F:  00
               S01:08003690:  02
               S01:08003691:  00
               S01:08003692:  00
               S01:08003693:  00
F00:0868       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,1 ,0 ,0 ,0
               S01:08003694:  00
               S01:08003695:  00
               S01:08003696:  00
               S01:08003697:  00
               S01:08003698:  00
               S01:08003699:  00
               S01:0800369A:  01
               S01:0800369B:  00
               S01:0800369C:  00
               S01:0800369D:  02
               S01:0800369E:  00
               S01:0800369F:  00
               S01:080036A0:  00
               S01:080036A1:  02
               S01:080036A2:  00
               S01:080036A3:  00
               S01:080036A4:  00
               S01:080036A5:  00
               S01:080036A6:  00
               S01:080036A7:  00
               S01:080036A8:  00
               S01:080036A9:  00
               S01:080036AA:  02
               S01:080036AB:  00
               S01:080036AC:  00
               S01:080036AD:  00
               S01:080036AE:  02
               S01:080036AF:  00
               S01:080036B0:  01
               S01:080036B1:  00
               S01:080036B2:  00
               S01:080036B3:  00
F00:0869       	.BYTE 0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2 ,0
               S01:080036B4:  00
               S01:080036B5:  00
               S01:080036B6:  01
               S01:080036B7:  00
               S01:080036B8:  00
               S01:080036B9:  00
               S01:080036BA:  00
               S01:080036BB:  00
               S01:080036BC:  00
               S01:080036BD:  00
               S01:080036BE:  00
               S01:080036BF:  01
               S01:080036C0:  00
               S01:080036C1:  00
               S01:080036C2:  00
               S01:080036C3:  00
               S01:080036C4:  01
               S01:080036C5:  00
               S01:080036C6:  02
               S01:080036C7:  00
               S01:080036C8:  00
               S01:080036C9:  01
               S01:080036CA:  00
               S01:080036CB:  00
               S01:080036CC:  02
               S01:080036CD:  00
               S01:080036CE:  00
               S01:080036CF:  00
               S01:080036D0:  00
               S01:080036D1:  00
               S01:080036D2:  02
               S01:080036D3:  00
F00:0870       	.BYTE 0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,2 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0
               S01:080036D4:  00
               S01:080036D5:  00
               S01:080036D6:  00
               S01:080036D7:  00
               S01:080036D8:  00
               S01:080036D9:  01
               S01:080036DA:  00
               S01:080036DB:  02
               S01:080036DC:  00
               S01:080036DD:  00
               S01:080036DE:  02
               S01:080036DF:  00
               S01:080036E0:  02
               S01:080036E1:  00
               S01:080036E2:  00
               S01:080036E3:  00
               S01:080036E4:  00
               S01:080036E5:  00
               S01:080036E6:  00
               S01:080036E7:  01
               S01:080036E8:  00
               S01:080036E9:  00
               S01:080036EA:  00
               S01:080036EB:  00
               S01:080036EC:  00
               S01:080036ED:  01
               S01:080036EE:  00
               S01:080036EF:  00
               S01:080036F0:  00
               S01:080036F1:  01
               S01:080036F2:  00
               S01:080036F3:  00
F00:0871       	.BYTE 0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2
               S01:080036F4:  00
               S01:080036F5:  01
               S01:080036F6:  00
               S01:080036F7:  02
               S01:080036F8:  00
               S01:080036F9:  00
               S01:080036FA:  00
               S01:080036FB:  00
               S01:080036FC:  00
               S01:080036FD:  00
               S01:080036FE:  00
               S01:080036FF:  00
               S01:08003700:  00
               S01:08003701:  00
               S01:08003702:  01
               S01:08003703:  00
               S01:08003704:  02
               S01:08003705:  00
               S01:08003706:  00
               S01:08003707:  00
               S01:08003708:  01
               S01:08003709:  02
               S01:0800370A:  00
               S01:0800370B:  00
               S01:0800370C:  00
               S01:0800370D:  00
               S01:0800370E:  00
               S01:0800370F:  00
               S01:08003710:  00
               S01:08003711:  00
               S01:08003712:  00
               S01:08003713:  02
F00:0872       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,1 ,2 ,0 ,0 ,0 ,0
               S01:08003714:  00
               S01:08003715:  00
               S01:08003716:  00
               S01:08003717:  00
               S01:08003718:  00
               S01:08003719:  00
               S01:0800371A:  00
               S01:0800371B:  01
               S01:0800371C:  00
               S01:0800371D:  00
               S01:0800371E:  00
               S01:0800371F:  00
               S01:08003720:  02
               S01:08003721:  00
               S01:08003722:  00
               S01:08003723:  00
               S01:08003724:  00
               S01:08003725:  00
               S01:08003726:  02
               S01:08003727:  00
               S01:08003728:  00
               S01:08003729:  00
               S01:0800372A:  00
               S01:0800372B:  02
               S01:0800372C:  00
               S01:0800372D:  00
               S01:0800372E:  01
               S01:0800372F:  02
               S01:08003730:  00
               S01:08003731:  00
               S01:08003732:  00
               S01:08003733:  00
F00:0873       	.BYTE 0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,1
               S01:08003734:  00
               S01:08003735:  00
               S01:08003736:  00
               S01:08003737:  00
               S01:08003738:  01
               S01:08003739:  00
               S01:0800373A:  01
               S01:0800373B:  00
               S01:0800373C:  00
               S01:0800373D:  02
               S01:0800373E:  00
               S01:0800373F:  00
               S01:08003740:  01
               S01:08003741:  00
               S01:08003742:  00
               S01:08003743:  02
               S01:08003744:  00
               S01:08003745:  00
               S01:08003746:  00
               S01:08003747:  01
               S01:08003748:  00
               S01:08003749:  00
               S01:0800374A:  00
               S01:0800374B:  00
               S01:0800374C:  00
               S01:0800374D:  00
               S01:0800374E:  00
               S01:0800374F:  00
               S01:08003750:  01
               S01:08003751:  00
               S01:08003752:  00
               S01:08003753:  01
F00:0874       	.BYTE 0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,0
               S01:08003754:  00
               S01:08003755:  01
               S01:08003756:  00
               S01:08003757:  02
               S01:08003758:  00
               S01:08003759:  00
               S01:0800375A:  00
               S01:0800375B:  00
               S01:0800375C:  01
               S01:0800375D:  00
               S01:0800375E:  00
               S01:0800375F:  01
               S01:08003760:  00
               S01:08003761:  00
               S01:08003762:  00
               S01:08003763:  00
               S01:08003764:  00
               S01:08003765:  00
               S01:08003766:  00
               S01:08003767:  00
               S01:08003768:  00
               S01:08003769:  00
               S01:0800376A:  01
               S01:0800376B:  00
               S01:0800376C:  01
               S01:0800376D:  00
               S01:0800376E:  00
               S01:0800376F:  02
               S01:08003770:  00
               S01:08003771:  00
               S01:08003772:  00
               S01:08003773:  00
F00:0875       	.BYTE 0 ,0 ,0 ,1 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2
               S01:08003774:  00
               S01:08003775:  00
               S01:08003776:  00
               S01:08003777:  01
               S01:08003778:  00
               S01:08003779:  01
               S01:0800377A:  00
               S01:0800377B:  02
               S01:0800377C:  00
               S01:0800377D:  00
               S01:0800377E:  00
               S01:0800377F:  00
               S01:08003780:  02
               S01:08003781:  00
               S01:08003782:  00
               S01:08003783:  00
               S01:08003784:  01
               S01:08003785:  00
               S01:08003786:  00
               S01:08003787:  01
               S01:08003788:  00
               S01:08003789:  00
               S01:0800378A:  00
               S01:0800378B:  02
               S01:0800378C:  00
               S01:0800378D:  00
               S01:0800378E:  00
               S01:0800378F:  00
               S01:08003790:  00
               S01:08003791:  00
               S01:08003792:  00
               S01:08003793:  02
F00:0876       	.BYTE 0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0
               S01:08003794:  00
               S01:08003795:  00
               S01:08003796:  02
               S01:08003797:  00
               S01:08003798:  00
               S01:08003799:  00
               S01:0800379A:  02
               S01:0800379B:  00
               S01:0800379C:  00
               S01:0800379D:  02
               S01:0800379E:  00
               S01:0800379F:  00
               S01:080037A0:  00
               S01:080037A1:  00
               S01:080037A2:  00
               S01:080037A3:  02
               S01:080037A4:  00
               S01:080037A5:  00
               S01:080037A6:  00
               S01:080037A7:  00
               S01:080037A8:  00
               S01:080037A9:  00
               S01:080037AA:  00
               S01:080037AB:  00
               S01:080037AC:  00
               S01:080037AD:  02
               S01:080037AE:  00
               S01:080037AF:  00
               S01:080037B0:  00
               S01:080037B1:  02
               S01:080037B2:  00
               S01:080037B3:  00
F00:0877       Tilemap_END:
F00:0878       	
F00:0879       


Sections:
S01  seg8000000


Sources:
F00  GBA_Drummond.asm
F01  GBA_Core.asm
F02  GBA_Text.asm
F03  GBA_Core.asm
F04  GBA_Math.asm


Symbols:
TilemapHeight EXPR(32=0x20) UNUSED 
Anim_PlayerIdle_END EXPR(134230964=0x80033b4) UNUSED ABS 
DIV_Next EXPR(134221172=0x8000d74) ABS 
DIV_Start EXPR(134221156=0x8000d64) ABS 
DIV_End EXPR(134221196=0x8000d8c) ABS 
MOD EXPR(134221120=0x8000d40) UNUSED ABS 
LineDone EXPR(134220336=0x8000a30) UNUSED ABS 
DrawPixel EXPR(134220300=0x8000a0c) ABS 
WriteLine EXPR(134220280=0x80009f8) ABS 
BitmapFont EXPR(134220360=0x8000a48) ABS 
WriteChar EXPR(134220196=0x80009a4) ABS 
WriteTextDone EXPR(134220192=0x80009a0) ABS 
RepeatWriteText EXPR(134220172=0x800098c) ABS 
WriteText EXPR(134220164=0x8000984) UNUSED ABS 
NewLine EXPR(134220120=0x8000958) UNUSED ABS 
CursorY EXPR(33554465=0x2000021) 
CursorX EXPR(33554464=0x2000020) 
PlayerTileStart EXPR(1=0x1) 
PlayerSpriteNum EXPR(1=0x1) 
SpriteOAMSettings EXPR(117440512=0x7000000) 
DrawSprite EXPR(134219980=0x80008cc) ABS 
HorizontalCollision_CheckLeft EXPR(134219696=0x80007b0) UNUSED ABS 
HorizontalCollision_CheckRight EXPR(134219828=0x8000834) ABS 
HorizontalCollision_END EXPR(134219964=0x80008bc) ABS 
BackgroundCollideLimit EXPR(18=0x12) 
TilemapWidth EXPR(32=0x20) 
DIV EXPR(134221136=0x8000d50) ABS 
TileLength EXPR(8=0x8) 
VerticalCollision_CheckUp EXPR(134219384=0x8000678) UNUSED ABS 
VerticalCollision_CheckDown EXPR(134219516=0x80006fc) ABS 
VerticalCollision_END EXPR(134219652=0x8000784) ABS 
GetNextLine EXPR(134219348=0x8000654) UNUSED ABS 
LoadBytesRep EXPR(134219328=0x8000640) ABS 
LoadHalfwordsRep EXPR(134219304=0x8000628) ABS 
GetScreenPos EXPR(134219264=0x8000600) UNUSED ABS 
FillScreen EXPR(134219248=0x80005f0) ABS 
ClearToColor EXPR(134219236=0x80005e4) UNUSED ABS 
SpriteFiles_END EXPR(134230960=0x80033b0) ABS 
VramSpritePixelPatterns EXPR(100728832=0x6010000) 
SpriteFiles EXPR(134223280=0x80015b0) ABS 
SpritePaletteMemory EXPR(83886592=0x5000200) 
VramBackground EXPR(100665344=0x6000800) 
LoadBytes EXPR(134219324=0x800063c) ABS 
Tilemap_END EXPR(134231988=0x80037b4) ABS 
VramBase EXPR(100663296=0x6000000) 
Tilemap EXPR(134230964=0x80033b4) ABS 
TilemapFiles_END EXPR(134223280=0x80015b0) ABS 
VramTilemapPixelPatterns EXPR(100679680=0x6004000) 
TilemapFiles EXPR(134221232=0x8000db0) ABS 
LoadHalfwords EXPR(134219300=0x8000624) ABS 
BackgroundPaletteMemory EXPR(83886080=0x5000000) 
ColorPalette EXPR(134221200=0x8000d90) ABS 
LCDControl EXPR(67108864=0x4000000) 
SpriteTest EXPR(134218532=0x8000324) ABS 
SpriteTestAddress EXPR(134218528=0x8000320) UNUSED ABS 
AsciiTest4 EXPR(134218516=0x8000314) ABS 
AsciiTestAddress4 EXPR(134218512=0x8000310) UNUSED ABS 
AsciiTest3 EXPR(134218468=0x80002e4) ABS 
AsciiTestAddress3 EXPR(134218464=0x80002e0) UNUSED ABS 
AsciiTest2 EXPR(134218420=0x80002b4) ABS 
AsciiTestAddress2 EXPR(134218416=0x80002b0) UNUSED ABS 
AsciiTest1 EXPR(134218372=0x8000284) ABS 
AsciiTestAddress1 EXPR(134218368=0x8000280) UNUSED ABS 
DelayNextBlank EXPR(134218336=0x8000260) ABS 
ScanlineCounter EXPR(67108870=0x4000006) 
DelayNextDraw EXPR(134218308=0x8000244) ABS 
DelayFrame EXPR(134218300=0x800023c) ABS 
Render EXPR(134220016=0x80008f0) ABS 
HorizontalCollision EXPR(134219668=0x8000794) ABS 
VerticalCollision EXPR(134219356=0x800065c) ABS 
GetButton EXPR(134220084=0x8000934) ABS 
GameLoop EXPR(134218056=0x8000148) ABS 
Anim_PlayerIdle EXPR(134230960=0x80033b0) ABS 
BackgroundAndSpriteInit EXPR(134219080=0x8000548) ABS 
ScreenInit EXPR(134219044=0x8000524) ABS 
Stack EXPR(50331648=0x3000000) 
Main EXPR(134217960=0x80000e8) ABS 
PlayerAnimIndex EXPR(33554470=0x2000026) 
PlayerCurrentAnim EXPR(33554469=0x2000025) 
PlayerFace EXPR(33554468=0x2000024) 
PlayerY EXPR(33554467=0x2000023) 
PlayerX EXPR(33554466=0x2000022) 
Ram EXPR(33554432=0x2000000) 
FacingRight EXPR(3=0x3) UNUSED 
FacingUp EXPR(2=0x2) UNUSED 
FacingLeft EXPR(1=0x1) UNUSED 
FacingDown EXPR(0=0x0) 
PlayerHeight EXPR(16=0x10) 
PlayerWidth EXPR(16=0x10) 
ScreenYBound EXPR(160=0xa0) 
ScreenXBound EXPR(240=0xf0) 
BackgroundColor EXPR(49680=0xc210) UNUSED 
MaskKey EXPR(64512=0xfc00) 
Key_LeftBump EXPR(512=0x200) UNUSED 
Key_RightBump EXPR(256=0x100) UNUSED 
Key_Down EXPR(128=0x80) 
Key_Up EXPR(64=0x40) 
Key_Left EXPR(32=0x20) 
Key_Right EXPR(16=0x10) 
Key_Start EXPR(8=0x8) UNUSED 
Key_Select EXPR(4=0x4) UNUSED 
Key_B EXPR(2=0x2) UNUSED 
Key_A EXPR(1=0x1) UNUSED 
InputLocation EXPR(67109168=0x4000130) 
__VASM EXPR(0=0x0) INTERNAL 
BuildGBA EXPR(1=0x1) UNUSED 
vasm EXPR(1=0x1) UNUSED 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
