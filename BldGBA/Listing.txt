F00:0001       ;LITTLE ENDIAN
F00:0002       ;LITTLE ENDIAN
F00:0003       ;LITTLE ENDIAN
F00:0004       ;LITTLE ENDIAN
F00:0005       ;LITTLE ENDIAN
F00:0006       ;LITTLE ENDIAN
F00:0007       ;LITTLE ENDIAN
F00:0008       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0009       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0010       .EQU Ram, 0x02000000	;RAM on the GBA starts at 0x02000000, builds upwards, can store whatever we want whereever we want,
F00:0011       
F00:0012       .EQU CursorX, Ram+32	;32 bits past ram start
F00:0013       .EQU CursorY, Ram+33	;1 bit past CursorX
F00:0014       .EQU PlayerX, Ram+34	;Player's x position
F00:0015       .EQU PlayerY, Ram+35	;Player's y position
F00:0016       
F00:0017       .EQU VramBase, 0x06000000	;Base of VRAM, where address of data that is written to the screen starts
F00:0018       
F00:0019       .ORG 0x08000000	;GBA ROM (the cartridge) Address starts at 0x08000000
F00:0020       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0021       
F00:0022       .EQU InputLocation, 0x04000130	;Location in memory where input is stored
F00:0023       
F00:0024       ;OR these masks with data at input location to get input, returns 0 if pressed
F00:0025       .EQU Key_A, 			0b0000000000000001				
F00:0026       .EQU Key_B, 			0b0000000000000010
F00:0027       .EQU Key_Select, 		0b0000000000000100
F00:0028       .EQU Key_Start, 		0b0000000000001000
F00:0029       .EQU Key_Right, 		0b0000000000010000
F00:0030       .EQU Key_Left, 			0b0000000000100000
F00:0031       .EQU Key_Up, 			0b0000000001000000
F00:0032       .EQU Key_Down, 			0b0000000010000000
F00:0033       .EQU Key_RightBump, 	0b0000000100000000
F00:0034       .EQU Key_LeftBump, 		0b0000001000000000
F00:0035       
F00:0036       .EQU MaskKey, 			0b1111110000000000	;Mask out other bits
F00:0037       
F00:0038       .EQU BackgroundColor, 0b1100001000010000
F00:0039       
F00:0040       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0041       
F00:0042       B Main	;Branch to start of program
               S01:08000000:  38 00 00 EA
F00:0043       
F00:0044       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0045       ;GBA Header
F00:0046       ;004h    156   Nintendo Logo    (compressed bitmap, required!)
F00:0047       	.BYTE 0xC8,0x60,0x4F,0xE2,0x01,0x70,0x8F,0xE2,0x17,0xFF,0x2F,0xE1,0x12,0x4F,0x11,0x48     ; C
               S01:08000004:  C8
               S01:08000005:  60
               S01:08000006:  4F
               S01:08000007:  E2
               S01:08000008:  01
               S01:08000009:  70
               S01:0800000A:  8F
               S01:0800000B:  E2
               S01:0800000C:  17
               S01:0800000D:  FF
               S01:0800000E:  2F
               S01:0800000F:  E1
               S01:08000010:  12
               S01:08000011:  4F
               S01:08000012:  11
               S01:08000013:  48
F00:0048       	.BYTE 0x12,0x4C,0x20,0x60,0x64,0x60,0x7C,0x62,0x30,0x1C,0x39,0x1C,0x10,0x4A,0x00,0xF0     ; D
               S01:08000014:  12
               S01:08000015:  4C
               S01:08000016:  20
               S01:08000017:  60
               S01:08000018:  64
               S01:08000019:  60
               S01:0800001A:  7C
               S01:0800001B:  62
               S01:0800001C:  30
               S01:0800001D:  1C
               S01:0800001E:  39
               S01:0800001F:  1C
               S01:08000020:  10
               S01:08000021:  4A
               S01:08000022:  00
               S01:08000023:  F0
F00:0049           .BYTE 0x14,0xF8,0x30,0x6A,0x80,0x19,0xB1,0x6A,0xF2,0x6A,0x00,0xF0,0x0B,0xF8,0x30,0x6B     ; E
               S01:08000024:  14
               S01:08000025:  F8
               S01:08000026:  30
               S01:08000027:  6A
               S01:08000028:  80
               S01:08000029:  19
               S01:0800002A:  B1
               S01:0800002B:  6A
               S01:0800002C:  F2
               S01:0800002D:  6A
               S01:0800002E:  00
               S01:0800002F:  F0
               S01:08000030:  0B
               S01:08000031:  F8
               S01:08000032:  30
               S01:08000033:  6B
F00:0050           .BYTE 0x80,0x19,0xB1,0x6B,0xF2,0x6B,0x00,0xF0,0x08,0xF8,0x70,0x6A,0x77,0x6B,0x07,0x4C     ; F
               S01:08000034:  80
               S01:08000035:  19
               S01:08000036:  B1
               S01:08000037:  6B
               S01:08000038:  F2
               S01:08000039:  6B
               S01:0800003A:  00
               S01:0800003B:  F0
               S01:0800003C:  08
               S01:0800003D:  F8
               S01:0800003E:  70
               S01:0800003F:  6A
               S01:08000040:  77
               S01:08000041:  6B
               S01:08000042:  07
               S01:08000043:  4C
F00:0051           .BYTE 0x60,0x60,0x38,0x47,0x07,0x4B,0xD2,0x18,0x9A,0x43,0x07,0x4B,0x92,0x08,0xD2,0x18     ; 10
               S01:08000044:  60
               S01:08000045:  60
               S01:08000046:  38
               S01:08000047:  47
               S01:08000048:  07
               S01:08000049:  4B
               S01:0800004A:  D2
               S01:0800004B:  18
               S01:0800004C:  9A
               S01:0800004D:  43
               S01:0800004E:  07
               S01:0800004F:  4B
               S01:08000050:  92
               S01:08000051:  08
               S01:08000052:  D2
               S01:08000053:  18
F00:0052           .BYTE 0x0C,0xDF,0xF7,0x46,0x04,0xF0,0x1F,0xE5,0x00,0xFE,0x7F,0x02,0xF0,0xFF,0x7F,0x02     ; 11
               S01:08000054:  0C
               S01:08000055:  DF
               S01:08000056:  F7
               S01:08000057:  46
               S01:08000058:  04
               S01:08000059:  F0
               S01:0800005A:  1F
               S01:0800005B:  E5
               S01:0800005C:  00
               S01:0800005D:  FE
               S01:0800005E:  7F
               S01:0800005F:  02
               S01:08000060:  F0
               S01:08000061:  FF
               S01:08000062:  7F
               S01:08000063:  02
F00:0053           .BYTE 0xF0,0x01,0x00,0x00,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00     ; 12
               S01:08000064:  F0
               S01:08000065:  01
               S01:08000066:  00
               S01:08000067:  00
               S01:08000068:  FF
               S01:08000069:  01
               S01:0800006A:  00
               S01:0800006B:  00
               S01:0800006C:  00
               S01:0800006D:  00
               S01:0800006E:  00
               S01:0800006F:  04
               S01:08000070:  00
               S01:08000071:  00
               S01:08000072:  00
               S01:08000073:  00
F00:0054           .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ; 13
               S01:08000074:  00
               S01:08000075:  00
               S01:08000076:  00
               S01:08000077:  00
               S01:08000078:  00
               S01:08000079:  00
               S01:0800007A:  00
               S01:0800007B:  00
               S01:0800007C:  00
               S01:0800007D:  00
               S01:0800007E:  00
               S01:0800007F:  00
               S01:08000080:  00
               S01:08000081:  00
               S01:08000082:  00
               S01:08000083:  00
F00:0055           .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ; 14
               S01:08000084:  00
               S01:08000085:  00
               S01:08000086:  00
               S01:08000087:  00
               S01:08000088:  00
               S01:08000089:  00
               S01:0800008A:  00
               S01:0800008B:  00
               S01:0800008C:  00
               S01:0800008D:  00
               S01:0800008E:  00
               S01:0800008F:  00
               S01:08000090:  00
               S01:08000091:  00
               S01:08000092:  00
               S01:08000093:  00
F00:0056       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x9E,0x7B,0xEB     ; 15
               S01:08000094:  00
               S01:08000095:  00
               S01:08000096:  00
               S01:08000097:  00
               S01:08000098:  00
               S01:08000099:  00
               S01:0800009A:  00
               S01:0800009B:  00
               S01:0800009C:  00
               S01:0800009D:  00
               S01:0800009E:  00
               S01:0800009F:  00
               S01:080000A0:  1A
               S01:080000A1:  9E
               S01:080000A2:  7B
               S01:080000A3:  EB
F00:0057       	
F00:0058           ;		123456789012
F00:0059           .ASCII "DRUMMOND.NET";0A0h    12    Game Title       (uppercase ascii, max 12 characters)	
               S01:080000A4:  44 52 55 4D 4D 4F 4E 44 2E 4E 45 54
F00:0060           .ASCII "0000"	;0ACh    4     Game Code        (uppercase ascii, 4 characters)
               S01:080000B0:  30 30 30 30
F00:0061           .ASCII "00"		;0B0h    2     Maker Code       (uppercase ascii, 2 characters)
               S01:080000B4:  30 30
F00:0062       	.BYTE 0x96		;0B2h    1     Fixed value      (must be 96h, required!)
               S01:080000B6:  96
F00:0063       	.BYTE 0			;0B3h    1     Main unit code   (00h for current GBA models)
               S01:080000B7:  00
F00:0064       	.BYTE 0			;0B4h    1     Device type      (usually 00h) (bit7=DACS/debug related)
               S01:080000B8:  00
F00:0065       	.SPACE 7		;0B5h    7     Reserved Area    (should be zero filled)
F00:0066       	.BYTE 0			;0BCh    1     Software version (usually 00h)
               S01:080000C0:  00
F00:0067       	.BYTE 0			;0BDh    1     Complement check (header checksum, required!)
               S01:080000C1:  00
F00:0068       	.WORD 0			;0BEh    2     Reserved Area    (should be zero filled)
               S01:080000C2:  00 00
F00:0069       	.LONG 0			;0C0h    4     RAM Entry Point  (32bit ARM branch opcode, eg. "B ram_start")
               S01:080000C4:  00 00 00 00
F00:0070       	.BYTE 0			;0C4h    1     Boot mode        (init as 00h - BIOS overwrites this value!)
               S01:080000C8:  00
F00:0071       	.BYTE 0			;0C5h    1     Slave ID Number  (init as 00h - BIOS overwrites this value!)
               S01:080000C9:  00
F00:0072       	.SPACE 26		;0C6h    26    Not used         (seems to be unused)
F00:0073       	.LONG 0			;0E0h    4     JOYBUS Entry Pt. (32bit ARM branch opcode, eg. "B joy_start")
               S01:080000E4:  00 00 00 00
F00:0074       
F00:0075       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0076       
F00:0077       Main:
F00:0078       	MOV sp, #0x03000000		;Initialize Stack Pointer, starts at memory address 3000000 on GBA
               S01:080000E8:  03 D4 A0 E3
F00:0079       	
F00:0080       	;Set player start position
F00:0081       	MOV r0, #PlayerX
               S01:080000EC:  02 04 A0 E3 22 00 80 E3
F00:0082       	MOV r1, #0
               S01:080000F4:  00 10 A0 E3
F00:0083       	STRB r1, [r0]
               S01:080000F8:  00 10 C0 E5
F00:0084       	
F00:0085       	MOV r0, #PlayerY
               S01:080000FC:  02 04 A0 E3 23 00 80 E3
F00:0086       	MOV r1, #0
               S01:08000104:  00 10 A0 E3
F00:0087       	STRB r1, [r0]
               S01:08000108:  00 10 C0 E5
F00:0088       	
F00:0089       	BL ScreenInit
               S01:0800010C:  44 02 00 EB
F00:0090       	
F00:0091       	;LDR r1, AsciiTestAddress1	;Load test address into r1, parameter 1	
F00:0092       	;BL WriteText
F00:0093       	;BL NewLine
F00:0094       	
F00:0095       	;LDR r1, AsciiTestAddress2	;Load test address into r1, parameter 1	
F00:0096       	;BL WriteText
F00:0097       	;BL NewLine
F00:0098       	
F00:0099       	;LDR r1, AsciiTestAddress3	;Load test address into r1, parameter 1	
F00:0100       	;BL WriteText
F00:0101       	;BL NewLine
F00:0102       	
F00:0103       	;LDR r1, AsciiTestAddress4	;Load test address into r1, parameter 1	
F00:0104       	;BL WriteText
F00:0105       	;BL NewLine
F00:0106       	
F00:0107       GameLoop:
F00:0108       		;MOV r1, #Key_Up					;Pass up key mask to input function
F00:0109       		;BL ReadInput					;Call function, value returned in r0
F00:0110       	
F00:0111       		;CMPS r0, #0						;Set flag register to check input
F00:0112       		;MOVE r1, #0b1111110000000000	;Turn blue if up key pressed
F00:0113       		;MOVNE r1, #BackgroundColor		;Stay background gray otherwise
F00:0114       	
F00:0115       		;BL ClearToColor					;Update color
F00:0116       		
F00:0117       		MOV r5, #PlayerX
               S01:08000110:  02 54 A0 E3 22 50 85 E3
F00:0118       		LDRB r7, [r5]
               S01:08000118:  00 70 D5 E5
F00:0119       		MOV r6, #PlayerY
               S01:0800011C:  02 64 A0 E3 23 60 86 E3
F00:0120       		LDRB r8, [r6]
               S01:08000124:  00 80 D6 E5
F00:0121       		
F00:0122       		;LDR r5, SpriteTestAddress
F00:0123       		;MOV r4, #32
F00:0124       		;MOV r3, #32
F00:0125       		;MOV r2, r8
F00:0126       		;MOV r1, r7
F00:0127       		;BL DrawSprite
F00:0128       	
F00:0129       		MOV r1, #Key_Up
               S01:08000128:  40 10 A0 E3
F00:0130       		BL ReadInput
               S01:0800012C:  66 02 00 EB
F00:0131       		CMPS r0, #0
               S01:08000130:  00 00 50 E3
F00:0132       		ADDNE r8, r8, #1
               S01:08000134:  01 80 88 12
F00:0133       	
F00:0134       	
F00:0135       		MOV r1, #Key_Down
               S01:08000138:  80 10 A0 E3
F00:0136       		BL ReadInput
               S01:0800013C:  62 02 00 EB
F00:0137       		CMPS r0, #0
               S01:08000140:  00 00 50 E3
F00:0138       		SUBNE r8, r8, #1
               S01:08000144:  01 80 48 12
F00:0139       	
F00:0140       	
F00:0141       		MOV r1, #Key_Right
               S01:08000148:  10 10 A0 E3
F00:0142       		BL ReadInput
               S01:0800014C:  5E 02 00 EB
F00:0143       		CMPS r0, #0
               S01:08000150:  00 00 50 E3
F00:0144       		SUBNE r7, r7, #1;;;;;;;;;;;;;;;;;;;********For some reason, when key_right is pressed, adding moves it left so I switc
               S01:08000154:  01 70 47 12
F00:0145       	
F00:0146       	
F00:0147       		MOV r1, #Key_Left
               S01:08000158:  20 10 A0 E3
F00:0148       		BL ReadInput
               S01:0800015C:  5A 02 00 EB
F00:0149       		CMPS r0, #0
               S01:08000160:  00 00 50 E3
F00:0150       		ADDNE r7, r7, #1;;;;;;;;;;;;;;;;;;;;***********
               S01:08000164:  01 70 87 12
F00:0151       	
F00:0152       		;Update memory with new position
F00:0153       		STRB r8, [r6]
               S01:08000168:  00 80 C6 E5
F00:0154       		STRB r7, [r5]
               S01:0800016C:  00 70 C5 E5
F00:0155       
F00:0156       	
F00:0157       		LDR r5, SpriteTestAddress
               S01:08000170:  A8 50 9F E5
F00:0158       		MOV r4, #32
               S01:08000174:  20 40 A0 E3
F00:0159       		MOV r3, #32
               S01:08000178:  20 30 A0 E3
F00:0160       		MOV r2, r8
               S01:0800017C:  08 20 A0 E1
F00:0161       		MOV r1, r7
               S01:08000180:  07 10 A0 E1
F00:0162       	
F00:0163       		BL DrawSprite
               S01:08000184:  3F 02 00 EB
F00:0164       	
F00:0165       	B GameLoop
               S01:08000188:  E0 FF FF EA
F00:0166       	
F00:0167       AsciiTestAddress1:
F00:0168       	.LONG AsciiTest1	;Address of Ascii string
               S01:0800018C:  90 01 00 08
F00:0169       AsciiTest1:
F00:0170       	.BYTE " !\"#$%&'()*+,-./0123456789:;<=",255	;All characters in font, 255 terminated
               S01:08000190:  20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F
               S01:080001A0:  30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D
               S01:080001AE:  FF
F00:0171       	;.BYTE "Test f",255
F00:0172       	.ALIGN 4	;Align to 4 bytes
F00:0173       	
F00:0174       AsciiTestAddress2:
F00:0175       	.LONG AsciiTest2
               S01:080001B0:  B4 01 00 08
F00:0176       AsciiTest2:
F00:0177       	.BYTE ">?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[",255
               S01:080001B4:  3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D
               S01:080001C4:  4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B
               S01:080001D2:  FF
F00:0178       	.ALIGN 4
F00:0179       	
F00:0180       AsciiTestAddress3:
F00:0181       	.LONG AsciiTest3
               S01:080001E0:  E4 01 00 08
F00:0182       AsciiTest3:
F00:0183       	.BYTE "\\]^_`abcdefghijklmnopqrstuvwxy",255
               S01:080001E4:  5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B
               S01:080001F4:  6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79
               S01:08000202:  FF
F00:0184       	.ALIGN 4
F00:0185       	
F00:0186       AsciiTestAddress4:
F00:0187       	.LONG AsciiTest4
               S01:08000210:  14 02 00 08
F00:0188       AsciiTest4:
F00:0189       	.BYTE "z{|}~",255
               S01:08000214:  7A 7B 7C 7D 7E
               S01:08000219:  FF
F00:0190       	.ALIGN 4
F00:0191       	
F00:0192       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0193       ;Bitmap includes
F00:0194       
F00:0195       SpriteTestAddress:
F00:0196       	.LONG SpriteTest
               S01:08000220:  24 02 00 08
F00:0197       SpriteTest:
F00:0198       	.incbin "\Bitmaps\TestPlayer.RAW"
               S01:08000224:  1F 80 1F 80 1F 80 1F 80 1F 80 1F 80 1F 80 1F 80
               S01:08000234:  1F 80 1F 80 1F 80 1F 80 1F 80 1F 80 1F 80 1F 80
F00:0199       	
F00:0200       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0201       
F00:0202       ScreenInit:
F00:0203       	STMFD sp!, {r0-r12, lr}
               S01:08000A24:  FF 5F 2D E9
F00:0204       		;Actual screen initialization, tells console which mode we're in
F00:0205       		MOV r3, #0x04000000		;DISPCNT - LCD Control
               S01:08000A28:  01 33 A0 E3
F00:0206       		MOV r2, #0x403			;4 = Layer 2 on, 3 = ScreenMode 3 
               S01:08000A2C:  01 2B A0 E3 03 20 82 E3
F00:0207       		STR r2, [r3]			;Store layer and screen mode in LCD Control address
               S01:08000A34:  00 20 83 E5
F00:0208       		
F00:0209       		MOV r0, #BackgroundColor		;Color to fill
               S01:08000A38:  C2 0C A0 E3 10 00 80 E3
F00:0210       		BL ClearToColor
               S01:08000A40:  00 00 00 EB
F00:0211       	LDMFD sp!, {r0-r12, pc}
               S01:08000A44:  FF 9F BD E8
F00:0212       	
F00:0213       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0214       ;r1 = color halfword
F00:0215       ClearToColor:
F00:0216       	STMFD sp!, {r1-r12, lr}
               S01:08000A48:  FE 5F 2D E9
F00:0217       		MOV r3, #VramBase	;Start with vram base
               S01:08000A4C:  06 34 A0 E3
F00:0218       		MOV r2, #240*160	;Take number of pixels in screen
               S01:08000A50:  96 2C A0 E3
F00:0219       		
F00:0220       FillScreen:
F00:0221       		STRH r1, [r3], #2	;Store halfword (color) into position in vram and increment it by 2 bytes (to next pixel)
               S01:08000A54:  B2 10 C3 E0
F00:0222       		SUBS r2, r2, #1		;Decrement and set signs of loop counter
               S01:08000A58:  01 20 52 E2
F00:0223       		BNE FillScreen		;Loop to fill screen
               S01:08000A5C:  FC FF FF 1A
F00:0224       		
F00:0225       	LDMFD sp!, {r1-r12, pc}
               S01:08000A60:  FE 9F BD E8
F00:0226       	
F00:0227       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0228       ;r1 = X, r2 = Y
F00:0229       ;Return VRAM position of (x,Y)
F00:0230       ;Based on https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0231       GetScreenPos:
F00:0232       	STMFD sp!, {r1-r3, lr}
               S01:08000A64:  0E 40 2D E9
F00:0233       		MOV r0, #VramBase	;Vram
               S01:08000A68:  06 04 A0 E3
F00:0234       		MOV r3, #240		;bytes in a line (should be 240 * 2, but y position keeps getting shifted down by an extra factor of 2)
               S01:08000A6C:  F0 30 A0 E3
F00:0235       		MUL r2, r3, r2		;Multiply Y by line byte count
               S01:08000A70:  93 02 02 E0
F00:0236       		ADD r0, r0, r2		;Add number of bytes for y position
               S01:08000A74:  02 00 80 E0
F00:0237       		ADD r0, r0, r1		;Add number of bytes for x position
               S01:08000A78:  01 00 80 E0
F00:0238       	LDMFD sp!, {r1-r3, pc}
               S01:08000A7C:  0E 80 BD E8
F00:0239       	
F00:0240       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0241       ;r1 = current VRAM position
F00:0242       ;Return VRAM position shifted down one line
F00:0243       ;https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0244       GetNextLine:
F00:0245       	ADD r0, r1, #240*2		;Simple add
               S01:08000A80:  1E 0E 81 E2
F00:0246       	MOV pc, lr				;Return
               S01:08000A84:  0E F0 A0 E1
F00:0247       
F00:0248       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0249       ;r1 = x position
F00:0250       ;r2 = y position
F00:0251       ;r3 = width
F00:0252       ;r4	= height
F00:0253       ;r5 = SpriteAddress
F00:0254       ;Based on https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0255       ;Redesigned slightly, GetNextLine was extracted into it's own function
F00:0256       DrawSprite:
F00:0257       	STMFD sp!, {r1-r12, lr}
               S01:08000A88:  FE 5F 2D E9
F00:0258       		;x and y position already in r1 and r2
F00:0259       		BL GetScreenPos
               S01:08000A8C:  F4 FF FF EB
F00:0260       		
F00:0261       		MOV r7, r0
               S01:08000A90:  00 70 A0 E1
F00:0262       		
F00:0263       		SpriteNextLine:
F00:0264       			STMFD sp!, {r3, r7}		;Store width and current leftmost position in line of the bitmap, width (r3) acts as a counter a
               S01:08000A94:  88 00 2D E9
F00:0265       			SpriteNextPixel:
F00:0266       				LDRH r8, [r5], #2	;Load value of pixel from RAW file then increment to next pixel in file
               S01:08000A98:  B2 80 D5 E0
F00:0267       				;LDRH r6, [r7]
F00:0268       				;EOR r8, r8, r6
F00:0269       				STRH r8, [r7], #2	;Store value previously taken from RAW file into VRAM and increment to next VRAM pixel
               S01:08000A9C:  B2 80 C7 E0
F00:0270       			
F00:0271       				SUBS r3, r3, #1		;Decrement width as loop counter
               S01:08000AA0:  01 30 53 E2
F00:0272       			BNE SpriteNextPixel		;Exit loop once at end of width
               S01:08000AA4:  FB FF FF 1A
F00:0273       			LDMFD sp!, {r3, r7}
               S01:08000AA8:  88 00 BD E8
F00:0274       			
F00:0275       			;GetNextLine doesn't save any registers, we just need the one line to change the value in r1 so we manage memory outs
F00:0276       			STMFD sp!, {r1}		;Save r1 so it can be used as a parameter again
               S01:08000AAC:  02 00 2D E9
F00:0277       				MOV r1, r7			;Move y position into r1 and pass into GetNextLine
               S01:08000AB0:  07 10 A0 E1
F00:0278       				BL GetNextLine
               S01:08000AB4:  F1 FF FF EB
F00:0279       				MOV r7, r0			;Move returned value back into r7
               S01:08000AB8:  00 70 A0 E1
F00:0280       			LDMFD sp!, {r1}		;Load r1 back so we don't lose the parameter passed to DrawSprite
               S01:08000ABC:  02 00 BD E8
F00:0281       			
F00:0282       			SUBS r4, r4, #1		;Decrement height
               S01:08000AC0:  01 40 54 E2
F00:0283       		BNE SpriteNextLine		;Exit once at end of height
               S01:08000AC4:  F2 FF FF 1A
F00:0284       	LDMFD sp!, {r1-r12, pc}
               S01:08000AC8:  FE 9F BD E8
F00:0285       	
F00:0286       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0287       ;Use E conditional to check if pressed
F00:0288       ;r1 = key mask
F00:0289       ;Returns keymask in r0
F00:0290       ReadInput:
F00:0291       	STMFD sp!, {r1-r12, lr}
               S01:08000ACC:  FE 5F 2D E9
F00:0292       		EOR r0, r0, r0
               S01:08000AD0:  00 00 20 E0
F00:0293       		MOV r2, #InputLocation	;Input memory location
               S01:08000AD4:  13 2E A0 E3 01 23 82 E3
F00:0294       		LDRH r0, [r2]			;Get value of input, (1 = not pressed)
               S01:08000ADC:  B0 00 52 E1
F00:0295       		MOV r2, #MaskKey		;Mask out superfluous bits
               S01:08000AE0:  3F 2B A0 E3
F00:0296       		BIC r0, r0, r2			;Inverse AND the register to only keep input bits (last 10 bits)
               S01:08000AE4:  02 00 C0 E1
F00:0297       		AND r0, r0, r1			;AND return register with input bits with the passed key mask
               S01:08000AE8:  01 00 00 E0
F00:0298       	LDMFD sp!, {r1-r12, pc}
               S01:08000AEC:  FE 9F BD E8
F00:0299       
F00:0300       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0301       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0302       ;Comments added by me, Dillon Drummond
F00:0303       NewLine:
F00:0304       	STMFD sp!, {r0-r12, lr}	;Store stack pointer, registers 0-12, and link register on stack so we don't lose info from the
               S01:08000AF0:  FF 5F 2D E9
F00:0305       		MOV r0, #CursorX	;Get address of cursor x
               S01:08000AF4:  02 04 A0 E3 20 00 80 E3
F00:0306       		EOR r1, r1, r1		;Clear r1
               S01:08000AFC:  01 10 21 E0
F00:0307       		STRB r1, [r0]		;Store 0 from r1 in CursorX, move cursor back to left side of screen
               S01:08000B00:  00 10 C0 E5
F00:0308       		
F00:0309       		MOV r0, #CursorY	;Get Y address
               S01:08000B04:  02 04 A0 E3 21 00 80 E3
F00:0310       		LDRB r1, [r0]		;Store CursorY valye in r1
               S01:08000B0C:  00 10 D0 E5
F00:0311       		ADD r1, r1, #1		;Add 1 to CursorY
               S01:08000B10:  01 10 81 E2
F00:0312       		STRB r1, [r0]		;Store the incremented CursorY vlaue in CursorY, moves cursor down
               S01:08000B14:  00 10 C0 E5
F00:0313       	LDMFD sp!, {r0-r12, pc}	;Load registers from stack, put link register in program counter to return
               S01:08000B18:  FF 9F BD E8
F00:0314       
F00:0315       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0316       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0317       ;Comments added by me, Dillon Drummond
F00:0318       ;Some changes made
F00:0319       ;Paramters: r1 = string address
F00:0320       WriteText:
F00:0321       	STMFD sp!, {r0-r12, lr}
               S01:08000B1C:  FF 5F 2D E9
F00:0322       		MOV r2, r1			;Store parameter in temp variable so new parameter can be passed to WriteChar
               S01:08000B20:  01 20 A0 E1
F00:0323       		
F00:0324       RepeatWriteText:
F00:0325       		LDRB r1, [r2], #1 	;Load byte then shift by 1
               S01:08000B24:  01 10 D2 E4
F00:0326       		CMPS r1, #255		;Check if char is null terminator
               S01:08000B28:  FF 00 51 E3
F00:0327       		BEQ WriteTextDone	;If null terminator, exit
               S01:08000B2C:  01 00 00 0A
F00:0328       		BL WriteChar		;Otherwise, write character
               S01:08000B30:  01 00 00 EB
F00:0329       		B RepeatWriteText	;Go back to begining of this block and check if there is another character or if at null terminator
               S01:08000B34:  FA FF FF EA
F00:0330       	
F00:0331       WriteTextDone:
F00:0332       	LDMFD sp!, {r0-r12, pc}
               S01:08000B38:  FF 9F BD E8
F00:0333       	
F00:0334       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0335       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0336       ;Comments added by me, Dillon Drummond
F00:0337       ;r1 = character to write
F00:0338       WriteChar:
F00:0339       	STMFD sp!, {r0-r12, lr}	;Store registers and link register
               S01:08000B3C:  FF 5F 2D E9
F00:0340       		;Clear r4 and r5
F00:0341       		EOR r4, r4, r4
               S01:08000B40:  04 40 24 E0
F00:0342       		EOR r5, r5, r5
               S01:08000B44:  05 50 25 E0
F00:0343       		
F00:0344       		;Loading address of cursor x and y then loading values into r4 and r5
F00:0345       		MOV r3, #CursorX
               S01:08000B48:  02 34 A0 E3 20 30 83 E3
F00:0346       		LDRB r4, [r3]
               S01:08000B50:  00 40 D3 E5
F00:0347       		MOV r3, #CursorY
               S01:08000B54:  02 34 A0 E3 21 30 83 E3
F00:0348       		LDRB r5, [r3]
               S01:08000B5C:  00 50 D3 E5
F00:0349       		
F00:0350       		;r4 = cursor x position, r5 = cursor y position
F00:0351       		
F00:0352       		MOV r3, #VramBase	;Load VRAM base address in, addresses after this point will modify screen, 2 bytes, half word, 16 bi
               S01:08000B60:  06 34 A0 E3
F00:0353       		
F00:0354       		;Each char is 8 x 8 pixels
F00:0355       		;Each pixel is 2 bytes
F00:0356       		;8 lines of 16 bytes
F00:0357       		MOV r6, #16		;Bytes in a line of character
               S01:08000B64:  10 60 A0 E3
F00:0358       		MUL r2, r4, r6	;Multiply cursor x position by 16
               S01:08000B68:  94 06 02 E0
F00:0359       		ADD r3, r3, r2	;Add that position to r2 so we are at that x position in VRAM
               S01:08000B6C:  02 30 83 E0
F00:0360       		
F00:0361       		MOV r4, #240*8*2	;240 pixels per row, 8 lines per char, 2 bytes per pixel, (no longer need cursor x position, can writ
               S01:08000B70:  0F 4C A0 E3
F00:0362       		MUL r2, r5, r4		;cursor y position * bytes per char row (8 screen lines, 240 pixels per line, 2 bytes per pixel)
               S01:08000B74:  95 04 02 E0
F00:0363       		ADD r3, r3, r2		;Add number of bytes to move over in x direction (r3) and number of bytes to move down in the y direct
               S01:08000B78:  02 30 83 E0
F00:0364       		
F00:0365       		;I added this, could potentially cause problems
F00:0366       		;Within each 8x8 space for chars, they are offset to the right by one pixel for some reason.  Since r3 is the location
F00:0367       		;;;;;;;;;;;;;;;;;;;;;;;
F00:0368       		SUB r3, r3, #2	;Subtract 1 byte from position, solves 1 byte right offset within each char space, may have something t
               S01:08000B7C:  02 30 43 E2
F00:0369       		;;;;;;;;;;;;;;;;;;;;;;;
F00:0370       		
F00:0371       		ADR r4,BitmapFont 	;Load address of font into r4
               S01:08000B80:  58 40 8F E2
F00:0372       		
F00:0373       		SUB r1,r1,#32			;Subtract 32 from value in first paramter 
               S01:08000B84:  20 10 41 E2
F00:0374       		ADD r4,r4,r1,asl #3		;Add the value to the bitmap font and shift left 3 to multiply by 8 and get address of the passed
               S01:08000B88:  81 41 84 E0
F00:0375       		
F00:0376       		MOV r10,#8			;Loop counter for lines
               S01:08000B8C:  08 A0 A0 E3
F00:0377       WriteLine:
F00:0378       		MOV r7,#8 			;Loop counter for pixels
               S01:08000B90:  08 70 A0 E3
F00:0379       		LDRB r8,[r4],#1				;Load bitmap font value into r8
               S01:08000B94:  01 80 D4 E4
F00:0380       		MOV r9,#0b100000000			;Bitmask gets shifted over 1 through each loop
               S01:08000B98:  01 9C A0 E3
F00:0381       				
F00:0382       		MOV r2, #0b1111111101000000; Color: ABBBBBGGGGGRRRRR	A=Alpha
               S01:08000B9C:  FF 2C A0 E3 40 20 82 E3
F00:0383       DrawPixel:
F00:0384       		TST r8,r9			;Test r8 and r9, CMP but with AND function, uses bitmask on bitmap font to check if current pixel in r3 sh
               S01:08000BA4:  09 00 18 E1
F00:0385       		STRNEH r2,[r3]		;SToRe if Not Equal Halfword, stores halfword if test is not equal, sets pixel at r3 to the color in r
               S01:08000BA8:  B0 20 43 11
F00:0386       		ADD r3,r3,#2		;Increment r3 by 1 byte
               S01:08000BAC:  02 30 83 E2
F00:0387       		MOV r9,r9,ror #1	;Rotate bitmask (0b10000000 checks leftmost pixel, 0b01000000 checks the next one, etc.)
               S01:08000BB0:  E9 90 A0 E1
F00:0388       		SUBS r7,r7,#1		;Decrement loop counter for pixels, set signs to check if after 8 pixels
               S01:08000BB4:  01 70 57 E2
F00:0389       		BNE DrawPixel		;Loop for 8 pixels, until zero flag is set
               S01:08000BB8:  F9 FF FF 1A
F00:0390       		
F00:0391       		ADD r3,r3,#480-16	;240 pixels * 2 bytes per pixel - 16 
               S01:08000BBC:  1D 3E 83 E2
F00:0392       		SUBS r10,r10,#1		;Decrement loop counter for lines, set signs to see if after 8 lines	
               S01:08000BC0:  01 A0 5A E2
F00:0393       		BNE WriteLine		;If zeor flag set, exit.  Otherwise, repeat, go to next line
               S01:08000BC4:  F1 FF FF 1A
F00:0394       LineDone:	
F00:0395       		MOV r3,#CursorX		;Get CursorX address
               S01:08000BC8:  02 34 A0 E3 20 30 83 E3
F00:0396       		LDRB r1,[r3]		;Get CursorX value
               S01:08000BD0:  00 10 D3 E5
F00:0397       		ADD r1,r1,#1		;Increment cursor by 1 position
               S01:08000BD4:  01 10 81 E2
F00:0398       		STRB r1,[r3]		;Store incremented value back in address
               S01:08000BD8:  00 10 C3 E5
F00:0399       		
F00:0400       	LDMFD sp!, {r0-r12, pc}	;Return
               S01:08000BDC:  FF 9F BD E8
F00:0401       	
F00:0402       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0403       
F00:0404       ;Starts at ASCII number 32, simplifying by starting at 0
F00:0405       ;I translated the Presst Start 2P Google Font into 8 element arrays of byte sized hex codes
F00:0406       ;This effectively defines an 8x8 bitmap of a character
F00:0407       ;Method learned from https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0408       BitmapFont:
F00:0409       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	;0 - Space
               S01:08000BE0:  00
               S01:08000BE1:  00
               S01:08000BE2:  00
               S01:08000BE3:  00
               S01:08000BE4:  00
               S01:08000BE5:  00
               S01:08000BE6:  00
               S01:08000BE7:  00
F00:0410       	.BYTE 0x70,0x70,0x70,0x60,0x60,0x00,0x60,0x00	;1 - !
               S01:08000BE8:  70
               S01:08000BE9:  70
               S01:08000BEA:  70
               S01:08000BEB:  60
               S01:08000BEC:  60
               S01:08000BED:  00
               S01:08000BEE:  60
               S01:08000BEF:  00
F00:0411       	.BYTE 0x00,0x66,0x66,0x66,0x00,0x00,0x00,0x00	;2 - "
               S01:08000BF0:  00
               S01:08000BF1:  66
               S01:08000BF2:  66
               S01:08000BF3:  66
               S01:08000BF4:  00
               S01:08000BF5:  00
               S01:08000BF6:  00
               S01:08000BF7:  00
F00:0412       	.BYTE 0x00,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C	;3 - #
               S01:08000BF8:  00
               S01:08000BF9:  6C
               S01:08000BFA:  FE
               S01:08000BFB:  6C
               S01:08000BFC:  6C
               S01:08000BFD:  6C
               S01:08000BFE:  FE
               S01:08000BFF:  6C
F00:0413       	.BYTE 0x00,0x10,0x7C,0xD0,0x7C,0x16,0xFC,0x10	;4 - $
               S01:08000C00:  00
               S01:08000C01:  10
               S01:08000C02:  7C
               S01:08000C03:  D0
               S01:08000C04:  7C
               S01:08000C05:  16
               S01:08000C06:  FC
               S01:08000C07:  10
F00:0414       	.BYTE 0x00,0x62,0xA4,0xC8,0x10,0x26,0x4A,0x8C	;5 - %
               S01:08000C08:  00
               S01:08000C09:  62
               S01:08000C0A:  A4
               S01:08000C0B:  C8
               S01:08000C0C:  10
               S01:08000C0D:  26
               S01:08000C0E:  4A
               S01:08000C0F:  8C
F00:0415       	.BYTE 0x00,0x70,0xD8,0xD8,0x70,0xDA,0xCC,0x7E	;6 - &
               S01:08000C10:  00
               S01:08000C11:  70
               S01:08000C12:  D8
               S01:08000C13:  D8
               S01:08000C14:  70
               S01:08000C15:  DA
               S01:08000C16:  CC
               S01:08000C17:  7E
F00:0416       	.BYTE 0x00,0x30,0x30,0x60,0x00,0x00,0x00,0x00	;7 - '
               S01:08000C18:  00
               S01:08000C19:  30
               S01:08000C1A:  30
               S01:08000C1B:  60
               S01:08000C1C:  00
               S01:08000C1D:  00
               S01:08000C1E:  00
               S01:08000C1F:  00
F00:0417       	.BYTE 0x00,0x0C,0x18,0x30,0x30,0x30,0x18,0x0C	;8 - (
               S01:08000C20:  00
               S01:08000C21:  0C
               S01:08000C22:  18
               S01:08000C23:  30
               S01:08000C24:  30
               S01:08000C25:  30
               S01:08000C26:  18
               S01:08000C27:  0C
F00:0418       	.BYTE 0x00,0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30	;9 - )
               S01:08000C28:  00
               S01:08000C29:  30
               S01:08000C2A:  18
               S01:08000C2B:  0C
               S01:08000C2C:  0C
               S01:08000C2D:  0C
               S01:08000C2E:  18
               S01:08000C2F:  30
F00:0419       	.BYTE 0x00,0x6C,0x38,0xFE,0x38,0x6C,0x00,0x00	;10 - *
               S01:08000C30:  00
               S01:08000C31:  6C
               S01:08000C32:  38
               S01:08000C33:  FE
               S01:08000C34:  38
               S01:08000C35:  6C
               S01:08000C36:  00
               S01:08000C37:  00
F00:0420       	.BYTE 0x00,0x18,0x18,0x7E,0x7E,0x18,0x18,0x00	;11 - +
               S01:08000C38:  00
               S01:08000C39:  18
               S01:08000C3A:  18
               S01:08000C3B:  7E
               S01:08000C3C:  7E
               S01:08000C3D:  18
               S01:08000C3E:  18
               S01:08000C3F:  00
F00:0421       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x60	;12 - ,
               S01:08000C40:  00
               S01:08000C41:  00
               S01:08000C42:  00
               S01:08000C43:  00
               S01:08000C44:  00
               S01:08000C45:  30
               S01:08000C46:  30
               S01:08000C47:  60
F00:0422       	.BYTE 0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00	;12 - -
               S01:08000C48:  00
               S01:08000C49:  00
               S01:08000C4A:  00
               S01:08000C4B:  3C
               S01:08000C4C:  00
               S01:08000C4D:  00
               S01:08000C4E:  00
               S01:08000C4F:  00
F00:0423       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30	;13 - .
               S01:08000C50:  00
               S01:08000C51:  00
               S01:08000C52:  00
               S01:08000C53:  00
               S01:08000C54:  00
               S01:08000C55:  00
               S01:08000C56:  30
               S01:08000C57:  30
F00:0424       	.BYTE 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80	;14 - /
               S01:08000C58:  01
               S01:08000C59:  02
               S01:08000C5A:  04
               S01:08000C5B:  08
               S01:08000C5C:  10
               S01:08000C5D:  20
               S01:08000C5E:  40
               S01:08000C5F:  80
F00:0425       	.BYTE 0x38,0x4C,0xC6,0xC6,0xC6,0xC6,0x64,0x38	;15 - 0
               S01:08000C60:  38
               S01:08000C61:  4C
               S01:08000C62:  C6
               S01:08000C63:  C6
               S01:08000C64:  C6
               S01:08000C65:  C6
               S01:08000C66:  64
               S01:08000C67:  38
F00:0426       	.BYTE 0x00,0x18,0x38,0x18,0x18,0x18,0x18,0x7E	;16 - 1
               S01:08000C68:  00
               S01:08000C69:  18
               S01:08000C6A:  38
               S01:08000C6B:  18
               S01:08000C6C:  18
               S01:08000C6D:  18
               S01:08000C6E:  18
               S01:08000C6F:  7E
F00:0427       	.BYTE 0x00,0x7C,0xC6,0x0E,0x3C,0x78,0xE0,0xFE	;17 - 2
               S01:08000C70:  00
               S01:08000C71:  7C
               S01:08000C72:  C6
               S01:08000C73:  0E
               S01:08000C74:  3C
               S01:08000C75:  78
               S01:08000C76:  E0
               S01:08000C77:  FE
F00:0428       	.BYTE 0x00,0x7E,0x0C,0x18,0x3C,0x06,0xC6,0x7C	;18 - 3
               S01:08000C78:  00
               S01:08000C79:  7E
               S01:08000C7A:  0C
               S01:08000C7B:  18
               S01:08000C7C:  3C
               S01:08000C7D:  06
               S01:08000C7E:  C6
               S01:08000C7F:  7C
F00:0429       	.BYTE 0x00,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C	;19 - 4
               S01:08000C80:  00
               S01:08000C81:  1C
               S01:08000C82:  3C
               S01:08000C83:  6C
               S01:08000C84:  CC
               S01:08000C85:  FE
               S01:08000C86:  0C
               S01:08000C87:  0C
F00:0430       	.BYTE 0x00,0xFC,0xC0,0xFC,0x06,0x06,0xC6,0x7C	;20 - 5
               S01:08000C88:  00
               S01:08000C89:  FC
               S01:08000C8A:  C0
               S01:08000C8B:  FC
               S01:08000C8C:  06
               S01:08000C8D:  06
               S01:08000C8E:  C6
               S01:08000C8F:  7C
F00:0431       	.BYTE 0x00,0x3C,0x60,0xC0,0xFC,0xC6,0xC6,0x7C	;21 - 6
               S01:08000C90:  00
               S01:08000C91:  3C
               S01:08000C92:  60
               S01:08000C93:  C0
               S01:08000C94:  FC
               S01:08000C95:  C6
               S01:08000C96:  C6
               S01:08000C97:  7C
F00:0432       	.BYTE 0x00,0xFE,0xC6,0x0C,0x18,0x30,0x30,0x30	;22 - 7
               S01:08000C98:  00
               S01:08000C99:  FE
               S01:08000C9A:  C6
               S01:08000C9B:  0C
               S01:08000C9C:  18
               S01:08000C9D:  30
               S01:08000C9E:  30
               S01:08000C9F:  30
F00:0433       	.BYTE 0x00,0x78,0xC4,0xE4,0x78,0x9E,0x86,0x7C	;23 - 8
               S01:08000CA0:  00
               S01:08000CA1:  78
               S01:08000CA2:  C4
               S01:08000CA3:  E4
               S01:08000CA4:  78
               S01:08000CA5:  9E
               S01:08000CA6:  86
               S01:08000CA7:  7C
F00:0434       	.BYTE 0x00,0x7C,0xC6,0xC6,0x7E,0x06,0x0C,0x78	;24 - 9
               S01:08000CA8:  00
               S01:08000CA9:  7C
               S01:08000CAA:  C6
               S01:08000CAB:  C6
               S01:08000CAC:  7E
               S01:08000CAD:  06
               S01:08000CAE:  0C
               S01:08000CAF:  78
F00:0435       	.BYTE 0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00	;25 - :
               S01:08000CB0:  00
               S01:08000CB1:  30
               S01:08000CB2:  30
               S01:08000CB3:  00
               S01:08000CB4:  00
               S01:08000CB5:  30
               S01:08000CB6:  30
               S01:08000CB7:  00
F00:0436       	.BYTE 0x00,0x30,0x30,0x00,0x30,0x30,0x60,0x00	;26 - ;
               S01:08000CB8:  00
               S01:08000CB9:  30
               S01:08000CBA:  30
               S01:08000CBB:  00
               S01:08000CBC:  30
               S01:08000CBD:  30
               S01:08000CBE:  60
               S01:08000CBF:  00
F00:0437       	.BYTE 0x00,0x0C,0x18,0x30,0x18,0x0C,0x00,0x00	;27 - <
               S01:08000CC0:  00
               S01:08000CC1:  0C
               S01:08000CC2:  18
               S01:08000CC3:  30
               S01:08000CC4:  18
               S01:08000CC5:  0C
               S01:08000CC6:  00
               S01:08000CC7:  00
F00:0438       	.BYTE 0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00	;28 - =
               S01:08000CC8:  00
               S01:08000CC9:  00
               S01:08000CCA:  7E
               S01:08000CCB:  00
               S01:08000CCC:  7E
               S01:08000CCD:  00
               S01:08000CCE:  00
               S01:08000CCF:  00
F00:0439       	.BYTE 0x00,0x30,0x18,0x0C,0x18,0x30,0x00,0x00	;29 - >
               S01:08000CD0:  00
               S01:08000CD1:  30
               S01:08000CD2:  18
               S01:08000CD3:  0C
               S01:08000CD4:  18
               S01:08000CD5:  30
               S01:08000CD6:  00
               S01:08000CD7:  00
F00:0440       	.BYTE 0x00,0x7C,0xFE,0xC6,0x0C,0x38,0x00,0x38	;30 - ?
               S01:08000CD8:  00
               S01:08000CD9:  7C
               S01:08000CDA:  FE
               S01:08000CDB:  C6
               S01:08000CDC:  0C
               S01:08000CDD:  38
               S01:08000CDE:  00
               S01:08000CDF:  38
F00:0441       	.BYTE 0x00,0x7C,0x82,0xBA,0xAA,0xBE,0x80,0x7C	;31 - @
               S01:08000CE0:  00
               S01:08000CE1:  7C
               S01:08000CE2:  82
               S01:08000CE3:  BA
               S01:08000CE4:  AA
               S01:08000CE5:  BE
               S01:08000CE6:  80
               S01:08000CE7:  7C
F00:0442       	.BYTE 0x00,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6	;32 - A
               S01:08000CE8:  00
               S01:08000CE9:  38
               S01:08000CEA:  6C
               S01:08000CEB:  C6
               S01:08000CEC:  C6
               S01:08000CED:  FE
               S01:08000CEE:  C6
               S01:08000CEF:  C6
F00:0443       	.BYTE 0x00,0xFC,0xC6,0xC6,0xFC,0xC6,0xC6,0xFC	;33 - B
               S01:08000CF0:  00
               S01:08000CF1:  FC
               S01:08000CF2:  C6
               S01:08000CF3:  C6
               S01:08000CF4:  FC
               S01:08000CF5:  C6
               S01:08000CF6:  C6
               S01:08000CF7:  FC
F00:0444       	.BYTE 0x00,0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C	;34 - C
               S01:08000CF8:  00
               S01:08000CF9:  3C
               S01:08000CFA:  66
               S01:08000CFB:  C0
               S01:08000CFC:  C0
               S01:08000CFD:  C0
               S01:08000CFE:  66
               S01:08000CFF:  3C
F00:0445       	.BYTE 0x00,0xF8,0xCC,0xC6,0xC6,0xC6,0xCC,0xF8	;35 - D
               S01:08000D00:  00
               S01:08000D01:  F8
               S01:08000D02:  CC
               S01:08000D03:  C6
               S01:08000D04:  C6
               S01:08000D05:  C6
               S01:08000D06:  CC
               S01:08000D07:  F8
F00:0446       	.BYTE 0x00,0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xFE	;36 - E
               S01:08000D08:  00
               S01:08000D09:  FE
               S01:08000D0A:  C0
               S01:08000D0B:  C0
               S01:08000D0C:  FC
               S01:08000D0D:  C0
               S01:08000D0E:  C0
               S01:08000D0F:  FE
F00:0447       	.BYTE 0x00,0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xC0	;37 - F
               S01:08000D10:  00
               S01:08000D11:  FE
               S01:08000D12:  C0
               S01:08000D13:  C0
               S01:08000D14:  FC
               S01:08000D15:  C0
               S01:08000D16:  C0
               S01:08000D17:  C0
F00:0448       	.BYTE 0x00,0x3E,0x60,0xC0,0xCE,0xC6,0x66,0x3E	;38 - G
               S01:08000D18:  00
               S01:08000D19:  3E
               S01:08000D1A:  60
               S01:08000D1B:  C0
               S01:08000D1C:  CE
               S01:08000D1D:  C6
               S01:08000D1E:  66
               S01:08000D1F:  3E
F00:0449       	.BYTE 0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,0xC6	;39 - H
               S01:08000D20:  00
               S01:08000D21:  C6
               S01:08000D22:  C6
               S01:08000D23:  C6
               S01:08000D24:  C6
               S01:08000D25:  FE
               S01:08000D26:  C6
               S01:08000D27:  C6
F00:0450       	.BYTE 0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x7E	;40 - I
               S01:08000D28:  00
               S01:08000D29:  7E
               S01:08000D2A:  18
               S01:08000D2B:  18
               S01:08000D2C:  18
               S01:08000D2D:  18
               S01:08000D2E:  18
               S01:08000D2F:  7E
F00:0451       	.BYTE 0x00,0x06,0x06,0x06,0x06,0x06,0xC6,0x7C	;41 - J
               S01:08000D30:  00
               S01:08000D31:  06
               S01:08000D32:  06
               S01:08000D33:  06
               S01:08000D34:  06
               S01:08000D35:  06
               S01:08000D36:  C6
               S01:08000D37:  7C
F00:0452       	.BYTE 0x00,0xC6,0xCC,0xD8,0xF0,0xF8,0xDC,0xCE	;42 - K
               S01:08000D38:  00
               S01:08000D39:  C6
               S01:08000D3A:  CC
               S01:08000D3B:  D8
               S01:08000D3C:  F0
               S01:08000D3D:  F8
               S01:08000D3E:  DC
               S01:08000D3F:  CE
F00:0453       	.BYTE 0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x7E	;43 - L
               S01:08000D40:  00
               S01:08000D41:  60
               S01:08000D42:  60
               S01:08000D43:  60
               S01:08000D44:  60
               S01:08000D45:  60
               S01:08000D46:  60
               S01:08000D47:  7E
F00:0454       	.BYTE 0x00,0xC6,0xEE,0xFE,0xD6,0xD6,0xC6,0xC6	;44 - M
               S01:08000D48:  00
               S01:08000D49:  C6
               S01:08000D4A:  EE
               S01:08000D4B:  FE
               S01:08000D4C:  D6
               S01:08000D4D:  D6
               S01:08000D4E:  C6
               S01:08000D4F:  C6
F00:0455       	.BYTE 0x00,0xC6,0xE6,0xF6,0xDE,0xDE,0xC6,0xC6	;45 - N
               S01:08000D50:  00
               S01:08000D51:  C6
               S01:08000D52:  E6
               S01:08000D53:  F6
               S01:08000D54:  DE
               S01:08000D55:  DE
               S01:08000D56:  C6
               S01:08000D57:  C6
F00:0456       	.BYTE 0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C	;46 - O
               S01:08000D58:  00
               S01:08000D59:  7C
               S01:08000D5A:  C6
               S01:08000D5B:  C6
               S01:08000D5C:  C6
               S01:08000D5D:  C6
               S01:08000D5E:  C6
               S01:08000D5F:  7C
F00:0457       	.BYTE 0x00,0xFC,0xC6,0xC6,0xC6,0xFC,0xC0,0xC0	;47 - P
               S01:08000D60:  00
               S01:08000D61:  FC
               S01:08000D62:  C6
               S01:08000D63:  C6
               S01:08000D64:  C6
               S01:08000D65:  FC
               S01:08000D66:  C0
               S01:08000D67:  C0
F00:0458       	.BYTE 0x00,0x7C,0xC6,0xC6,0xC6,0xDE,0xCC,0x7A	;48 - Q
               S01:08000D68:  00
               S01:08000D69:  7C
               S01:08000D6A:  C6
               S01:08000D6B:  C6
               S01:08000D6C:  C6
               S01:08000D6D:  DE
               S01:08000D6E:  CC
               S01:08000D6F:  7A
F00:0459       	.BYTE 0x00,0xFC,0xC6,0xC6,0xCE,0xF8,0xDC,0xCE	;49 - R
               S01:08000D70:  00
               S01:08000D71:  FC
               S01:08000D72:  C6
               S01:08000D73:  C6
               S01:08000D74:  CE
               S01:08000D75:  F8
               S01:08000D76:  DC
               S01:08000D77:  CE
F00:0460       	.BYTE 0x00,0x7C,0xC6,0xC0,0x7C,0x06,0xC6,0x7C	;50 - S
               S01:08000D78:  00
               S01:08000D79:  7C
               S01:08000D7A:  C6
               S01:08000D7B:  C0
               S01:08000D7C:  7C
               S01:08000D7D:  06
               S01:08000D7E:  C6
               S01:08000D7F:  7C
F00:0461       	.BYTE 0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x18	;51 - T
               S01:08000D80:  00
               S01:08000D81:  7E
               S01:08000D82:  18
               S01:08000D83:  18
               S01:08000D84:  18
               S01:08000D85:  18
               S01:08000D86:  18
               S01:08000D87:  18
F00:0462       	.BYTE 0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C	;52 - U
               S01:08000D88:  00
               S01:08000D89:  C6
               S01:08000D8A:  C6
               S01:08000D8B:  C6
               S01:08000D8C:  C6
               S01:08000D8D:  C6
               S01:08000D8E:  C6
               S01:08000D8F:  7C
F00:0463       	.BYTE 0x00,0xC6,0xC6,0xC6,0xEE,0x7C,0x38,0x10	;53 - V
               S01:08000D90:  00
               S01:08000D91:  C6
               S01:08000D92:  C6
               S01:08000D93:  C6
               S01:08000D94:  EE
               S01:08000D95:  7C
               S01:08000D96:  38
               S01:08000D97:  10
F00:0464       	.BYTE 0x00,0xD6,0xD6,0xD6,0xD6,0xFE,0xEE,0x44	;54 - W
               S01:08000D98:  00
               S01:08000D99:  D6
               S01:08000D9A:  D6
               S01:08000D9B:  D6
               S01:08000D9C:  D6
               S01:08000D9D:  FE
               S01:08000D9E:  EE
               S01:08000D9F:  44
F00:0465       	.BYTE 0x00,0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6	;55 - X
               S01:08000DA0:  00
               S01:08000DA1:  C6
               S01:08000DA2:  C6
               S01:08000DA3:  6C
               S01:08000DA4:  38
               S01:08000DA5:  6C
               S01:08000DA6:  C6
               S01:08000DA7:  C6
F00:0466       	.BYTE 0x00,0x66,0x66,0x66,0x3C,0x18,0x18,0x18	;56 - Y
               S01:08000DA8:  00
               S01:08000DA9:  66
               S01:08000DAA:  66
               S01:08000DAB:  66
               S01:08000DAC:  3C
               S01:08000DAD:  18
               S01:08000DAE:  18
               S01:08000DAF:  18
F00:0467       	.BYTE 0x00,0xFE,0x0E,0x1C,0x38,0x70,0xE0,0xFE	;57 - Z
               S01:08000DB0:  00
               S01:08000DB1:  FE
               S01:08000DB2:  0E
               S01:08000DB3:  1C
               S01:08000DB4:  38
               S01:08000DB5:  70
               S01:08000DB6:  E0
               S01:08000DB7:  FE
F00:0468       	.BYTE 0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x3C	;58 - [
               S01:08000DB8:  00
               S01:08000DB9:  3C
               S01:08000DBA:  30
               S01:08000DBB:  30
               S01:08000DBC:  30
               S01:08000DBD:  30
               S01:08000DBE:  30
               S01:08000DBF:  3C
F00:0469       	.BYTE 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01	;59 - \ 
               S01:08000DC0:  80
               S01:08000DC1:  40
               S01:08000DC2:  20
               S01:08000DC3:  10
               S01:08000DC4:  08
               S01:08000DC5:  04
               S01:08000DC6:  02
               S01:08000DC7:  01
F00:0470       	.BYTE 0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C	;60 - ]
               S01:08000DC8:  00
               S01:08000DC9:  3C
               S01:08000DCA:  0C
               S01:08000DCB:  0C
               S01:08000DCC:  0C
               S01:08000DCD:  0C
               S01:08000DCE:  0C
               S01:08000DCF:  3C
F00:0471       	.BYTE 0x00,0x38,0x6C,0x00,0x00,0x00,0x00,0x00	;61 - ^
               S01:08000DD0:  00
               S01:08000DD1:  38
               S01:08000DD2:  6C
               S01:08000DD3:  00
               S01:08000DD4:  00
               S01:08000DD5:  00
               S01:08000DD6:  00
               S01:08000DD7:  00
F00:0472       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE	;62 - _
               S01:08000DD8:  00
               S01:08000DD9:  00
               S01:08000DDA:  00
               S01:08000DDB:  00
               S01:08000DDC:  00
               S01:08000DDD:  00
               S01:08000DDE:  00
               S01:08000DDF:  FE
F00:0473       	.BYTE 0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00 	;63 - `
               S01:08000DE0:  00
               S01:08000DE1:  10
               S01:08000DE2:  08
               S01:08000DE3:  00
               S01:08000DE4:  00
               S01:08000DE5:  00
               S01:08000DE6:  00
               S01:08000DE7:  00
F00:0474       	.BYTE 0x00,0x00,0x00,0x7C,0x06,0x7E,0xC6,0x7E	;64 - a
               S01:08000DE8:  00
               S01:08000DE9:  00
               S01:08000DEA:  00
               S01:08000DEB:  7C
               S01:08000DEC:  06
               S01:08000DED:  7E
               S01:08000DEE:  C6
               S01:08000DEF:  7E
F00:0475       	.BYTE 0x00,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0x7C	;65 - b
               S01:08000DF0:  00
               S01:08000DF1:  C0
               S01:08000DF2:  C0
               S01:08000DF3:  FC
               S01:08000DF4:  C6
               S01:08000DF5:  C6
               S01:08000DF6:  C6
               S01:08000DF7:  7C
F00:0476       	.BYTE 0x00,0x00,0x00,0x7E,0xC0,0xC0,0xC0,0x7E	;66 - c
               S01:08000DF8:  00
               S01:08000DF9:  00
               S01:08000DFA:  00
               S01:08000DFB:  7E
               S01:08000DFC:  C0
               S01:08000DFD:  C0
               S01:08000DFE:  C0
               S01:08000DFF:  7E
F00:0477       	.BYTE 0x00,0x06,0x06,0x7E,0xC6,0xC6,0xC6,0x7E	;67 - d
               S01:08000E00:  00
               S01:08000E01:  06
               S01:08000E02:  06
               S01:08000E03:  7E
               S01:08000E04:  C6
               S01:08000E05:  C6
               S01:08000E06:  C6
               S01:08000E07:  7E
F00:0478       	.BYTE 0x00,0x00,0x00,0x7C,0xC6,0xFE,0xC0,0x7C	;68 - e
               S01:08000E08:  00
               S01:08000E09:  00
               S01:08000E0A:  00
               S01:08000E0B:  7C
               S01:08000E0C:  C6
               S01:08000E0D:  FE
               S01:08000E0E:  C0
               S01:08000E0F:  7C
F00:0479       	.BYTE 0x00,0x0E,0x18,0x7E,0x18,0x18,0x18,0x18	;69 - f
               S01:08000E10:  00
               S01:08000E11:  0E
               S01:08000E12:  18
               S01:08000E13:  7E
               S01:08000E14:  18
               S01:08000E15:  18
               S01:08000E16:  18
               S01:08000E17:  18
F00:0480       	.BYTE 0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x7C	;70 - g
               S01:08000E18:  00
               S01:08000E19:  00
               S01:08000E1A:  7E
               S01:08000E1B:  C6
               S01:08000E1C:  C6
               S01:08000E1D:  7E
               S01:08000E1E:  06
               S01:08000E1F:  7C
F00:0481       	.BYTE 0x00,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xC6	;71 - h
               S01:08000E20:  00
               S01:08000E21:  C0
               S01:08000E22:  C0
               S01:08000E23:  FC
               S01:08000E24:  C6
               S01:08000E25:  C6
               S01:08000E26:  C6
               S01:08000E27:  C6
F00:0482       	.BYTE 0x00,0x18,0x00,0x38,0x18,0x18,0x18,0x7E	;72 - i
               S01:08000E28:  00
               S01:08000E29:  18
               S01:08000E2A:  00
               S01:08000E2B:  38
               S01:08000E2C:  18
               S01:08000E2D:  18
               S01:08000E2E:  18
               S01:08000E2F:  7E
F00:0483       	.BYTE 0x00,0x0C,0x00,0x1C,0x0C,0x0C,0x0C,0x78	;73 - j
               S01:08000E30:  00
               S01:08000E31:  0C
               S01:08000E32:  00
               S01:08000E33:  1C
               S01:08000E34:  0C
               S01:08000E35:  0C
               S01:08000E36:  0C
               S01:08000E37:  78
F00:0484       	.BYTE 0x00,0xC0,0xC0,0xC6,0xCC,0xF8,0xCC,0xC6	;74 - k
               S01:08000E38:  00
               S01:08000E39:  C0
               S01:08000E3A:  C0
               S01:08000E3B:  C6
               S01:08000E3C:  CC
               S01:08000E3D:  F8
               S01:08000E3E:  CC
               S01:08000E3F:  C6
F00:0485       	.BYTE 0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x7E	;75 - l
               S01:08000E40:  00
               S01:08000E41:  38
               S01:08000E42:  18
               S01:08000E43:  18
               S01:08000E44:  18
               S01:08000E45:  18
               S01:08000E46:  18
               S01:08000E47:  7E
F00:0486       	.BYTE 0x00,0x00,0x00,0xFC,0xB6,0xB6,0xB6,0xB6	;76 - m
               S01:08000E48:  00
               S01:08000E49:  00
               S01:08000E4A:  00
               S01:08000E4B:  FC
               S01:08000E4C:  B6
               S01:08000E4D:  B6
               S01:08000E4E:  B6
               S01:08000E4F:  B6
F00:0487       	.BYTE 0x00,0x00,0x00,0xFC,0xC6,0xC6,0xC6,0xC6	;77 - n
               S01:08000E50:  00
               S01:08000E51:  00
               S01:08000E52:  00
               S01:08000E53:  FC
               S01:08000E54:  C6
               S01:08000E55:  C6
               S01:08000E56:  C6
               S01:08000E57:  C6
F00:0488       	.BYTE 0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C	;78 - o
               S01:08000E58:  00
               S01:08000E59:  00
               S01:08000E5A:  00
               S01:08000E5B:  7C
               S01:08000E5C:  C6
               S01:08000E5D:  C6
               S01:08000E5E:  C6
               S01:08000E5F:  7C
F00:0489       	.BYTE 0x00,0x00,0xFC,0xC6,0xC6,0xFC,0xC0,0xC0	;79 - p
               S01:08000E60:  00
               S01:08000E61:  00
               S01:08000E62:  FC
               S01:08000E63:  C6
               S01:08000E64:  C6
               S01:08000E65:  FC
               S01:08000E66:  C0
               S01:08000E67:  C0
F00:0490       	.BYTE 0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x06	;80 - q
               S01:08000E68:  00
               S01:08000E69:  00
               S01:08000E6A:  7E
               S01:08000E6B:  C6
               S01:08000E6C:  C6
               S01:08000E6D:  7E
               S01:08000E6E:  06
               S01:08000E6F:  06
F00:0491       	.BYTE 0x00,0x00,0x00,0x6E,0x70,0x60,0x60,0x60	;81 - r
               S01:08000E70:  00
               S01:08000E71:  00
               S01:08000E72:  00
               S01:08000E73:  6E
               S01:08000E74:  70
               S01:08000E75:  60
               S01:08000E76:  60
               S01:08000E77:  60
F00:0492       	.BYTE 0x00,0x00,0x00,0x7C,0xC0,0x7C,0x06,0xFC	;82 - s
               S01:08000E78:  00
               S01:08000E79:  00
               S01:08000E7A:  00
               S01:08000E7B:  7C
               S01:08000E7C:  C0
               S01:08000E7D:  7C
               S01:08000E7E:  06
               S01:08000E7F:  FC
F00:0493       	.BYTE 0x00,0x18,0x18,0x7E,0x18,0x18,0x18,0x18	;83 - t
               S01:08000E80:  00
               S01:08000E81:  18
               S01:08000E82:  18
               S01:08000E83:  7E
               S01:08000E84:  18
               S01:08000E85:  18
               S01:08000E86:  18
               S01:08000E87:  18
F00:0494       	.BYTE 0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0x7E	;84 - u
               S01:08000E88:  00
               S01:08000E89:  00
               S01:08000E8A:  00
               S01:08000E8B:  C6
               S01:08000E8C:  C6
               S01:08000E8D:  C6
               S01:08000E8E:  C6
               S01:08000E8F:  7E
F00:0495       	.BYTE 0x00,0x00,0x00,0x66,0x66,0x66,0x3C,0x18	;85 - v
               S01:08000E90:  00
               S01:08000E91:  00
               S01:08000E92:  00
               S01:08000E93:  66
               S01:08000E94:  66
               S01:08000E95:  66
               S01:08000E96:  3C
               S01:08000E97:  18
F00:0496       	.BYTE 0x00,0x00,0x00,0xD6,0xD6,0xD6,0xD6,0x6C	;86 - w
               S01:08000E98:  00
               S01:08000E99:  00
               S01:08000E9A:  00
               S01:08000E9B:  D6
               S01:08000E9C:  D6
               S01:08000E9D:  D6
               S01:08000E9E:  D6
               S01:08000E9F:  6C
F00:0497       	.BYTE 0x00,0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6	;87 - x
               S01:08000EA0:  00
               S01:08000EA1:  00
               S01:08000EA2:  00
               S01:08000EA3:  C6
               S01:08000EA4:  6C
               S01:08000EA5:  38
               S01:08000EA6:  6C
               S01:08000EA7:  C6
F00:0498       	.BYTE 0x00,0x00,0xC6,0xC6,0xC6,0x7E,0x06,0x7C	;88 - y
               S01:08000EA8:  00
               S01:08000EA9:  00
               S01:08000EAA:  C6
               S01:08000EAB:  C6
               S01:08000EAC:  C6
               S01:08000EAD:  7E
               S01:08000EAE:  06
               S01:08000EAF:  7C
F00:0499       	.BYTE 0x00,0x00,0x00,0xFE,0x1C,0x38,0x70,0xFE	;89 - z
               S01:08000EB0:  00
               S01:08000EB1:  00
               S01:08000EB2:  00
               S01:08000EB3:  FE
               S01:08000EB4:  1C
               S01:08000EB5:  38
               S01:08000EB6:  70
               S01:08000EB7:  FE
F00:0500       	.BYTE 0x00,0x0C,0x18,0x18,0x30,0x18,0x18,0x0C	;90 - {
               S01:08000EB8:  00
               S01:08000EB9:  0C
               S01:08000EBA:  18
               S01:08000EBB:  18
               S01:08000EBC:  30
               S01:08000EBD:  18
               S01:08000EBE:  18
               S01:08000EBF:  0C
F00:0501       	.BYTE 0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18	;91 - |
               S01:08000EC0:  00
               S01:08000EC1:  18
               S01:08000EC2:  18
               S01:08000EC3:  18
               S01:08000EC4:  18
               S01:08000EC5:  18
               S01:08000EC6:  18
               S01:08000EC7:  18
F00:0502       	.BYTE 0x00,0x30,0x18,0x18,0x0C,0x18,0x18,0x30	;92 - }
               S01:08000EC8:  00
               S01:08000EC9:  30
               S01:08000ECA:  18
               S01:08000ECB:  18
               S01:08000ECC:  0C
               S01:08000ECD:  18
               S01:08000ECE:  18
               S01:08000ECF:  30
F00:0503       	.BYTE 0x00,0x00,0x70,0xBA,0x1C,0x00,0x00,0x00	;93 - ~
               S01:08000ED0:  00
               S01:08000ED1:  00
               S01:08000ED2:  70
               S01:08000ED3:  BA
               S01:08000ED4:  1C
               S01:08000ED5:  00
               S01:08000ED6:  00
               S01:08000ED7:  00
F00:0504       	;.BYTE 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF


Sections:
S01  seg8000000


Sources:
F00  GBA_Drummond.asm


Symbols:
LineDone EXPR(134220744=0x8000bc8) UNUSED ABS 
DrawPixel EXPR(134220708=0x8000ba4) ABS 
WriteLine EXPR(134220688=0x8000b90) ABS 
BitmapFont EXPR(134220768=0x8000be0) ABS 
WriteChar EXPR(134220604=0x8000b3c) ABS 
WriteTextDone EXPR(134220600=0x8000b38) ABS 
RepeatWriteText EXPR(134220580=0x8000b24) ABS 
WriteText EXPR(134220572=0x8000b1c) UNUSED ABS 
NewLine EXPR(134220528=0x8000af0) UNUSED ABS 
SpriteNextPixel EXPR(134220440=0x8000a98) ABS 
SpriteNextLine EXPR(134220436=0x8000a94) ABS 
GetNextLine EXPR(134220416=0x8000a80) ABS 
GetScreenPos EXPR(134220388=0x8000a64) ABS 
FillScreen EXPR(134220372=0x8000a54) ABS 
ClearToColor EXPR(134220360=0x8000a48) ABS 
SpriteTest EXPR(134218276=0x8000224) ABS 
AsciiTest4 EXPR(134218260=0x8000214) ABS 
AsciiTestAddress4 EXPR(134218256=0x8000210) UNUSED ABS 
AsciiTest3 EXPR(134218212=0x80001e4) ABS 
AsciiTestAddress3 EXPR(134218208=0x80001e0) UNUSED ABS 
AsciiTest2 EXPR(134218164=0x80001b4) ABS 
AsciiTestAddress2 EXPR(134218160=0x80001b0) UNUSED ABS 
AsciiTest1 EXPR(134218128=0x8000190) ABS 
AsciiTestAddress1 EXPR(134218124=0x800018c) UNUSED ABS 
DrawSprite EXPR(134220424=0x8000a88) ABS 
SpriteTestAddress EXPR(134218272=0x8000220) ABS 
ReadInput EXPR(134220492=0x8000acc) ABS 
GameLoop EXPR(134218000=0x8000110) ABS 
ScreenInit EXPR(134220324=0x8000a24) ABS 
Main EXPR(134217960=0x80000e8) ABS 
BackgroundColor EXPR(49680=0xc210) 
MaskKey EXPR(64512=0xfc00) 
Key_LeftBump EXPR(512=0x200) UNUSED 
Key_RightBump EXPR(256=0x100) UNUSED 
Key_Down EXPR(128=0x80) 
Key_Up EXPR(64=0x40) 
Key_Left EXPR(32=0x20) 
Key_Right EXPR(16=0x10) 
Key_Start EXPR(8=0x8) UNUSED 
Key_Select EXPR(4=0x4) UNUSED 
Key_B EXPR(2=0x2) UNUSED 
Key_A EXPR(1=0x1) UNUSED 
InputLocation EXPR(67109168=0x4000130) 
VramBase EXPR(100663296=0x6000000) 
PlayerY EXPR(33554467=0x2000023) 
PlayerX EXPR(33554466=0x2000022) 
CursorY EXPR(33554465=0x2000021) 
CursorX EXPR(33554464=0x2000020) 
Ram EXPR(33554432=0x2000000) 
__VASM EXPR(0=0x0) INTERNAL 
BuildGBA EXPR(1=0x1) UNUSED 
vasm EXPR(1=0x1) UNUSED 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
