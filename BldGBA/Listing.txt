F00:0001       ;LITTLE ENDIAN
F00:0002       ;LITTLE ENDIAN
F00:0003       ;LITTLE ENDIAN
F00:0004       ;LITTLE ENDIAN
F00:0005       ;LITTLE ENDIAN
F00:0006       ;LITTLE ENDIAN
F00:0007       ;LITTLE ENDIAN
F00:0008       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0009       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0010       .EQU Ram, 0x02000000	;RAM on the GBA starts at 0x02000000, builds upwards, can store whatever we want whereever we want,
F00:0011       
F00:0012       .EQU CursorX, Ram+32	;32 bits past ram start
F00:0013       .EQU CursorY, Ram+33	;1 bit past CursorX
F00:0014       
F00:0015       .EQU VramBase, 0x06000000	;Base of VRAM, where address of data that is written to the screen starts
F00:0016       
F00:0017       .ORG 0x08000000	;GBA ROM (the cartridge) Address starts at 0x08000000
F00:0018       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0019       
F00:0020       .EQU InputLocation, 0x04000130	;Location in memory where input is stored
F00:0021       
F00:0022       ;OR these masks with data at input location to get input, returns 0 if pressed
F00:0023       .EQU Key_A, 			0b0000000000000001				
F00:0024       .EQU Key_B, 			0b0000000000000010
F00:0025       .EQU Key_Select, 		0b0000000000000100
F00:0026       .EQU Key_Start, 		0b0000000000001000
F00:0027       .EQU Key_RightBump, 	0b0000000000010000
F00:0028       .EQU Key_LeftBump, 		0b0000000000100000
F00:0029       .EQU Key_Up, 			0b0000000001000000
F00:0030       .EQU Key_Down, 			0b0000000010000000
F00:0031       .EQU Key_Right, 		0b0000000100000000
F00:0032       .EQU Key_Left, 			0b0000001000000000
F00:0033       
F00:0034       .EQU MaskKey, 			0b1111110000000000	;Mask out other bits
F00:0035       
F00:0036       .EQU BackgroundColor, 0b1100001000010000
F00:0037       
F00:0038       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0039       
F00:0040       B ProgramStart	;Branch to start of program
               S01:08000000:  38 00 00 EA
F00:0041       
F00:0042       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0043       ;GBA Header
F00:0044       ;004h    156   Nintendo Logo    (compressed bitmap, required!)
F00:0045       	.BYTE 0xC8,0x60,0x4F,0xE2,0x01,0x70,0x8F,0xE2,0x17,0xFF,0x2F,0xE1,0x12,0x4F,0x11,0x48     ; C
               S01:08000004:  C8
               S01:08000005:  60
               S01:08000006:  4F
               S01:08000007:  E2
               S01:08000008:  01
               S01:08000009:  70
               S01:0800000A:  8F
               S01:0800000B:  E2
               S01:0800000C:  17
               S01:0800000D:  FF
               S01:0800000E:  2F
               S01:0800000F:  E1
               S01:08000010:  12
               S01:08000011:  4F
               S01:08000012:  11
               S01:08000013:  48
F00:0046       	.BYTE 0x12,0x4C,0x20,0x60,0x64,0x60,0x7C,0x62,0x30,0x1C,0x39,0x1C,0x10,0x4A,0x00,0xF0     ; D
               S01:08000014:  12
               S01:08000015:  4C
               S01:08000016:  20
               S01:08000017:  60
               S01:08000018:  64
               S01:08000019:  60
               S01:0800001A:  7C
               S01:0800001B:  62
               S01:0800001C:  30
               S01:0800001D:  1C
               S01:0800001E:  39
               S01:0800001F:  1C
               S01:08000020:  10
               S01:08000021:  4A
               S01:08000022:  00
               S01:08000023:  F0
F00:0047           .BYTE 0x14,0xF8,0x30,0x6A,0x80,0x19,0xB1,0x6A,0xF2,0x6A,0x00,0xF0,0x0B,0xF8,0x30,0x6B     ; E
               S01:08000024:  14
               S01:08000025:  F8
               S01:08000026:  30
               S01:08000027:  6A
               S01:08000028:  80
               S01:08000029:  19
               S01:0800002A:  B1
               S01:0800002B:  6A
               S01:0800002C:  F2
               S01:0800002D:  6A
               S01:0800002E:  00
               S01:0800002F:  F0
               S01:08000030:  0B
               S01:08000031:  F8
               S01:08000032:  30
               S01:08000033:  6B
F00:0048           .BYTE 0x80,0x19,0xB1,0x6B,0xF2,0x6B,0x00,0xF0,0x08,0xF8,0x70,0x6A,0x77,0x6B,0x07,0x4C     ; F
               S01:08000034:  80
               S01:08000035:  19
               S01:08000036:  B1
               S01:08000037:  6B
               S01:08000038:  F2
               S01:08000039:  6B
               S01:0800003A:  00
               S01:0800003B:  F0
               S01:0800003C:  08
               S01:0800003D:  F8
               S01:0800003E:  70
               S01:0800003F:  6A
               S01:08000040:  77
               S01:08000041:  6B
               S01:08000042:  07
               S01:08000043:  4C
F00:0049           .BYTE 0x60,0x60,0x38,0x47,0x07,0x4B,0xD2,0x18,0x9A,0x43,0x07,0x4B,0x92,0x08,0xD2,0x18     ; 10
               S01:08000044:  60
               S01:08000045:  60
               S01:08000046:  38
               S01:08000047:  47
               S01:08000048:  07
               S01:08000049:  4B
               S01:0800004A:  D2
               S01:0800004B:  18
               S01:0800004C:  9A
               S01:0800004D:  43
               S01:0800004E:  07
               S01:0800004F:  4B
               S01:08000050:  92
               S01:08000051:  08
               S01:08000052:  D2
               S01:08000053:  18
F00:0050           .BYTE 0x0C,0xDF,0xF7,0x46,0x04,0xF0,0x1F,0xE5,0x00,0xFE,0x7F,0x02,0xF0,0xFF,0x7F,0x02     ; 11
               S01:08000054:  0C
               S01:08000055:  DF
               S01:08000056:  F7
               S01:08000057:  46
               S01:08000058:  04
               S01:08000059:  F0
               S01:0800005A:  1F
               S01:0800005B:  E5
               S01:0800005C:  00
               S01:0800005D:  FE
               S01:0800005E:  7F
               S01:0800005F:  02
               S01:08000060:  F0
               S01:08000061:  FF
               S01:08000062:  7F
               S01:08000063:  02
F00:0051           .BYTE 0xF0,0x01,0x00,0x00,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00     ; 12
               S01:08000064:  F0
               S01:08000065:  01
               S01:08000066:  00
               S01:08000067:  00
               S01:08000068:  FF
               S01:08000069:  01
               S01:0800006A:  00
               S01:0800006B:  00
               S01:0800006C:  00
               S01:0800006D:  00
               S01:0800006E:  00
               S01:0800006F:  04
               S01:08000070:  00
               S01:08000071:  00
               S01:08000072:  00
               S01:08000073:  00
F00:0052           .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ; 13
               S01:08000074:  00
               S01:08000075:  00
               S01:08000076:  00
               S01:08000077:  00
               S01:08000078:  00
               S01:08000079:  00
               S01:0800007A:  00
               S01:0800007B:  00
               S01:0800007C:  00
               S01:0800007D:  00
               S01:0800007E:  00
               S01:0800007F:  00
               S01:08000080:  00
               S01:08000081:  00
               S01:08000082:  00
               S01:08000083:  00
F00:0053           .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ; 14
               S01:08000084:  00
               S01:08000085:  00
               S01:08000086:  00
               S01:08000087:  00
               S01:08000088:  00
               S01:08000089:  00
               S01:0800008A:  00
               S01:0800008B:  00
               S01:0800008C:  00
               S01:0800008D:  00
               S01:0800008E:  00
               S01:0800008F:  00
               S01:08000090:  00
               S01:08000091:  00
               S01:08000092:  00
               S01:08000093:  00
F00:0054       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x9E,0x7B,0xEB     ; 15
               S01:08000094:  00
               S01:08000095:  00
               S01:08000096:  00
               S01:08000097:  00
               S01:08000098:  00
               S01:08000099:  00
               S01:0800009A:  00
               S01:0800009B:  00
               S01:0800009C:  00
               S01:0800009D:  00
               S01:0800009E:  00
               S01:0800009F:  00
               S01:080000A0:  1A
               S01:080000A1:  9E
               S01:080000A2:  7B
               S01:080000A3:  EB
F00:0055       	
F00:0056           ;		123456789012
F00:0057           .ASCII "DRUMMOND.NET";0A0h    12    Game Title       (uppercase ascii, max 12 characters)	
               S01:080000A4:  44 52 55 4D 4D 4F 4E 44 2E 4E 45 54
F00:0058           .ASCII "0000"	;0ACh    4     Game Code        (uppercase ascii, 4 characters)
               S01:080000B0:  30 30 30 30
F00:0059           .ASCII "00"		;0B0h    2     Maker Code       (uppercase ascii, 2 characters)
               S01:080000B4:  30 30
F00:0060       	.BYTE 0x96		;0B2h    1     Fixed value      (must be 96h, required!)
               S01:080000B6:  96
F00:0061       	.BYTE 0			;0B3h    1     Main unit code   (00h for current GBA models)
               S01:080000B7:  00
F00:0062       	.BYTE 0			;0B4h    1     Device type      (usually 00h) (bit7=DACS/debug related)
               S01:080000B8:  00
F00:0063       	.SPACE 7		;0B5h    7     Reserved Area    (should be zero filled)
F00:0064       	.BYTE 0			;0BCh    1     Software version (usually 00h)
               S01:080000C0:  00
F00:0065       	.BYTE 0			;0BDh    1     Complement check (header checksum, required!)
               S01:080000C1:  00
F00:0066       	.WORD 0			;0BEh    2     Reserved Area    (should be zero filled)
               S01:080000C2:  00 00
F00:0067       	.LONG 0			;0C0h    4     RAM Entry Point  (32bit ARM branch opcode, eg. "B ram_start")
               S01:080000C4:  00 00 00 00
F00:0068       	.BYTE 0			;0C4h    1     Boot mode        (init as 00h - BIOS overwrites this value!)
               S01:080000C8:  00
F00:0069       	.BYTE 0			;0C5h    1     Slave ID Number  (init as 00h - BIOS overwrites this value!)
               S01:080000C9:  00
F00:0070       	.SPACE 26		;0C6h    26    Not used         (seems to be unused)
F00:0071       	.LONG 0			;0E0h    4     JOYBUS Entry Pt. (32bit ARM branch opcode, eg. "B joy_start")
               S01:080000E4:  00 00 00 00
F00:0072       
F00:0073       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0074       
F00:0075       ProgramStart:
F00:0076       	MOV sp, #0x03000000		;Initialize Stack Pointer, starts at memory address 3000000 on GBA
               S01:080000E8:  03 D4 A0 E3
F00:0077       	
F00:0078       	BL ScreenInit
               S01:080000EC:  2F 00 00 EB
F00:0079       	
F00:0080       	;LDR r1, AsciiTestAddress1	;Load test address into r1, parameter 1	
F00:0081       	;BL WriteText
F00:0082       	;BL NewLine
F00:0083       	
F00:0084       	;LDR r1, AsciiTestAddress2	;Load test address into r1, parameter 1	
F00:0085       	;BL WriteText
F00:0086       	;BL NewLine
F00:0087       	
F00:0088       	;LDR r1, AsciiTestAddress3	;Load test address into r1, parameter 1	
F00:0089       	;BL WriteText
F00:0090       	;BL NewLine
F00:0091       	
F00:0092       	;LDR r1, AsciiTestAddress4	;Load test address into r1, parameter 1	
F00:0093       	;BL WriteText
F00:0094       	;BL NewLine
F00:0095       	
F00:0096       GameLoop:
F00:0097       	MOV r1, #Key_Up					;Pass up key mask to input function
               S01:080000F0:  40 10 A0 E3
F00:0098       	BL ReadInput					;Call function, value returned in r0
               S01:080000F4:  3D 00 00 EB
F00:0099       	
F00:0100       	CMPS r0, #0						;Set flag register to check input
               S01:080000F8:  00 00 50 E3
F00:0101       	MOVE r1, #0b1111110000000000	;Turn blue if up key pressed
               S01:080000FC:  3F 1B A0 E3
F00:0102       	MOVNE r1, #BackgroundColor		;Stay background gray otherwise
               S01:08000100:  C2 1C A0 13 10 10 81 13
F00:0103       	
F00:0104       	BL ClearToColor					;Update color
               S01:08000108:  31 00 00 EB
F00:0105       	
F00:0106       	B GameLoop
               S01:0800010C:  F7 FF FF EA
F00:0107       	
F00:0108       AsciiTestAddress1:
F00:0109       	.LONG AsciiTest1	;Address of Ascii string
               S01:08000110:  14 01 00 08
F00:0110       AsciiTest1:
F00:0111       	.BYTE " !\"#$%&'()*+,-./0123456789:;<=",255	;All characters in font, 255 terminated
               S01:08000114:  20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F
               S01:08000124:  30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D
               S01:08000132:  FF
F00:0112       	;.BYTE "Test f",255
F00:0113       	.ALIGN 4	;Align to 4 bytes
F00:0114       	
F00:0115       AsciiTestAddress2:
F00:0116       	.LONG AsciiTest2
               S01:08000140:  44 01 00 08
F00:0117       AsciiTest2:
F00:0118       	.BYTE ">?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[",255
               S01:08000144:  3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D
               S01:08000154:  4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B
               S01:08000162:  FF
F00:0119       	.ALIGN 4
F00:0120       	
F00:0121       AsciiTestAddress3:
F00:0122       	.LONG AsciiTest3
               S01:08000170:  74 01 00 08
F00:0123       AsciiTest3:
F00:0124       	.BYTE "\\]^_`abcdefghijklmnopqrstuvwxy",255
               S01:08000174:  5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B
               S01:08000184:  6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79
               S01:08000192:  FF
F00:0125       	.ALIGN 4
F00:0126       	
F00:0127       AsciiTestAddress4:
F00:0128       	.LONG AsciiTest4
               S01:080001A0:  A4 01 00 08
F00:0129       AsciiTest4:
F00:0130       	.BYTE "z{|}~",255
               S01:080001A4:  7A 7B 7C 7D 7E
               S01:080001A9:  FF
F00:0131       	.ALIGN 4
F00:0132       	
F00:0133       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0134       
F00:0135       ScreenInit:
F00:0136       	STMFD sp!, {r0-r12, lr}
               S01:080001B0:  FF 5F 2D E9
F00:0137       		;Actual screen initialization, tells console which mode we're in
F00:0138       		MOV r3, #0x04000000		;DISPCNT - LCD Control
               S01:080001B4:  01 33 A0 E3
F00:0139       		MOV r2, #0x403			;4 = Layer 2 on, 3 = ScreenMode 3 
               S01:080001B8:  01 2B A0 E3 03 20 82 E3
F00:0140       		STR r2, [r3]			;Store layer and screen mode in LCD Control address
               S01:080001C0:  00 20 83 E5
F00:0141       		
F00:0142       		MOV r0, #BackgroundColor		;Color to fill
               S01:080001C4:  C2 0C A0 E3 10 00 80 E3
F00:0143       		BL ClearToColor
               S01:080001CC:  00 00 00 EB
F00:0144       	LDMFD sp!, {r0-r12, pc}
               S01:080001D0:  FF 9F BD E8
F00:0145       	
F00:0146       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0147       ;r1 = color halfword
F00:0148       ClearToColor:
F00:0149       	STMFD sp!, {r1-r12, lr}
               S01:080001D4:  FE 5F 2D E9
F00:0150       		MOV r3, #VramBase	;Start with vram base
               S01:080001D8:  06 34 A0 E3
F00:0151       		MOV r2, #240*160	;Take number of pixels in screen
               S01:080001DC:  96 2C A0 E3
F00:0152       		
F00:0153       FillScreen:
F00:0154       		STRH r1, [r3], #2	;Store halfword (color) into position in vram and increment it by 2 bytes (to next pixel)
               S01:080001E0:  B2 10 C3 E0
F00:0155       		SUBS r2, r2, #1		;Decrement and set signs of loop counter
               S01:080001E4:  01 20 52 E2
F00:0156       		BNE FillScreen		;Loop to fill screen
               S01:080001E8:  FC FF FF 1A
F00:0157       		
F00:0158       	LDMFD sp!, {r1-r12, pc}
               S01:080001EC:  FE 9F BD E8
F00:0159       	
F00:0160       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0161       ;Use E conditional to check if pressed
F00:0162       ;r1 = key mask
F00:0163       ;Returns keymask in r0
F00:0164       ReadInput:
F00:0165       	STMFD sp!, {r1-r12, lr}
               S01:080001F0:  FE 5F 2D E9
F00:0166       		EOR r0, r0, r0
               S01:080001F4:  00 00 20 E0
F00:0167       		MOV r2, #InputLocation	;Input memory location
               S01:080001F8:  13 2E A0 E3 01 23 82 E3
F00:0168       		LDRH r0, [r2]			;Get value of input, (1 = not pressed)
               S01:08000200:  B0 00 52 E1
F00:0169       		MOV r2, #MaskKey		;Mask out superfluous bits
               S01:08000204:  3F 2B A0 E3
F00:0170       		BIC r0, r0, r2			;Inverse AND the register to only keep input bits (last 10 bits)
               S01:08000208:  02 00 C0 E1
F00:0171       		AND r0, r0, r1			;AND return register with input bits with the passed key mask
               S01:0800020C:  01 00 00 E0
F00:0172       	LDMFD sp!, {r1-r12, pc}
               S01:08000210:  FE 9F BD E8
F00:0173       
F00:0174       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0175       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0176       NewLine:
F00:0177       	STMFD sp!, {r0-r12, lr}	;Store stack pointer, registers 0-12, and link register on stack so we don't lose info from the
               S01:08000214:  FF 5F 2D E9
F00:0178       		MOV r0, #CursorX	;Get address of cursor x
               S01:08000218:  02 04 A0 E3 20 00 80 E3
F00:0179       		EOR r1, r1, r1		;Clear r1
               S01:08000220:  01 10 21 E0
F00:0180       		STRB r1, [r0]		;Store 0 from r1 in CursorX, move cursor back to left side of screen
               S01:08000224:  00 10 C0 E5
F00:0181       		
F00:0182       		MOV r0, #CursorY	;Get Y address
               S01:08000228:  02 04 A0 E3 21 00 80 E3
F00:0183       		LDRB r1, [r0]		;Store CursorY valye in r1
               S01:08000230:  00 10 D0 E5
F00:0184       		ADD r1, r1, #1		;Add 1 to CursorY
               S01:08000234:  01 10 81 E2
F00:0185       		STRB r1, [r0]		;Store the incremented CursorY vlaue in CursorY, moves cursor down
               S01:08000238:  00 10 C0 E5
F00:0186       	LDMFD sp!, {r0-r12, pc}	;Load registers from stack, put link register in program counter to return
               S01:0800023C:  FF 9F BD E8
F00:0187       
F00:0188       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0189       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0190       ;Comments added by me, Dillon Drummond
F00:0191       ;Some changes made
F00:0192       ;Paramters: r1 = string address
F00:0193       WriteText:
F00:0194       	STMFD sp!, {r0-r12, lr}
               S01:08000240:  FF 5F 2D E9
F00:0195       		MOV r2, r1			;Store parameter in temp variable so new parameter can be passed to WriteChar
               S01:08000244:  01 20 A0 E1
F00:0196       		
F00:0197       RepeatWriteText:
F00:0198       		LDRB r1, [r2], #1 	;Load byte then shift by 1
               S01:08000248:  01 10 D2 E4
F00:0199       		CMPS r1, #255		;Check if char is null terminator
               S01:0800024C:  FF 00 51 E3
F00:0200       		BEQ WriteTextDone	;If null terminator, exit
               S01:08000250:  01 00 00 0A
F00:0201       		BL WriteChar		;Otherwise, write character
               S01:08000254:  01 00 00 EB
F00:0202       		B RepeatWriteText	;Go back to begining of this block and check if there is another character or if at null terminator
               S01:08000258:  FA FF FF EA
F00:0203       	
F00:0204       WriteTextDone:
F00:0205       	LDMFD sp!, {r0-r12, pc}
               S01:0800025C:  FF 9F BD E8
F00:0206       	
F00:0207       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0208       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0209       ;Comments added by me, Dillon Drummond
F00:0210       ;r1 = character to write
F00:0211       WriteChar:
F00:0212       	STMFD sp!, {r0-r12, lr}	;Store registers and link register
               S01:08000260:  FF 5F 2D E9
F00:0213       		;Clear r4 and r5
F00:0214       		EOR r4, r4, r4
               S01:08000264:  04 40 24 E0
F00:0215       		EOR r5, r5, r5
               S01:08000268:  05 50 25 E0
F00:0216       		
F00:0217       		;Loading address of cursor x and y then loading values into r4 and r5
F00:0218       		MOV r3, #CursorX
               S01:0800026C:  02 34 A0 E3 20 30 83 E3
F00:0219       		LDRB r4, [r3]
               S01:08000274:  00 40 D3 E5
F00:0220       		MOV r3, #CursorY
               S01:08000278:  02 34 A0 E3 21 30 83 E3
F00:0221       		LDRB r5, [r3]
               S01:08000280:  00 50 D3 E5
F00:0222       		
F00:0223       		;r4 = cursor x position, r5 = cursor y position
F00:0224       		
F00:0225       		MOV r3, #VramBase	;Load VRAM base address in, addresses after this point will modify screen, 2 bytes, half word, 16 bi
               S01:08000284:  06 34 A0 E3
F00:0226       		
F00:0227       		;Each char is 8 x 8 pixels
F00:0228       		;Each pixel is 2 bytes
F00:0229       		;8 lines of 16 bytes
F00:0230       		MOV r6, #16		;Bytes in a line of character
               S01:08000288:  10 60 A0 E3
F00:0231       		MUL r2, r4, r6	;Multiply cursor x position by 16
               S01:0800028C:  94 06 02 E0
F00:0232       		ADD r3, r3, r2	;Add that position to r2 so we are at that x position in VRAM
               S01:08000290:  02 30 83 E0
F00:0233       		
F00:0234       		MOV r4, #240*8*2	;240 pixels per row, 8 lines per char, 2 bytes per pixel, (no longer need cursor x position, can writ
               S01:08000294:  0F 4C A0 E3
F00:0235       		MUL r2, r5, r4		;cursor y position * bytes per char row (8 screen lines, 240 pixels per line, 2 bytes per pixel)
               S01:08000298:  95 04 02 E0
F00:0236       		ADD r3, r3, r2		;Add number of bytes to move over in x direction (r3) and number of bytes to move down in the y direct
               S01:0800029C:  02 30 83 E0
F00:0237       		
F00:0238       		;I added this, could potentially cause problems
F00:0239       		;Within each 8x8 space for chars, they are offset to the right by one pixel for some reason.  Since r3 is the location
F00:0240       		;;;;;;;;;;;;;;;;;;;;;;;
F00:0241       		SUB r3, r3, #2	;Subtract 1 byte from position, solves 1 byte right offset within each char space, may have something t
               S01:080002A0:  02 30 43 E2
F00:0242       		;;;;;;;;;;;;;;;;;;;;;;;
F00:0243       		
F00:0244       		ADR r4,BitmapFont 	;Load address of font into r4
               S01:080002A4:  58 40 8F E2
F00:0245       		
F00:0246       		SUB r1,r1,#32			;Subtract 32 from value in first paramter 
               S01:080002A8:  20 10 41 E2
F00:0247       		ADD r4,r4,r1,asl #3		;Add the value to the bitmap font and shift left 3 to multiply by 8 and get address of the passed
               S01:080002AC:  81 41 84 E0
F00:0248       		
F00:0249       		MOV r10,#8			;Loop counter for lines
               S01:080002B0:  08 A0 A0 E3
F00:0250       WriteLine:
F00:0251       		MOV r7,#8 			;Loop counter for pixels
               S01:080002B4:  08 70 A0 E3
F00:0252       		LDRB r8,[r4],#1				;Load bitmap font value into r8
               S01:080002B8:  01 80 D4 E4
F00:0253       		MOV r9,#0b100000000			;Bitmask gets shifted over 1 through each loop
               S01:080002BC:  01 9C A0 E3
F00:0254       				
F00:0255       		MOV r2, #0b1111111101000000; Color: ABBBBBGGGGGRRRRR	A=Alpha
               S01:080002C0:  FF 2C A0 E3 40 20 82 E3
F00:0256       DrawPixel:
F00:0257       		TST r8,r9			;Test r8 and r9, CMP but with AND function, uses bitmask on bitmap font to check if current pixel in r3 sh
               S01:080002C8:  09 00 18 E1
F00:0258       		STRNEH r2,[r3]		;SToRe if Not Equal Halfword, stores halfword if test is not equal, sets pixel at r3 to the color in r
               S01:080002CC:  B0 20 43 11
F00:0259       		ADD r3,r3,#2		;Increment r3 by 1 byte
               S01:080002D0:  02 30 83 E2
F00:0260       		MOV r9,r9,ror #1	;Rotate bitmask (0b10000000 checks leftmost pixel, 0b01000000 checks the next one, etc.)
               S01:080002D4:  E9 90 A0 E1
F00:0261       		SUBS r7,r7,#1		;Decrement loop counter for pixels, set signs to check if after 8 pixels
               S01:080002D8:  01 70 57 E2
F00:0262       		BNE DrawPixel		;Loop for 8 pixels, until zero flag is set
               S01:080002DC:  F9 FF FF 1A
F00:0263       		
F00:0264       		ADD r3,r3,#480-16	;240 pixels * 2 bytes per pixel - 16 
               S01:080002E0:  1D 3E 83 E2
F00:0265       		SUBS r10,r10,#1		;Decrement loop counter for lines, set signs to see if after 8 lines	
               S01:080002E4:  01 A0 5A E2
F00:0266       		BNE WriteLine		;If zeor flag set, exit.  Otherwise, repeat, go to next line
               S01:080002E8:  F1 FF FF 1A
F00:0267       LineDone:	
F00:0268       		MOV r3,#CursorX		;Get CursorX address
               S01:080002EC:  02 34 A0 E3 20 30 83 E3
F00:0269       		LDRB r1,[r3]		;Get CursorX value
               S01:080002F4:  00 10 D3 E5
F00:0270       		ADD r1,r1,#1		;Increment cursor by 1 position
               S01:080002F8:  01 10 81 E2
F00:0271       		STRB r1,[r3]		;Store incremented value back in address
               S01:080002FC:  00 10 C3 E5
F00:0272       		
F00:0273       	LDMFD sp!, {r0-r12, pc}	;Return
               S01:08000300:  FF 9F BD E8
F00:0274       	
F00:0275       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0276       
F00:0277       ;Starts at ASCII number 32, simplifying by starting at 0
F00:0278       ;I translated the Presst Start 2P Google Font into 8-tuples of byte sized hex codes
F00:0279       ;This effectively defines an 8x8 bitmap of a character
F00:0280       ;Method learned from https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0281       BitmapFont:
F00:0282       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	;0 - Space
               S01:08000304:  00
               S01:08000305:  00
               S01:08000306:  00
               S01:08000307:  00
               S01:08000308:  00
               S01:08000309:  00
               S01:0800030A:  00
               S01:0800030B:  00
F00:0283       	.BYTE 0x70,0x70,0x70,0x60,0x60,0x00,0x60,0x00	;1 - !
               S01:0800030C:  70
               S01:0800030D:  70
               S01:0800030E:  70
               S01:0800030F:  60
               S01:08000310:  60
               S01:08000311:  00
               S01:08000312:  60
               S01:08000313:  00
F00:0284       	.BYTE 0x00,0x66,0x66,0x66,0x00,0x00,0x00,0x00	;2 - "
               S01:08000314:  00
               S01:08000315:  66
               S01:08000316:  66
               S01:08000317:  66
               S01:08000318:  00
               S01:08000319:  00
               S01:0800031A:  00
               S01:0800031B:  00
F00:0285       	.BYTE 0x00,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C	;3 - #
               S01:0800031C:  00
               S01:0800031D:  6C
               S01:0800031E:  FE
               S01:0800031F:  6C
               S01:08000320:  6C
               S01:08000321:  6C
               S01:08000322:  FE
               S01:08000323:  6C
F00:0286       	.BYTE 0x00,0x10,0x7C,0xD0,0x7C,0x16,0xFC,0x10	;4 - $
               S01:08000324:  00
               S01:08000325:  10
               S01:08000326:  7C
               S01:08000327:  D0
               S01:08000328:  7C
               S01:08000329:  16
               S01:0800032A:  FC
               S01:0800032B:  10
F00:0287       	.BYTE 0x00,0x62,0xA4,0xC8,0x10,0x26,0x4A,0x8C	;5 - %
               S01:0800032C:  00
               S01:0800032D:  62
               S01:0800032E:  A4
               S01:0800032F:  C8
               S01:08000330:  10
               S01:08000331:  26
               S01:08000332:  4A
               S01:08000333:  8C
F00:0288       	.BYTE 0x00,0x70,0xD8,0xD8,0x70,0xDA,0xCC,0x7E	;6 - &
               S01:08000334:  00
               S01:08000335:  70
               S01:08000336:  D8
               S01:08000337:  D8
               S01:08000338:  70
               S01:08000339:  DA
               S01:0800033A:  CC
               S01:0800033B:  7E
F00:0289       	.BYTE 0x00,0x30,0x30,0x60,0x00,0x00,0x00,0x00	;7 - '
               S01:0800033C:  00
               S01:0800033D:  30
               S01:0800033E:  30
               S01:0800033F:  60
               S01:08000340:  00
               S01:08000341:  00
               S01:08000342:  00
               S01:08000343:  00
F00:0290       	.BYTE 0x00,0x0C,0x18,0x30,0x30,0x30,0x18,0x0C	;8 - (
               S01:08000344:  00
               S01:08000345:  0C
               S01:08000346:  18
               S01:08000347:  30
               S01:08000348:  30
               S01:08000349:  30
               S01:0800034A:  18
               S01:0800034B:  0C
F00:0291       	.BYTE 0x00,0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30	;9 - )
               S01:0800034C:  00
               S01:0800034D:  30
               S01:0800034E:  18
               S01:0800034F:  0C
               S01:08000350:  0C
               S01:08000351:  0C
               S01:08000352:  18
               S01:08000353:  30
F00:0292       	.BYTE 0x00,0x6C,0x38,0xFE,0x38,0x6C,0x00,0x00	;10 - *
               S01:08000354:  00
               S01:08000355:  6C
               S01:08000356:  38
               S01:08000357:  FE
               S01:08000358:  38
               S01:08000359:  6C
               S01:0800035A:  00
               S01:0800035B:  00
F00:0293       	.BYTE 0x00,0x18,0x18,0x7E,0x7E,0x18,0x18,0x00	;11 - +
               S01:0800035C:  00
               S01:0800035D:  18
               S01:0800035E:  18
               S01:0800035F:  7E
               S01:08000360:  7E
               S01:08000361:  18
               S01:08000362:  18
               S01:08000363:  00
F00:0294       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x60	;12 - ,
               S01:08000364:  00
               S01:08000365:  00
               S01:08000366:  00
               S01:08000367:  00
               S01:08000368:  00
               S01:08000369:  30
               S01:0800036A:  30
               S01:0800036B:  60
F00:0295       	.BYTE 0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00	;12 - -
               S01:0800036C:  00
               S01:0800036D:  00
               S01:0800036E:  00
               S01:0800036F:  3C
               S01:08000370:  00
               S01:08000371:  00
               S01:08000372:  00
               S01:08000373:  00
F00:0296       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30	;13 - .
               S01:08000374:  00
               S01:08000375:  00
               S01:08000376:  00
               S01:08000377:  00
               S01:08000378:  00
               S01:08000379:  00
               S01:0800037A:  30
               S01:0800037B:  30
F00:0297       	.BYTE 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80	;14 - /
               S01:0800037C:  01
               S01:0800037D:  02
               S01:0800037E:  04
               S01:0800037F:  08
               S01:08000380:  10
               S01:08000381:  20
               S01:08000382:  40
               S01:08000383:  80
F00:0298       	.BYTE 0x38,0x4C,0xC6,0xC6,0xC6,0xC6,0x64,0x38	;15 - 0
               S01:08000384:  38
               S01:08000385:  4C
               S01:08000386:  C6
               S01:08000387:  C6
               S01:08000388:  C6
               S01:08000389:  C6
               S01:0800038A:  64
               S01:0800038B:  38
F00:0299       	.BYTE 0x00,0x18,0x38,0x18,0x18,0x18,0x18,0x7E	;16 - 1
               S01:0800038C:  00
               S01:0800038D:  18
               S01:0800038E:  38
               S01:0800038F:  18
               S01:08000390:  18
               S01:08000391:  18
               S01:08000392:  18
               S01:08000393:  7E
F00:0300       	.BYTE 0x00,0x7C,0xC6,0x0E,0x3C,0x78,0xE0,0xFE	;17 - 2
               S01:08000394:  00
               S01:08000395:  7C
               S01:08000396:  C6
               S01:08000397:  0E
               S01:08000398:  3C
               S01:08000399:  78
               S01:0800039A:  E0
               S01:0800039B:  FE
F00:0301       	.BYTE 0x00,0x7E,0x0C,0x18,0x3C,0x06,0xC6,0x7C	;18 - 3
               S01:0800039C:  00
               S01:0800039D:  7E
               S01:0800039E:  0C
               S01:0800039F:  18
               S01:080003A0:  3C
               S01:080003A1:  06
               S01:080003A2:  C6
               S01:080003A3:  7C
F00:0302       	.BYTE 0x00,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C	;19 - 4
               S01:080003A4:  00
               S01:080003A5:  1C
               S01:080003A6:  3C
               S01:080003A7:  6C
               S01:080003A8:  CC
               S01:080003A9:  FE
               S01:080003AA:  0C
               S01:080003AB:  0C
F00:0303       	.BYTE 0x00,0xFC,0xC0,0xFC,0x06,0x06,0xC6,0x7C	;20 - 5
               S01:080003AC:  00
               S01:080003AD:  FC
               S01:080003AE:  C0
               S01:080003AF:  FC
               S01:080003B0:  06
               S01:080003B1:  06
               S01:080003B2:  C6
               S01:080003B3:  7C
F00:0304       	.BYTE 0x00,0x3C,0x60,0xC0,0xFC,0xC6,0xC6,0x7C	;21 - 6
               S01:080003B4:  00
               S01:080003B5:  3C
               S01:080003B6:  60
               S01:080003B7:  C0
               S01:080003B8:  FC
               S01:080003B9:  C6
               S01:080003BA:  C6
               S01:080003BB:  7C
F00:0305       	.BYTE 0x00,0xFE,0xC6,0x0C,0x18,0x30,0x30,0x30	;22 - 7
               S01:080003BC:  00
               S01:080003BD:  FE
               S01:080003BE:  C6
               S01:080003BF:  0C
               S01:080003C0:  18
               S01:080003C1:  30
               S01:080003C2:  30
               S01:080003C3:  30
F00:0306       	.BYTE 0x00,0x78,0xC4,0xE4,0x78,0x9E,0x86,0x7C	;23 - 8
               S01:080003C4:  00
               S01:080003C5:  78
               S01:080003C6:  C4
               S01:080003C7:  E4
               S01:080003C8:  78
               S01:080003C9:  9E
               S01:080003CA:  86
               S01:080003CB:  7C
F00:0307       	.BYTE 0x00,0x7C,0xC6,0xC6,0x7E,0x06,0x0C,0x78	;24 - 9
               S01:080003CC:  00
               S01:080003CD:  7C
               S01:080003CE:  C6
               S01:080003CF:  C6
               S01:080003D0:  7E
               S01:080003D1:  06
               S01:080003D2:  0C
               S01:080003D3:  78
F00:0308       	.BYTE 0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00	;25 - :
               S01:080003D4:  00
               S01:080003D5:  30
               S01:080003D6:  30
               S01:080003D7:  00
               S01:080003D8:  00
               S01:080003D9:  30
               S01:080003DA:  30
               S01:080003DB:  00
F00:0309       	.BYTE 0x00,0x30,0x30,0x00,0x30,0x30,0x60,0x00	;26 - ;
               S01:080003DC:  00
               S01:080003DD:  30
               S01:080003DE:  30
               S01:080003DF:  00
               S01:080003E0:  30
               S01:080003E1:  30
               S01:080003E2:  60
               S01:080003E3:  00
F00:0310       	.BYTE 0x00,0x0C,0x18,0x30,0x18,0x0C,0x00,0x00	;27 - <
               S01:080003E4:  00
               S01:080003E5:  0C
               S01:080003E6:  18
               S01:080003E7:  30
               S01:080003E8:  18
               S01:080003E9:  0C
               S01:080003EA:  00
               S01:080003EB:  00
F00:0311       	.BYTE 0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00	;28 - =
               S01:080003EC:  00
               S01:080003ED:  00
               S01:080003EE:  7E
               S01:080003EF:  00
               S01:080003F0:  7E
               S01:080003F1:  00
               S01:080003F2:  00
               S01:080003F3:  00
F00:0312       	.BYTE 0x00,0x30,0x18,0x0C,0x18,0x30,0x00,0x00	;29 - >
               S01:080003F4:  00
               S01:080003F5:  30
               S01:080003F6:  18
               S01:080003F7:  0C
               S01:080003F8:  18
               S01:080003F9:  30
               S01:080003FA:  00
               S01:080003FB:  00
F00:0313       	.BYTE 0x00,0x7C,0xFE,0xC6,0x0C,0x38,0x00,0x38	;30 - ?
               S01:080003FC:  00
               S01:080003FD:  7C
               S01:080003FE:  FE
               S01:080003FF:  C6
               S01:08000400:  0C
               S01:08000401:  38
               S01:08000402:  00
               S01:08000403:  38
F00:0314       	.BYTE 0x00,0x7C,0x82,0xBA,0xAA,0xBE,0x80,0x7C	;31 - @
               S01:08000404:  00
               S01:08000405:  7C
               S01:08000406:  82
               S01:08000407:  BA
               S01:08000408:  AA
               S01:08000409:  BE
               S01:0800040A:  80
               S01:0800040B:  7C
F00:0315       	.BYTE 0x00,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6	;32 - A
               S01:0800040C:  00
               S01:0800040D:  38
               S01:0800040E:  6C
               S01:0800040F:  C6
               S01:08000410:  C6
               S01:08000411:  FE
               S01:08000412:  C6
               S01:08000413:  C6
F00:0316       	.BYTE 0x00,0xFC,0xC6,0xC6,0xFC,0xC6,0xC6,0xFC	;33 - B
               S01:08000414:  00
               S01:08000415:  FC
               S01:08000416:  C6
               S01:08000417:  C6
               S01:08000418:  FC
               S01:08000419:  C6
               S01:0800041A:  C6
               S01:0800041B:  FC
F00:0317       	.BYTE 0x00,0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C	;34 - C
               S01:0800041C:  00
               S01:0800041D:  3C
               S01:0800041E:  66
               S01:0800041F:  C0
               S01:08000420:  C0
               S01:08000421:  C0
               S01:08000422:  66
               S01:08000423:  3C
F00:0318       	.BYTE 0x00,0xF8,0xCC,0xC6,0xC6,0xC6,0xCC,0xF8	;35 - D
               S01:08000424:  00
               S01:08000425:  F8
               S01:08000426:  CC
               S01:08000427:  C6
               S01:08000428:  C6
               S01:08000429:  C6
               S01:0800042A:  CC
               S01:0800042B:  F8
F00:0319       	.BYTE 0x00,0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xFE	;36 - E
               S01:0800042C:  00
               S01:0800042D:  FE
               S01:0800042E:  C0
               S01:0800042F:  C0
               S01:08000430:  FC
               S01:08000431:  C0
               S01:08000432:  C0
               S01:08000433:  FE
F00:0320       	.BYTE 0x00,0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xC0	;37 - F
               S01:08000434:  00
               S01:08000435:  FE
               S01:08000436:  C0
               S01:08000437:  C0
               S01:08000438:  FC
               S01:08000439:  C0
               S01:0800043A:  C0
               S01:0800043B:  C0
F00:0321       	.BYTE 0x00,0x3E,0x60,0xC0,0xCE,0xC6,0x66,0x3E	;38 - G
               S01:0800043C:  00
               S01:0800043D:  3E
               S01:0800043E:  60
               S01:0800043F:  C0
               S01:08000440:  CE
               S01:08000441:  C6
               S01:08000442:  66
               S01:08000443:  3E
F00:0322       	.BYTE 0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,0xC6	;39 - H
               S01:08000444:  00
               S01:08000445:  C6
               S01:08000446:  C6
               S01:08000447:  C6
               S01:08000448:  C6
               S01:08000449:  FE
               S01:0800044A:  C6
               S01:0800044B:  C6
F00:0323       	.BYTE 0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x7E	;40 - I
               S01:0800044C:  00
               S01:0800044D:  7E
               S01:0800044E:  18
               S01:0800044F:  18
               S01:08000450:  18
               S01:08000451:  18
               S01:08000452:  18
               S01:08000453:  7E
F00:0324       	.BYTE 0x00,0x06,0x06,0x06,0x06,0x06,0xC6,0x7C	;41 - J
               S01:08000454:  00
               S01:08000455:  06
               S01:08000456:  06
               S01:08000457:  06
               S01:08000458:  06
               S01:08000459:  06
               S01:0800045A:  C6
               S01:0800045B:  7C
F00:0325       	.BYTE 0x00,0xC6,0xCC,0xD8,0xF0,0xF8,0xDC,0xCE	;42 - K
               S01:0800045C:  00
               S01:0800045D:  C6
               S01:0800045E:  CC
               S01:0800045F:  D8
               S01:08000460:  F0
               S01:08000461:  F8
               S01:08000462:  DC
               S01:08000463:  CE
F00:0326       	.BYTE 0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x7E	;43 - L
               S01:08000464:  00
               S01:08000465:  60
               S01:08000466:  60
               S01:08000467:  60
               S01:08000468:  60
               S01:08000469:  60
               S01:0800046A:  60
               S01:0800046B:  7E
F00:0327       	.BYTE 0x00,0xC6,0xEE,0xFE,0xD6,0xD6,0xC6,0xC6	;44 - M
               S01:0800046C:  00
               S01:0800046D:  C6
               S01:0800046E:  EE
               S01:0800046F:  FE
               S01:08000470:  D6
               S01:08000471:  D6
               S01:08000472:  C6
               S01:08000473:  C6
F00:0328       	.BYTE 0x00,0xC6,0xE6,0xF6,0xDE,0xDE,0xC6,0xC6	;45 - N
               S01:08000474:  00
               S01:08000475:  C6
               S01:08000476:  E6
               S01:08000477:  F6
               S01:08000478:  DE
               S01:08000479:  DE
               S01:0800047A:  C6
               S01:0800047B:  C6
F00:0329       	.BYTE 0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C	;46 - O
               S01:0800047C:  00
               S01:0800047D:  7C
               S01:0800047E:  C6
               S01:0800047F:  C6
               S01:08000480:  C6
               S01:08000481:  C6
               S01:08000482:  C6
               S01:08000483:  7C
F00:0330       	.BYTE 0x00,0xFC,0xC6,0xC6,0xC6,0xFC,0xC0,0xC0	;47 - P
               S01:08000484:  00
               S01:08000485:  FC
               S01:08000486:  C6
               S01:08000487:  C6
               S01:08000488:  C6
               S01:08000489:  FC
               S01:0800048A:  C0
               S01:0800048B:  C0
F00:0331       	.BYTE 0x00,0x7C,0xC6,0xC6,0xC6,0xDE,0xCC,0x7A	;48 - Q
               S01:0800048C:  00
               S01:0800048D:  7C
               S01:0800048E:  C6
               S01:0800048F:  C6
               S01:08000490:  C6
               S01:08000491:  DE
               S01:08000492:  CC
               S01:08000493:  7A
F00:0332       	.BYTE 0x00,0xFC,0xC6,0xC6,0xCE,0xF8,0xDC,0xCE	;49 - R
               S01:08000494:  00
               S01:08000495:  FC
               S01:08000496:  C6
               S01:08000497:  C6
               S01:08000498:  CE
               S01:08000499:  F8
               S01:0800049A:  DC
               S01:0800049B:  CE
F00:0333       	.BYTE 0x00,0x7C,0xC6,0xC0,0x7C,0x06,0xC6,0x7C	;50 - S
               S01:0800049C:  00
               S01:0800049D:  7C
               S01:0800049E:  C6
               S01:0800049F:  C0
               S01:080004A0:  7C
               S01:080004A1:  06
               S01:080004A2:  C6
               S01:080004A3:  7C
F00:0334       	.BYTE 0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x18	;51 - T
               S01:080004A4:  00
               S01:080004A5:  7E
               S01:080004A6:  18
               S01:080004A7:  18
               S01:080004A8:  18
               S01:080004A9:  18
               S01:080004AA:  18
               S01:080004AB:  18
F00:0335       	.BYTE 0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C	;52 - U
               S01:080004AC:  00
               S01:080004AD:  C6
               S01:080004AE:  C6
               S01:080004AF:  C6
               S01:080004B0:  C6
               S01:080004B1:  C6
               S01:080004B2:  C6
               S01:080004B3:  7C
F00:0336       	.BYTE 0x00,0xC6,0xC6,0xC6,0xEE,0x7C,0x38,0x10	;53 - V
               S01:080004B4:  00
               S01:080004B5:  C6
               S01:080004B6:  C6
               S01:080004B7:  C6
               S01:080004B8:  EE
               S01:080004B9:  7C
               S01:080004BA:  38
               S01:080004BB:  10
F00:0337       	.BYTE 0x00,0xD6,0xD6,0xD6,0xD6,0xFE,0xEE,0x44	;54 - W
               S01:080004BC:  00
               S01:080004BD:  D6
               S01:080004BE:  D6
               S01:080004BF:  D6
               S01:080004C0:  D6
               S01:080004C1:  FE
               S01:080004C2:  EE
               S01:080004C3:  44
F00:0338       	.BYTE 0x00,0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6	;55 - X
               S01:080004C4:  00
               S01:080004C5:  C6
               S01:080004C6:  C6
               S01:080004C7:  6C
               S01:080004C8:  38
               S01:080004C9:  6C
               S01:080004CA:  C6
               S01:080004CB:  C6
F00:0339       	.BYTE 0x00,0x66,0x66,0x66,0x3C,0x18,0x18,0x18	;56 - Y
               S01:080004CC:  00
               S01:080004CD:  66
               S01:080004CE:  66
               S01:080004CF:  66
               S01:080004D0:  3C
               S01:080004D1:  18
               S01:080004D2:  18
               S01:080004D3:  18
F00:0340       	.BYTE 0x00,0xFE,0x0E,0x1C,0x38,0x70,0xE0,0xFE	;57 - Z
               S01:080004D4:  00
               S01:080004D5:  FE
               S01:080004D6:  0E
               S01:080004D7:  1C
               S01:080004D8:  38
               S01:080004D9:  70
               S01:080004DA:  E0
               S01:080004DB:  FE
F00:0341       	.BYTE 0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x3C	;58 - [
               S01:080004DC:  00
               S01:080004DD:  3C
               S01:080004DE:  30
               S01:080004DF:  30
               S01:080004E0:  30
               S01:080004E1:  30
               S01:080004E2:  30
               S01:080004E3:  3C
F00:0342       	.BYTE 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01	;59 - \ 
               S01:080004E4:  80
               S01:080004E5:  40
               S01:080004E6:  20
               S01:080004E7:  10
               S01:080004E8:  08
               S01:080004E9:  04
               S01:080004EA:  02
               S01:080004EB:  01
F00:0343       	.BYTE 0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C	;60 - ]
               S01:080004EC:  00
               S01:080004ED:  3C
               S01:080004EE:  0C
               S01:080004EF:  0C
               S01:080004F0:  0C
               S01:080004F1:  0C
               S01:080004F2:  0C
               S01:080004F3:  3C
F00:0344       	.BYTE 0x00,0x38,0x6C,0x00,0x00,0x00,0x00,0x00	;61 - ^
               S01:080004F4:  00
               S01:080004F5:  38
               S01:080004F6:  6C
               S01:080004F7:  00
               S01:080004F8:  00
               S01:080004F9:  00
               S01:080004FA:  00
               S01:080004FB:  00
F00:0345       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE	;62 - _
               S01:080004FC:  00
               S01:080004FD:  00
               S01:080004FE:  00
               S01:080004FF:  00
               S01:08000500:  00
               S01:08000501:  00
               S01:08000502:  00
               S01:08000503:  FE
F00:0346       	.BYTE 0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00 	;63 - `
               S01:08000504:  00
               S01:08000505:  10
               S01:08000506:  08
               S01:08000507:  00
               S01:08000508:  00
               S01:08000509:  00
               S01:0800050A:  00
               S01:0800050B:  00
F00:0347       	.BYTE 0x00,0x00,0x00,0x7C,0x06,0x7E,0xC6,0x7E	;64 - a
               S01:0800050C:  00
               S01:0800050D:  00
               S01:0800050E:  00
               S01:0800050F:  7C
               S01:08000510:  06
               S01:08000511:  7E
               S01:08000512:  C6
               S01:08000513:  7E
F00:0348       	.BYTE 0x00,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0x7C	;65 - b
               S01:08000514:  00
               S01:08000515:  C0
               S01:08000516:  C0
               S01:08000517:  FC
               S01:08000518:  C6
               S01:08000519:  C6
               S01:0800051A:  C6
               S01:0800051B:  7C
F00:0349       	.BYTE 0x00,0x00,0x00,0x7E,0xC0,0xC0,0xC0,0x7E	;66 - c
               S01:0800051C:  00
               S01:0800051D:  00
               S01:0800051E:  00
               S01:0800051F:  7E
               S01:08000520:  C0
               S01:08000521:  C0
               S01:08000522:  C0
               S01:08000523:  7E
F00:0350       	.BYTE 0x00,0x06,0x06,0x7E,0xC6,0xC6,0xC6,0x7E	;67 - d
               S01:08000524:  00
               S01:08000525:  06
               S01:08000526:  06
               S01:08000527:  7E
               S01:08000528:  C6
               S01:08000529:  C6
               S01:0800052A:  C6
               S01:0800052B:  7E
F00:0351       	.BYTE 0x00,0x00,0x00,0x7C,0xC6,0xFE,0xC0,0x7C	;68 - e
               S01:0800052C:  00
               S01:0800052D:  00
               S01:0800052E:  00
               S01:0800052F:  7C
               S01:08000530:  C6
               S01:08000531:  FE
               S01:08000532:  C0
               S01:08000533:  7C
F00:0352       	.BYTE 0x00,0x0E,0x18,0x7E,0x18,0x18,0x18,0x18	;69 - f
               S01:08000534:  00
               S01:08000535:  0E
               S01:08000536:  18
               S01:08000537:  7E
               S01:08000538:  18
               S01:08000539:  18
               S01:0800053A:  18
               S01:0800053B:  18
F00:0353       	.BYTE 0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x7C	;70 - g
               S01:0800053C:  00
               S01:0800053D:  00
               S01:0800053E:  7E
               S01:0800053F:  C6
               S01:08000540:  C6
               S01:08000541:  7E
               S01:08000542:  06
               S01:08000543:  7C
F00:0354       	.BYTE 0x00,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xC6	;71 - h
               S01:08000544:  00
               S01:08000545:  C0
               S01:08000546:  C0
               S01:08000547:  FC
               S01:08000548:  C6
               S01:08000549:  C6
               S01:0800054A:  C6
               S01:0800054B:  C6
F00:0355       	.BYTE 0x00,0x18,0x00,0x38,0x18,0x18,0x18,0x7E	;72 - i
               S01:0800054C:  00
               S01:0800054D:  18
               S01:0800054E:  00
               S01:0800054F:  38
               S01:08000550:  18
               S01:08000551:  18
               S01:08000552:  18
               S01:08000553:  7E
F00:0356       	.BYTE 0x00,0x0C,0x00,0x1C,0x0C,0x0C,0x0C,0x78	;73 - j
               S01:08000554:  00
               S01:08000555:  0C
               S01:08000556:  00
               S01:08000557:  1C
               S01:08000558:  0C
               S01:08000559:  0C
               S01:0800055A:  0C
               S01:0800055B:  78
F00:0357       	.BYTE 0x00,0xC0,0xC0,0xC6,0xCC,0xF8,0xCC,0xC6	;74 - k
               S01:0800055C:  00
               S01:0800055D:  C0
               S01:0800055E:  C0
               S01:0800055F:  C6
               S01:08000560:  CC
               S01:08000561:  F8
               S01:08000562:  CC
               S01:08000563:  C6
F00:0358       	.BYTE 0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x7E	;75 - l
               S01:08000564:  00
               S01:08000565:  38
               S01:08000566:  18
               S01:08000567:  18
               S01:08000568:  18
               S01:08000569:  18
               S01:0800056A:  18
               S01:0800056B:  7E
F00:0359       	.BYTE 0x00,0x00,0x00,0xFC,0xB6,0xB6,0xB6,0xB6	;76 - m
               S01:0800056C:  00
               S01:0800056D:  00
               S01:0800056E:  00
               S01:0800056F:  FC
               S01:08000570:  B6
               S01:08000571:  B6
               S01:08000572:  B6
               S01:08000573:  B6
F00:0360       	.BYTE 0x00,0x00,0x00,0xFC,0xC6,0xC6,0xC6,0xC6	;77 - n
               S01:08000574:  00
               S01:08000575:  00
               S01:08000576:  00
               S01:08000577:  FC
               S01:08000578:  C6
               S01:08000579:  C6
               S01:0800057A:  C6
               S01:0800057B:  C6
F00:0361       	.BYTE 0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C	;78 - o
               S01:0800057C:  00
               S01:0800057D:  00
               S01:0800057E:  00
               S01:0800057F:  7C
               S01:08000580:  C6
               S01:08000581:  C6
               S01:08000582:  C6
               S01:08000583:  7C
F00:0362       	.BYTE 0x00,0x00,0xFC,0xC6,0xC6,0xFC,0xC0,0xC0	;79 - p
               S01:08000584:  00
               S01:08000585:  00
               S01:08000586:  FC
               S01:08000587:  C6
               S01:08000588:  C6
               S01:08000589:  FC
               S01:0800058A:  C0
               S01:0800058B:  C0
F00:0363       	.BYTE 0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x06	;80 - q
               S01:0800058C:  00
               S01:0800058D:  00
               S01:0800058E:  7E
               S01:0800058F:  C6
               S01:08000590:  C6
               S01:08000591:  7E
               S01:08000592:  06
               S01:08000593:  06
F00:0364       	.BYTE 0x00,0x00,0x00,0x6E,0x70,0x60,0x60,0x60	;81 - r
               S01:08000594:  00
               S01:08000595:  00
               S01:08000596:  00
               S01:08000597:  6E
               S01:08000598:  70
               S01:08000599:  60
               S01:0800059A:  60
               S01:0800059B:  60
F00:0365       	.BYTE 0x00,0x00,0x00,0x7C,0xC0,0x7C,0x06,0xFC	;82 - s
               S01:0800059C:  00
               S01:0800059D:  00
               S01:0800059E:  00
               S01:0800059F:  7C
               S01:080005A0:  C0
               S01:080005A1:  7C
               S01:080005A2:  06
               S01:080005A3:  FC
F00:0366       	.BYTE 0x00,0x18,0x18,0x7E,0x18,0x18,0x18,0x18	;83 - t
               S01:080005A4:  00
               S01:080005A5:  18
               S01:080005A6:  18
               S01:080005A7:  7E
               S01:080005A8:  18
               S01:080005A9:  18
               S01:080005AA:  18
               S01:080005AB:  18
F00:0367       	.BYTE 0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0x7E	;84 - u
               S01:080005AC:  00
               S01:080005AD:  00
               S01:080005AE:  00
               S01:080005AF:  C6
               S01:080005B0:  C6
               S01:080005B1:  C6
               S01:080005B2:  C6
               S01:080005B3:  7E
F00:0368       	.BYTE 0x00,0x00,0x00,0x66,0x66,0x66,0x3C,0x18	;85 - v
               S01:080005B4:  00
               S01:080005B5:  00
               S01:080005B6:  00
               S01:080005B7:  66
               S01:080005B8:  66
               S01:080005B9:  66
               S01:080005BA:  3C
               S01:080005BB:  18
F00:0369       	.BYTE 0x00,0x00,0x00,0xD6,0xD6,0xD6,0xD6,0x6C	;86 - w
               S01:080005BC:  00
               S01:080005BD:  00
               S01:080005BE:  00
               S01:080005BF:  D6
               S01:080005C0:  D6
               S01:080005C1:  D6
               S01:080005C2:  D6
               S01:080005C3:  6C
F00:0370       	.BYTE 0x00,0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6	;87 - x
               S01:080005C4:  00
               S01:080005C5:  00
               S01:080005C6:  00
               S01:080005C7:  C6
               S01:080005C8:  6C
               S01:080005C9:  38
               S01:080005CA:  6C
               S01:080005CB:  C6
F00:0371       	.BYTE 0x00,0x00,0xC6,0xC6,0xC6,0x7E,0x06,0x7C	;88 - y
               S01:080005CC:  00
               S01:080005CD:  00
               S01:080005CE:  C6
               S01:080005CF:  C6
               S01:080005D0:  C6
               S01:080005D1:  7E
               S01:080005D2:  06
               S01:080005D3:  7C
F00:0372       	.BYTE 0x00,0x00,0x00,0xFE,0x1C,0x38,0x70,0xFE	;89 - z
               S01:080005D4:  00
               S01:080005D5:  00
               S01:080005D6:  00
               S01:080005D7:  FE
               S01:080005D8:  1C
               S01:080005D9:  38
               S01:080005DA:  70
               S01:080005DB:  FE
F00:0373       	.BYTE 0x00,0x0C,0x18,0x18,0x30,0x18,0x18,0x0C	;90 - {
               S01:080005DC:  00
               S01:080005DD:  0C
               S01:080005DE:  18
               S01:080005DF:  18
               S01:080005E0:  30
               S01:080005E1:  18
               S01:080005E2:  18
               S01:080005E3:  0C
F00:0374       	.BYTE 0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18	;91 - |
               S01:080005E4:  00
               S01:080005E5:  18
               S01:080005E6:  18
               S01:080005E7:  18
               S01:080005E8:  18
               S01:080005E9:  18
               S01:080005EA:  18
               S01:080005EB:  18
F00:0375       	.BYTE 0x00,0x30,0x18,0x18,0x0C,0x18,0x18,0x30	;92 - }
               S01:080005EC:  00
               S01:080005ED:  30
               S01:080005EE:  18
               S01:080005EF:  18
               S01:080005F0:  0C
               S01:080005F1:  18
               S01:080005F2:  18
               S01:080005F3:  30
F00:0376       	.BYTE 0x00,0x00,0x70,0xBA,0x1C,0x00,0x00,0x00	;93 - ~
               S01:080005F4:  00
               S01:080005F5:  00
               S01:080005F6:  70
               S01:080005F7:  BA
               S01:080005F8:  1C
               S01:080005F9:  00
               S01:080005FA:  00
               S01:080005FB:  00
F00:0377       	;.BYTE 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF


Sections:
S01  seg8000000


Sources:
F00  GBA_Drummond.asm


Symbols:
LineDone EXPR(134218476=0x80002ec) UNUSED ABS 
DrawPixel EXPR(134218440=0x80002c8) ABS 
WriteLine EXPR(134218420=0x80002b4) ABS 
BitmapFont EXPR(134218500=0x8000304) ABS 
WriteChar EXPR(134218336=0x8000260) ABS 
WriteTextDone EXPR(134218332=0x800025c) ABS 
RepeatWriteText EXPR(134218312=0x8000248) ABS 
WriteText EXPR(134218304=0x8000240) UNUSED ABS 
NewLine EXPR(134218260=0x8000214) UNUSED ABS 
FillScreen EXPR(134218208=0x80001e0) ABS 
AsciiTest4 EXPR(134218148=0x80001a4) ABS 
AsciiTestAddress4 EXPR(134218144=0x80001a0) UNUSED ABS 
AsciiTest3 EXPR(134218100=0x8000174) ABS 
AsciiTestAddress3 EXPR(134218096=0x8000170) UNUSED ABS 
AsciiTest2 EXPR(134218052=0x8000144) ABS 
AsciiTestAddress2 EXPR(134218048=0x8000140) UNUSED ABS 
AsciiTest1 EXPR(134218004=0x8000114) ABS 
AsciiTestAddress1 EXPR(134218000=0x8000110) UNUSED ABS 
ClearToColor EXPR(134218196=0x80001d4) ABS 
ReadInput EXPR(134218224=0x80001f0) ABS 
GameLoop EXPR(134217968=0x80000f0) ABS 
ScreenInit EXPR(134218160=0x80001b0) ABS 
ProgramStart EXPR(134217960=0x80000e8) ABS 
BackgroundColor EXPR(49680=0xc210) 
MaskKey EXPR(64512=0xfc00) 
Key_Left EXPR(512=0x200) UNUSED 
Key_Right EXPR(256=0x100) UNUSED 
Key_Down EXPR(128=0x80) UNUSED 
Key_Up EXPR(64=0x40) 
Key_LeftBump EXPR(32=0x20) UNUSED 
Key_RightBump EXPR(16=0x10) UNUSED 
Key_Start EXPR(8=0x8) UNUSED 
Key_Select EXPR(4=0x4) UNUSED 
Key_B EXPR(2=0x2) UNUSED 
Key_A EXPR(1=0x1) UNUSED 
InputLocation EXPR(67109168=0x4000130) 
VramBase EXPR(100663296=0x6000000) 
CursorY EXPR(33554465=0x2000021) 
CursorX EXPR(33554464=0x2000020) 
Ram EXPR(33554432=0x2000000) 
__VASM EXPR(0=0x0) INTERNAL 
BuildGBA EXPR(1=0x1) UNUSED 
vasm EXPR(1=0x1) UNUSED 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
