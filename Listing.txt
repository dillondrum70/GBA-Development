F00:0001       ;LITTLE ENDIAN
F00:0002       ;LITTLE ENDIAN
F00:0003       ;LITTLE ENDIAN
F00:0004       ;LITTLE ENDIAN
F00:0005       ;LITTLE ENDIAN
F00:0006       ;LITTLE ENDIAN
F00:0007       ;LITTLE ENDIAN
F00:0008       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0009       
F00:0010       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0011       .ORG 0x08000000	;GBA ROM (the cartridge) Address starts at 0x08000000
F00:0012       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0013       
F00:0014       .EQU InputLocation, 0x04000130	;Location in memory where input is stored
F00:0015       
F00:0016       ;OR these masks with data at input location to get input, returns 0 if pressed
F00:0017       .EQU Key_A, 			0b0000000000000001				
F00:0018       .EQU Key_B, 			0b0000000000000010
F00:0019       .EQU Key_Select, 		0b0000000000000100
F00:0020       .EQU Key_Start, 		0b0000000000001000
F00:0021       .EQU Key_Right, 		0b0000000000010000
F00:0022       .EQU Key_Left, 			0b0000000000100000
F00:0023       .EQU Key_Up, 			0b0000000001000000
F00:0024       .EQU Key_Down, 			0b0000000010000000
F00:0025       .EQU Key_RightBump, 	0b0000000100000000
F00:0026       .EQU Key_LeftBump, 		0b0000001000000000
F00:0027       
F00:0028       .EQU MaskKey, 			0b1111110000000000	;Mask out other bits
F00:0029       
F00:0030       .EQU BackgroundColor, 0b1100001000010000
F00:0031       
F00:0032       .EQU ScreenXBound, 240
F00:0033       .EQU ScreenYBound, 160
F00:0034       
F00:0035       ;Constant
F00:0036       .EQU PlayerWidth, 16
F00:0037       .EQU PlayerHeight, 16
F00:0038       
F00:0039       .EQU FacingDown, 0
F00:0040       .EQU FacingLeft, 1
F00:0041       .EQU FacingUp, 2
F00:0042       .EQU FacingRight, 3
F00:0043       
F00:0044       ;Variable
F00:0045       .EQU PlayerX, Ram+34	;Player's x position
F00:0046       .EQU PlayerY, Ram+35	;Player's y position
F00:0047       
F00:0048       .EQU PlayerFace, Ram+36	;Direction player faces
F00:0049       .EQU PlayerCurrentAnimIndex, Ram+40	;Address between beginning and end where current animation frame is
F00:0050       .EQU PlayerCurrentAnimBegin, Ram+44	;Address of current animation indices
F00:0051       .EQU PlayerCurrentAnimEnd, Ram+48 ;Address where current animation indices end
F00:0052       ;.EQU PlayerAnimIndex, Ram+40	;current index of frame in animation tileset, tells us sprite number for sprite attributes
F00:0053       
F00:0054       ;Access animation array -> get index in array -> value from the animation is an index in the sprite tilemap -> pass inde
F00:0055       
F00:0056       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0057       
F00:0058       B Main	;Branch to start of program
               S01:08000000:  38 00 00 EA
F00:0059       
F00:0060       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F00:0061       ;GBA Header
F00:0062       ;004h    156   Nintendo Logo    (compressed bitmap, required!)
F00:0063       	.BYTE 0xC8,0x60,0x4F,0xE2,0x01,0x70,0x8F,0xE2,0x17,0xFF,0x2F,0xE1,0x12,0x4F,0x11,0x48     ; C
               S01:08000004:  C8
               S01:08000005:  60
               S01:08000006:  4F
               S01:08000007:  E2
               S01:08000008:  01
               S01:08000009:  70
               S01:0800000A:  8F
               S01:0800000B:  E2
               S01:0800000C:  17
               S01:0800000D:  FF
               S01:0800000E:  2F
               S01:0800000F:  E1
               S01:08000010:  12
               S01:08000011:  4F
               S01:08000012:  11
               S01:08000013:  48
F00:0064       	.BYTE 0x12,0x4C,0x20,0x60,0x64,0x60,0x7C,0x62,0x30,0x1C,0x39,0x1C,0x10,0x4A,0x00,0xF0     ; D
               S01:08000014:  12
               S01:08000015:  4C
               S01:08000016:  20
               S01:08000017:  60
               S01:08000018:  64
               S01:08000019:  60
               S01:0800001A:  7C
               S01:0800001B:  62
               S01:0800001C:  30
               S01:0800001D:  1C
               S01:0800001E:  39
               S01:0800001F:  1C
               S01:08000020:  10
               S01:08000021:  4A
               S01:08000022:  00
               S01:08000023:  F0
F00:0065           .BYTE 0x14,0xF8,0x30,0x6A,0x80,0x19,0xB1,0x6A,0xF2,0x6A,0x00,0xF0,0x0B,0xF8,0x30,0x6B     ; E
               S01:08000024:  14
               S01:08000025:  F8
               S01:08000026:  30
               S01:08000027:  6A
               S01:08000028:  80
               S01:08000029:  19
               S01:0800002A:  B1
               S01:0800002B:  6A
               S01:0800002C:  F2
               S01:0800002D:  6A
               S01:0800002E:  00
               S01:0800002F:  F0
               S01:08000030:  0B
               S01:08000031:  F8
               S01:08000032:  30
               S01:08000033:  6B
F00:0066           .BYTE 0x80,0x19,0xB1,0x6B,0xF2,0x6B,0x00,0xF0,0x08,0xF8,0x70,0x6A,0x77,0x6B,0x07,0x4C     ; F
               S01:08000034:  80
               S01:08000035:  19
               S01:08000036:  B1
               S01:08000037:  6B
               S01:08000038:  F2
               S01:08000039:  6B
               S01:0800003A:  00
               S01:0800003B:  F0
               S01:0800003C:  08
               S01:0800003D:  F8
               S01:0800003E:  70
               S01:0800003F:  6A
               S01:08000040:  77
               S01:08000041:  6B
               S01:08000042:  07
               S01:08000043:  4C
F00:0067           .BYTE 0x60,0x60,0x38,0x47,0x07,0x4B,0xD2,0x18,0x9A,0x43,0x07,0x4B,0x92,0x08,0xD2,0x18     ; 10
               S01:08000044:  60
               S01:08000045:  60
               S01:08000046:  38
               S01:08000047:  47
               S01:08000048:  07
               S01:08000049:  4B
               S01:0800004A:  D2
               S01:0800004B:  18
               S01:0800004C:  9A
               S01:0800004D:  43
               S01:0800004E:  07
               S01:0800004F:  4B
               S01:08000050:  92
               S01:08000051:  08
               S01:08000052:  D2
               S01:08000053:  18
F00:0068           .BYTE 0x0C,0xDF,0xF7,0x46,0x04,0xF0,0x1F,0xE5,0x00,0xFE,0x7F,0x02,0xF0,0xFF,0x7F,0x02     ; 11
               S01:08000054:  0C
               S01:08000055:  DF
               S01:08000056:  F7
               S01:08000057:  46
               S01:08000058:  04
               S01:08000059:  F0
               S01:0800005A:  1F
               S01:0800005B:  E5
               S01:0800005C:  00
               S01:0800005D:  FE
               S01:0800005E:  7F
               S01:0800005F:  02
               S01:08000060:  F0
               S01:08000061:  FF
               S01:08000062:  7F
               S01:08000063:  02
F00:0069           .BYTE 0xF0,0x01,0x00,0x00,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00     ; 12
               S01:08000064:  F0
               S01:08000065:  01
               S01:08000066:  00
               S01:08000067:  00
               S01:08000068:  FF
               S01:08000069:  01
               S01:0800006A:  00
               S01:0800006B:  00
               S01:0800006C:  00
               S01:0800006D:  00
               S01:0800006E:  00
               S01:0800006F:  04
               S01:08000070:  00
               S01:08000071:  00
               S01:08000072:  00
               S01:08000073:  00
F00:0070           .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ; 13
               S01:08000074:  00
               S01:08000075:  00
               S01:08000076:  00
               S01:08000077:  00
               S01:08000078:  00
               S01:08000079:  00
               S01:0800007A:  00
               S01:0800007B:  00
               S01:0800007C:  00
               S01:0800007D:  00
               S01:0800007E:  00
               S01:0800007F:  00
               S01:08000080:  00
               S01:08000081:  00
               S01:08000082:  00
               S01:08000083:  00
F00:0071           .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ; 14
               S01:08000084:  00
               S01:08000085:  00
               S01:08000086:  00
               S01:08000087:  00
               S01:08000088:  00
               S01:08000089:  00
               S01:0800008A:  00
               S01:0800008B:  00
               S01:0800008C:  00
               S01:0800008D:  00
               S01:0800008E:  00
               S01:0800008F:  00
               S01:08000090:  00
               S01:08000091:  00
               S01:08000092:  00
               S01:08000093:  00
F00:0072       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x9E,0x7B,0xEB     ; 15
               S01:08000094:  00
               S01:08000095:  00
               S01:08000096:  00
               S01:08000097:  00
               S01:08000098:  00
               S01:08000099:  00
               S01:0800009A:  00
               S01:0800009B:  00
               S01:0800009C:  00
               S01:0800009D:  00
               S01:0800009E:  00
               S01:0800009F:  00
               S01:080000A0:  1A
               S01:080000A1:  9E
               S01:080000A2:  7B
               S01:080000A3:  EB
F00:0073       	
F00:0074           ;		123456789012
F00:0075           .ASCII "DRUMMOND.NET";0A0h    12    Game Title       (uppercase ascii, max 12 characters)	
               S01:080000A4:  44 52 55 4D 4D 4F 4E 44 2E 4E 45 54
F00:0076           .ASCII "0000"	;0ACh    4     Game Code        (uppercase ascii, 4 characters)
               S01:080000B0:  30 30 30 30
F00:0077       ;0B0h    2     Maker Code       (uppercase ascii, 2 characters)
F00:0078           .BYTE "GB"				;Maker
               S01:080000B4:  47 42
F00:0079       ;0B2h    1     Fixed value      (must be 96h, required!)
F00:0080       	.BYTE 0x96
               S01:080000B6:  96
F00:0081       ;0B3h    1     Main unit code   (00h for current GBA models)
F00:0082       	.BYTE 0x00
               S01:080000B7:  00
F00:0083       ;0B4h    1     Device type      (usually 00h) (bit7=DACS/debug related)
F00:0084       	.BYTE 0x00
               S01:080000B8:  00
F00:0085       ;0B5h    7     Reserved Area    (should be zero filled)
F00:0086       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00
               S01:080000B9:  00
               S01:080000BA:  00
               S01:080000BB:  00
               S01:080000BC:  00
               S01:080000BD:  00
               S01:080000BE:  00
               S01:080000BF:  00
F00:0087       ;0BCh    1     Software version (usually 00h)
F00:0088       	.BYTE 0x00
               S01:080000C0:  00
F00:0089       ;0BDh    1     Complement check (header checksum, required!)
F00:0090       	.BYTE 0x00
               S01:080000C1:  00
F00:0091       ;0BEh    2     Reserved Area    (should be zero filled)
F00:0092       	.BYTE 0x00,0x00
               S01:080000C2:  00
               S01:080000C3:  00
F00:0093       ;0C0h    4     RAM Entry Point  (32bit ARM branch opcode, eg. "B ram_start")
F00:0094       	.BYTE 0x00,0x00,0x00,0x00
               S01:080000C4:  00
               S01:080000C5:  00
               S01:080000C6:  00
               S01:080000C7:  00
F00:0095       ;0C4h    1     Boot mode        (init as 00h - BIOS overwrites this value!)
F00:0096       	.BYTE 0x00
               S01:080000C8:  00
F00:0097       ;0C5h    1     Slave ID Number  (init as 00h - BIOS overwrites this value!)
F00:0098       	.BYTE 0x00
               S01:080000C9:  00
F00:0099       ;0C6h    26    Not used         (seems to be unused)
F00:0100       	.BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
               S01:080000CA:  00
               S01:080000CB:  00
               S01:080000CC:  00
               S01:080000CD:  00
               S01:080000CE:  00
               S01:080000CF:  00
               S01:080000D0:  00
               S01:080000D1:  00
               S01:080000D2:  00
               S01:080000D3:  00
               S01:080000D4:  00
               S01:080000D5:  00
               S01:080000D6:  00
               S01:080000D7:  00
               S01:080000D8:  00
               S01:080000D9:  00
               S01:080000DA:  00
               S01:080000DB:  00
               S01:080000DC:  00
               S01:080000DD:  00
               S01:080000DE:  00
               S01:080000DF:  00
               S01:080000E0:  00
               S01:080000E1:  00
               S01:080000E2:  00
               S01:080000E3:  00
F00:0101       ;0E0h    4     JOYBUS Entry Pt. (32bit ARM branch opcode, eg. "B joy_start")
F00:0102       	.BYTE 0x00,0x00,0x00,0x00
               S01:080000E4:  00
               S01:080000E5:  00
               S01:080000E6:  00
               S01:080000E7:  00
F00:0103       
F00:0104       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0105       
F00:0106       
F00:0107       Main:
F00:0108       	MOV sp, #Stack		;Initialize Stack Pointer, starts at memory address 3000000 on GBA
               S01:080000E8:  03 D4 A0 E3
F00:0109       	
F00:0110       	BL ScreenInit
               S01:080000EC:  7C 01 00 EB
F00:0111       	
F00:0112       	;;;;Load background
F00:0113       	BL BackgroundAndSpriteInit
               S01:080000F0:  84 01 00 EB
F00:0114       	
F00:0115       	
F00:0116       	;Initialize player variables
F00:0117       	MOV r0, #PlayerX
               S01:080000F4:  02 04 A0 E3 22 00 80 E3
F00:0118       	MOV r6, #20
               S01:080000FC:  14 60 A0 E3
F00:0119       	STRB r6, [r0]
               S01:08000100:  00 60 C0 E5
F00:0120       	
F00:0121       	MOV r0, #PlayerY
               S01:08000104:  02 04 A0 E3 23 00 80 E3
F00:0122       	MOV r7, #20
               S01:0800010C:  14 70 A0 E3
F00:0123       	STRB r7, [r0]
               S01:08000110:  00 70 C0 E5
F00:0124       	
F00:0125       	MOV r0, #PlayerCurrentAnimBegin
               S01:08000114:  02 04 A0 E3 2C 00 80 E3
F00:0126       	ADRL r6, Anim_PlayerIdleDown	;Start with idle animation, load player idle address
               S01:0800011C:  0D 6B 8F E2 94 60 86 E2
F00:0127       	STRW r6, [r0]
               S01:08000124:  00 60 80 E5
F00:0128       	
F00:0129       	MOV r0, #PlayerCurrentAnimIndex	;Current index of current animation will be frame 0 of the idle animation
               S01:08000128:  02 04 A0 E3 28 00 80 E3
F00:0130       	MOV r6, #10
               S01:08000130:  0A 60 A0 E3
F00:0131       	STRB r6, [r0]
               S01:08000134:  00 60 C0 E5
F00:0132       	
F00:0133       	MOV r0, #PlayerCurrentAnimEnd
               S01:08000138:  02 04 A0 E3 30 00 80 E3
F00:0134       	ADRL r6, Anim_PlayerIdleDown_END	;Start with idle animation, load player idle address end position 
               S01:08000140:  0D 6B 8F E2 80 60 86 E2
F00:0135       	STRW r6, [r0]
               S01:08000148:  00 60 80 E5
F00:0136       	
F00:0137       	MOV r0, #PlayerFace
               S01:0800014C:  02 04 A0 E3 24 00 80 E3
F00:0138       	MOV r6, #FacingDown	;Start facing down (towards the screen)
               S01:08000154:  00 60 A0 E3
F00:0139       	STRB r6, [r0]
               S01:08000158:  00 60 C0 E5
F00:0140       
F00:0141       ;16 color sprite (Wide 2x1 using tile patterns)
F00:0142       	;mov r0,#0x00	   		;Sprite Num
F00:0143       	;mov r1,#0x4020   		;Ypos
F00:0144       	;mov r2,#0x0040   		;Xpos
F00:0145       	;mov r3,#0x0001   		;Tile
F00:0146       	;bl DrawSprite
F00:0147       	
F00:0148       ;256 color sprite
F00:0149       	;mov r0,#0x00	   		;Sprite Num
F00:0150       	;mov r1,#0x2000   		;Ypos
F00:0151       	;mov r2,#0x4000   		;Xpos	4=256 color
F00:0152       	;mov r3,#0x000A   		;Tile 
F00:0153       	;bl DrawSprite
F00:0154       	
F00:0155       	;LDR r1, AsciiTestAddress1	;Load test address into r1, parameter 1	
F00:0156       	;BL WriteText
F00:0157       	;BL NewLine
F00:0158       	
F00:0159       	;LDR r1, AsciiTestAddress2	;Load test address into r1, parameter 1	
F00:0160       	;BL WriteText
F00:0161       	;BL NewLine
F00:0162       	
F00:0163       	;LDR r1, AsciiTestAddress3	;Load test address into r1, parameter 1	
F00:0164       	;BL WriteText
F00:0165       	;BL NewLine
F00:0166       	
F00:0167       	;LDR r1, AsciiTestAddress4	;Load test address into r1, parameter 1	
F00:0168       	;BL WriteText
F00:0169       	;BL NewLine
F00:0170       	
F00:0171       GameLoop:
F00:0172       		;MOV r1, #Key_Up					;Pass up key mask to input function
F00:0173       		;BL GetButton					;Call function, value returned in r0
F00:0174       	
F00:0175       		;CMPS r0, #0						;Set flag register to check input
F00:0176       		;MOVE r1, #0b1111110000000000	;Turn blue if up key pressed
F00:0177       		;MOVNE r1, #BackgroundColor		;Stay background gray otherwise
F00:0178       	
F00:0179       		;BL ClearToColor					;Update color
F00:0180       		
F00:0181       		;Load in current player position
F00:0182       		MOV r6, #PlayerX
               S01:0800015C:  02 64 A0 E3 22 60 86 E3
F00:0183       		LDRB r8, [r6]
               S01:08000164:  00 80 D6 E5
F00:0184       		MOV r10, r8	;Cache last player x position so we can modify current position
               S01:08000168:  08 A0 A0 E1
F00:0185       		MOV r7, #PlayerY
               S01:0800016C:  02 74 A0 E3 23 70 87 E3
F00:0186       		LDRB r9, [r7]
               S01:08000174:  00 90 D7 E5
F00:0187       		MOV r11, r9	;Cache last player y position so we can modify current position
               S01:08000178:  09 B0 A0 E1
F00:0188       		
F00:0189       		;Erase Sprite
F00:0190       		;LDR r5, SpriteTestAddress
F00:0191       		MOV r4, #PlayerHeight
               S01:0800017C:  10 40 A0 E3
F00:0192       		MOV r3, #PlayerWidth
               S01:08000180:  10 30 A0 E3
F00:0193       		;MOV r2, r9
F00:0194       		;MOV r1, r8
F00:0195       		;BL DrawSprite
F00:0196       	
F00:0197       		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Vertical Movement ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0198       		MOV r1, #Key_Up
               S01:08000184:  40 10 A0 E3
F00:0199       		BL GetButton
               S01:08000188:  6B 02 00 EB
F00:0200       		CMPS r0, #0
               S01:0800018C:  00 00 50 E3
F00:0201       		ADDNE r9, r9, #1
               S01:08000190:  01 90 89 12
F00:0202       	
F00:0203       		MOV r1, #Key_Down
               S01:08000194:  80 10 A0 E3
F00:0204       		BL GetButton
               S01:08000198:  67 02 00 EB
F00:0205       		CMPS r0, #0
               S01:0800019C:  00 00 50 E3
F00:0206       		SUBNE r9, r9, #1
               S01:080001A0:  01 90 49 12
F00:0207       		
F00:0208       		;Check greater than lower bound
F00:0209       		MOV r2, #0			;Take 0
               S01:080001A4:  00 20 A0 E3
F00:0210       		CMPS r9, r2			;Check if right side of player is out of bounds
               S01:080001A8:  02 00 59 E1
F00:0211       		MOVLT r9, r2		;If so, move 0 into y position
               S01:080001AC:  02 90 A0 B1
F00:0212       		
F00:0213       		;Check less than upper bound
F00:0214       		ADD r1, r4, r9		;Sum next position and height
               S01:080001B0:  09 10 84 E0
F00:0215       		MOV r2, #ScreenYBound	;Take Screen bound
               S01:080001B4:  A0 20 A0 E3
F00:0216       		CMPS r1, r2				;Check if right side of player is out of bounds
               S01:080001B8:  02 00 51 E1
F00:0217       		SUBGT r2, r2, r4		;If so, Subtract height from screen Y bound...
               S01:080001BC:  04 20 42 C0
F00:0218       		MOVGT r9, r2			;And move that into y position
               S01:080001C0:  02 90 A0 C1
F00:0219       		
F00:0220       	
F00:0221       		;;;;;;;;;;;;;;;;;;;;;;;;;;; Horizontal Movement ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0222       		MOV r1, #Key_Right
               S01:080001C4:  10 10 A0 E3
F00:0223       		BL GetButton
               S01:080001C8:  5B 02 00 EB
F00:0224       		CMPS r0, #0
               S01:080001CC:  00 00 50 E3
F00:0225       		SUBNE r8, r8, #1;;;;;;;;;;;;;;;;;;;********For some reason, when key_right is pressed, adding moves it left so I switc
               S01:080001D0:  01 80 48 12
F00:0226       	
F00:0227       		MOV r1, #Key_Left
               S01:080001D4:  20 10 A0 E3
F00:0228       		BL GetButton
               S01:080001D8:  57 02 00 EB
F00:0229       		CMPS r0, #0
               S01:080001DC:  00 00 50 E3
F00:0230       		ADDNE r8, r8, #1;;;;;;;;;;;;;;;;;;;;***********
               S01:080001E0:  01 80 88 12
F00:0231       		
F00:0232       		;Check greater than lower bound
F00:0233       		MOV r2, #0			;Take 0
               S01:080001E4:  00 20 A0 E3
F00:0234       		CMPS r8, r2			;Check if right side of player is out of bounds
               S01:080001E8:  02 00 58 E1
F00:0235       		MOVLT r8, r2		;If so, move 0 into x position
               S01:080001EC:  02 80 A0 B1
F00:0236       		
F00:0237       		;Check less than upper bound
F00:0238       		ADD r1, r3, r8		;Sum next position and width
               S01:080001F0:  08 10 83 E0
F00:0239       		MOV r2, #ScreenXBound	;Take Screen bound
               S01:080001F4:  F0 20 A0 E3
F00:0240       		CMPS r1, r2				;Check if right side of player is out of bounds
               S01:080001F8:  02 00 51 E1
F00:0241       		SUBGT r2, r2, r3		;If so, Subtract width from screen x bound...
               S01:080001FC:  03 20 42 C0
F00:0242       		MOVGT r8, r2			;And move that into x position
               S01:08000200:  02 80 A0 C1
F00:0243       		
F00:0244       		
F00:0245       		;;;;;;;;;;;;;;;;; Change Face Direction ;;;;;;;;;;;;;;;;;;;;;
F00:0246       		;r8 and r9 still store the potential new horizontal and vertical positions
F00:0247       		MOV r0, #PlayerFace
               S01:08000204:  02 04 A0 E3 24 00 80 E3
F00:0248       		
F00:0249       		CMP r9, r11
               S01:0800020C:  0B 00 59 E1
F00:0250       			MOVGT r1, #FacingDown
               S01:08000210:  00 10 A0 C3
F00:0251       			STRGT r1, [r0]
               S01:08000214:  00 10 80 C5
F00:0252       			
F00:0253       			MOVLT r1, #FacingUp
               S01:08000218:  02 10 A0 B3
F00:0254       			STRLT r1, [r0]
               S01:0800021C:  00 10 80 B5
F00:0255       		
F00:0256       		;Prioritize facing left and right
F00:0257       		CMP r8, r10
               S01:08000220:  0A 00 58 E1
F00:0258       			MOVGT r1, #FacingRight
               S01:08000224:  03 10 A0 C3
F00:0259       			STRGT r1, [r0]
               S01:08000228:  00 10 80 C5
F00:0260       			
F00:0261       			MOVLT r1, #FacingLeft
               S01:0800022C:  01 10 A0 B3
F00:0262       			STRLT r1, [r0]
               S01:08000230:  00 10 80 B5
F00:0263       			
F00:0264       		;;;;;;;;;;;;;;;;; Change Current Animation ;;;;;;;;;;;;;;;;;;
F00:0265       		
F00:0266       		LDR r1, [r0]	;Load in the facing direction depending on previous check (or if it wasn't changed this frame)
               S01:08000234:  00 10 90 E5
F00:0267       		
F00:0268       		MOV r2, #FacingUp
               S01:08000238:  02 20 A0 E3
F00:0269       		CMP r1, r2	;If r1 == r2 (facing direction is up)
               S01:0800023C:  02 00 51 E1
F00:0270       			BNE FaceUpCheck_END	;Skip if not equal
               S01:08000240:  16 00 00 1A
F00:0271       			CMPE r9, r11	;Check if y input has changed this frame
               S01:08000244:  0B 00 59 E1
F00:0272       				;If y moving Up
F00:0273       				MOVLT r3, #PlayerCurrentAnimBegin
               S01:08000248:  02 34 A0 B3 2C 30 83 B3
F00:0274       				MOVLT r2, #PlayerCurrentAnimEnd
               S01:08000250:  02 24 A0 B3 30 20 82 B3
F00:0275       			
F00:0276       				ADRLTL r0, Anim_PlayerWalkUp
               S01:08000258:  33 0C 8F B2 E0 00 80 B2
F00:0277       				STRLT r0, [r3]
               S01:08000260:  00 00 83 B5
F00:0278       				ADRLTL r0, Anim_PlayerWalkUp_END
               S01:08000264:  33 0C 8F B2 EC 00 80 B2
F00:0279       				STRLT r0, [r2]
               S01:0800026C:  00 00 82 B5
F00:0280       				
F00:0281       				BLT ChangeAnimation_END
               S01:08000270:  58 00 00 BA
F00:0282       				
F00:0283       				;Get current animation addresses
F00:0284       				MOVEQ r3, #PlayerCurrentAnimBegin
               S01:08000274:  02 34 A0 03 2C 30 83 03
F00:0285       				MOVEQ r2, #PlayerCurrentAnimEnd
               S01:0800027C:  02 24 A0 03 30 20 82 03
F00:0286       				
F00:0287       				;Store new animation addresses
F00:0288       				ADREQL r0, Anim_PlayerIdleUp	;This doesn't have a conditional check because the compiler didn't like it and threw an
               S01:08000284:  33 0C 8F 02 A4 00 80 02
F00:0289       				STREQ r0, [r3]
               S01:0800028C:  00 00 83 05
F00:0290       				ADREQL r0, Anim_PlayerIdleUp_END	;This doesn't have a conditional check because the compiler didn't like it and thre
               S01:08000290:  33 0C 8F 02 A8 00 80 02
F00:0291       				STREQ r0, [r2]
               S01:08000298:  00 00 82 05
F00:0292       				
F00:0293       				BEQ ChangeAnimation_END
               S01:0800029C:  4D 00 00 0A
F00:0294       				
F00:0295       		FaceUpCheck_END:
F00:0296       				
F00:0297       		MOV r2, #FacingDown
               S01:080002A0:  00 20 A0 E3
F00:0298       		CMP r1, r2
               S01:080002A4:  02 00 51 E1
F00:0299       			BNE FaceDownCheck_END
               S01:080002A8:  16 00 00 1A
F00:0300       			CMPE r9, r11
               S01:080002AC:  0B 00 59 E1
F00:0301       				MOVGT r3, #PlayerCurrentAnimBegin
               S01:080002B0:  02 34 A0 C3 2C 30 83 C3
F00:0302       				MOVGT r2, #PlayerCurrentAnimEnd
               S01:080002B8:  02 24 A0 C3 30 20 82 C3
F00:0303       			
F00:0304       				ADRGTL r0, Anim_PlayerWalkDown
               S01:080002C0:  03 0C 8F C2 03 0A 80 C2
F00:0305       				STRGT r0, [r3]
               S01:080002C8:  00 00 83 C5
F00:0306       				ADRGTL r0, Anim_PlayerWalkDown_END
               S01:080002CC:  33 0C 8F C2 0C 00 80 C2
F00:0307       				STRGT r0, [r2]
               S01:080002D4:  00 00 82 C5
F00:0308       				
F00:0309       				BLT ChangeAnimation_END
               S01:080002D8:  3E 00 00 BA
F00:0310       				
F00:0311       				;Get current animation addresses
F00:0312       				MOVEQ r3, #PlayerCurrentAnimBegin
               S01:080002DC:  02 34 A0 03 2C 30 83 03
F00:0313       				MOVEQ r2, #PlayerCurrentAnimEnd
               S01:080002E4:  02 24 A0 03 30 20 82 03
F00:0314       				
F00:0315       				;Store new animation addresses
F00:0316       				ADREQL r0, Anim_PlayerIdleDown	;This doesn't have a conditional check because the compiler didn't like it and threw 8
               S01:080002EC:  32 0C 8F 02 C4 00 80 02
F00:0317       				STREQ r0, [r3]
               S01:080002F4:  00 00 83 05
F00:0318       				ADREQL r0, Anim_PlayerIdleDown_END	;This doesn't have a conditional check because the compiler didn't like it and th
               S01:080002F8:  32 0C 8F 02 C8 00 80 02
F00:0319       				STREQ r0, [r2]
               S01:08000300:  00 00 82 05
F00:0320       				
F00:0321       				BEQ ChangeAnimation_END
               S01:08000304:  33 00 00 0A
F00:0322       				
F00:0323       		FaceDownCheck_END:
F00:0324       		
F00:0325       		MOV r2, #FacingLeft
               S01:08000308:  01 20 A0 E3
F00:0326       		CMP r1, r2	;If r1 == r2 (facing direction is left)
               S01:0800030C:  02 00 51 E1
F00:0327       			BNE FaceLeftCheck_END	;Skip if not equal
               S01:08000310:  16 00 00 1A
F00:0328       			CMPE r8, r10	;Check if x input has changed this frame
               S01:08000314:  0A 00 58 E1
F00:0329       				;If x moving Up
F00:0330       				MOVLT r3, #PlayerCurrentAnimBegin
               S01:08000318:  02 34 A0 B3 2C 30 83 B3
F00:0331       				MOVLT r2, #PlayerCurrentAnimEnd
               S01:08000320:  02 24 A0 B3 30 20 82 B3
F00:0332       			
F00:0333       				ADRLTL r0, Anim_PlayerWalkLeft
               S01:08000328:  32 0C 8F B2 E8 00 80 B2
F00:0334       				STRLT r0, [r3]
               S01:08000330:  00 00 83 B5
F00:0335       				ADRLTL r0, Anim_PlayerWalkLeft_END
               S01:08000334:  32 0C 8F B2 F4 00 80 B2
F00:0336       				STRLT r0, [r2]
               S01:0800033C:  00 00 82 B5
F00:0337       				
F00:0338       				BLT ChangeAnimation_END
               S01:08000340:  24 00 00 BA
F00:0339       				
F00:0340       				;Get current animation addresses
F00:0341       				MOVEQ r3, #PlayerCurrentAnimBegin
               S01:08000344:  02 34 A0 03 2C 30 83 03
F00:0342       				MOVEQ r2, #PlayerCurrentAnimEnd
               S01:0800034C:  02 24 A0 03 30 20 82 03
F00:0343       				
F00:0344       				;Store new animation addresses
F00:0345       				ADREQL r0, Anim_PlayerIdleLeft	;This doesn't have a conditional check because the compiler didn't like it and threw 
               S01:08000354:  32 0C 8F 02 AC 00 80 02
F00:0346       				STREQ r0, [r3]
               S01:0800035C:  00 00 83 05
F00:0347       				ADREQL r0, Anim_PlayerIdleLeft_END	;This doesn't have a conditional check because the compiler didn't like it and th
               S01:08000360:  32 0C 8F 02 B0 00 80 02
F00:0348       				STREQ r0, [r2]
               S01:08000368:  00 00 82 05
F00:0349       				
F00:0350       				BEQ ChangeAnimation_END
               S01:0800036C:  19 00 00 0A
F00:0351       				
F00:0352       		FaceLeftCheck_END:
F00:0353       				
F00:0354       		MOV r2, #FacingRight
               S01:08000370:  03 20 A0 E3
F00:0355       		CMP r1, r2
               S01:08000374:  02 00 51 E1
F00:0356       			BNE FaceRightCheck_END
               S01:08000378:  16 00 00 1A
F00:0357       			CMPE r8, r10
               S01:0800037C:  0A 00 58 E1
F00:0358       				MOVGT r3, #PlayerCurrentAnimBegin
               S01:08000380:  02 34 A0 C3 2C 30 83 C3
F00:0359       				MOVGT r2, #PlayerCurrentAnimEnd
               S01:08000388:  02 24 A0 C3 30 20 82 C3
F00:0360       			
F00:0361       				ADRGTL r0, Anim_PlayerWalkRight
               S01:08000390:  32 0C 8F C2 58 00 80 C2
F00:0362       				STRGT r0, [r3]
               S01:08000398:  00 00 83 C5
F00:0363       				ADRGTL r0, Anim_PlayerWalkRight_END
               S01:0800039C:  32 0C 8F C2 64 00 80 C2
F00:0364       				STRGT r0, [r2]
               S01:080003A4:  00 00 82 C5
F00:0365       				
F00:0366       				BLT ChangeAnimation_END
               S01:080003A8:  0A 00 00 BA
F00:0367       				
F00:0368       				;Get current animation addresses
F00:0369       				MOVEQ r3, #PlayerCurrentAnimBegin
               S01:080003AC:  02 34 A0 03 2C 30 83 03
F00:0370       				MOVEQ r2, #PlayerCurrentAnimEnd
               S01:080003B4:  02 24 A0 03 30 20 82 03
F00:0371       				
F00:0372       				;Store new animation addresses
F00:0373       				ADREQL r0, Anim_PlayerIdleRight	;This doesn't have a conditional check because the compiler didn't like it and threw
               S01:080003BC:  32 0C 8F 02 1C 00 80 02
F00:0374       				STREQ r0, [r3]
               S01:080003C4:  00 00 83 05
F00:0375       				ADREQL r0, Anim_PlayerIdleRight_END	;This doesn't have a conditional check because the compiler didn't like it and t
               S01:080003C8:  32 0C 8F 02 20 00 80 02
F00:0376       				STREQ r0, [r2]
               S01:080003D0:  00 00 82 05
F00:0377       				
F00:0378       				BEQ ChangeAnimation_END
               S01:080003D4:  FF FF FF 0A
F00:0379       				
F00:0380       		FaceRightCheck_END:
F00:0381       			
F00:0382       			
F00:0383       		ChangeAnimation_END:
F00:0384       		
F00:0385       		;Do collisions independently so we can still move up and down well moving right against a wall
F00:0386       		;;;;;;;;;;;;;;; Vertical Collision ;;;;;;;;;;;;;;;;;;;;
F00:0387       		MOV r1, r10
               S01:080003D8:  0A 10 A0 E1
F00:0388       		MOV r2, r11
               S01:080003DC:  0B 20 A0 E1
F00:0389       		MOV r3, r9
               S01:080003E0:  09 30 A0 E1
F00:0390       		BL VerticalCollision
               S01:080003E4:  0C 01 00 EB
F00:0391       		
F00:0392       		;;;;;;;;;;;;;;;;;;;;;;; Horizontal Background Collision ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0393       		
F00:0394       		MOV r1, r10
               S01:080003E8:  0A 10 A0 E1
F00:0395       		MOV r2, r11
               S01:080003EC:  0B 20 A0 E1
F00:0396       		MOV r3, r8
               S01:080003F0:  08 30 A0 E1
F00:0397       		BL HorizontalCollision
               S01:080003F4:  56 01 00 EB
F00:0398       		
F00:0399       		;;;;;;;;;;;;;;;;;;;;;;; Animation ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0400       		
F00:0401       		;MOV r0, #PlayerFace
F00:0402       		;LDRB r1, [r0]
F00:0403       		
F00:0404       		;MOV r0, #PlayerCurrentAnim
F00:0405       		;LDRB r2, [r0]
F00:0406       		
F00:0407       		;MOV r0, #PlayerAnimIndex
F00:0408       		;LDRB r3, [r0]
F00:0409       	
F00:0410       		
F00:0411       		
F00:0412       		;;;;;;;;;;;;;;;;;;; Render images
F00:0413       		;No parameters, render handles that
F00:0414       		BL Render
               S01:080003F8:  AC 01 00 EB
F00:0415       		
F00:0416       		;Slow down frame rate (otherwise it looks very glitchy and everything moves too fast)
F00:0417       		MOV r0, #0x2000
               S01:080003FC:  02 0A A0 E3
F00:0418       		DelayFrame:
F00:0419       			SUBS r0, r0, #1
               S01:08000400:  01 00 50 E2
F00:0420       			BNE DelayFrame
               S01:08000404:  FD FF FF 1A
F00:0421       		DelayNextDraw:
F00:0422       			SUBS r0, r0, #1
               S01:08000408:  01 00 50 E2
F00:0423       			MOV r0, #ScanlineCounter
               S01:0800040C:  01 03 A0 E3 06 00 80 E3
F00:0424       			LDR r1, [r0]
               S01:08000414:  00 10 90 E5
F00:0425       			MOV r0, #ScreenYBound
               S01:08000418:  A0 00 A0 E3
F00:0426       			CMPS r1, r0
               S01:0800041C:  00 00 51 E1
F00:0427       			BGE DelayNextDraw
               S01:08000420:  F8 FF FF AA
F00:0428       		DelayNextBlank:
F00:0429       			SUBS r0, r0, #1
               S01:08000424:  01 00 50 E2
F00:0430       			MOV r0, #ScanlineCounter
               S01:08000428:  01 03 A0 E3 06 00 80 E3
F00:0431       			LDR r1, [r0]
               S01:08000430:  00 10 90 E5
F00:0432       			MOV r0, #ScreenYBound
               S01:08000434:  A0 00 A0 E3
F00:0433       			CMPS r1, r0
               S01:08000438:  00 00 51 E1
F00:0434       			BLT DelayNextBlank
               S01:0800043C:  F8 FF FF BA
F00:0435       		
F00:0436       	
F00:0437       	B GameLoop
               S01:08000440:  45 FF FF EA
F00:0438       	
F00:0439       AsciiTestAddress1:
F00:0440       	.LONG AsciiTest1	;Address of Ascii string
               S01:08000444:  48 04 00 08
F00:0441       AsciiTest1:
F00:0442       	.BYTE " !\"#$%&'()*+,-./0123456789:;<=",255	;All characters in font, 255 terminated
               S01:08000448:  20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F
               S01:08000458:  30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D
               S01:08000466:  FF
F00:0443       	;.BYTE "Test f",255
F00:0444       	.ALIGN 4	;Align to 4 bytes
F00:0445       	
F00:0446       AsciiTestAddress2:
F00:0447       	.LONG AsciiTest2
               S01:08000470:  74 04 00 08
F00:0448       AsciiTest2:
F00:0449       	.BYTE ">?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[",255
               S01:08000474:  3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D
               S01:08000484:  4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B
               S01:08000492:  FF
F00:0450       	.ALIGN 4
F00:0451       	
F00:0452       AsciiTestAddress3:
F00:0453       	.LONG AsciiTest3
               S01:080004A0:  A4 04 00 08
F00:0454       AsciiTest3:
F00:0455       	.BYTE "\\]^_`abcdefghijklmnopqrstuvwxy",255
               S01:080004A4:  5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B
               S01:080004B4:  6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79
               S01:080004C2:  FF
F00:0456       	.ALIGN 4
F00:0457       	
F00:0458       AsciiTestAddress4:
F00:0459       	.LONG AsciiTest4
               S01:080004D0:  D4 04 00 08
F00:0460       AsciiTest4:
F00:0461       	.BYTE "z{|}~",255
               S01:080004D4:  7A 7B 7C 7D 7E
               S01:080004D9:  FF
F00:0462       	.ALIGN 4
F00:0463       	
F00:0464       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0465       ;Bitmap includes
F00:0466       
F00:0467       SpriteTestAddress:
F00:0468       	.LONG SpriteTest
               S01:080004E0:  E4 04 00 08
F00:0469       SpriteTest:
F00:0470       	.incbin "\Bitmaps\StickPlayer.RAW"
               S01:080004E4:  00 FC 00 FC 00 FC 00 FC 00 FC 00 FC 00 FC 00 FC
               S01:080004F4:  00 FC 00 FC 00 FC 00 FC 00 FC 00 FC 00 FC 00 FC
F00:0471       	
F00:0472       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0473       
F00:0474       ScreenInit:
F00:0475       	STMFD sp!, {r0-r3, lr}
               S01:080006E4:  0F 40 2D E9
F00:0476       		;Actual screen initialization, tells console which mode we're in
F00:0477       		MOV r3, #LCDControl		;DISPCNT - LCD Control
               S01:080006E8:  01 33 A0 E3
F00:0478       		MOV r2, #0x100;0x403			;4 = Layer 2 on, 3 = ScreenMode 3 
               S01:080006EC:  01 2C A0 E3
F00:0479       		STR r2, [r3]			;Store layer and screen mode in LCD Control address
               S01:080006F0:  00 20 83 E5
F00:0480       		
F00:0481       		ADD r3, r3, #0x08;		;Get to BGOCNT - BGO Control at #0x04000008
               S01:080006F4:  08 30 83 E2
F00:0482       		MOV r2, #0x4004			;first 4 = Screen size (64x32 tilemap), last 4 = pattern base address, 0x06004000
               S01:080006F8:  01 29 A0 E3 04 20 82 E3
F00:0483       		STR r2, [r3]			;Store the values in BGO control
               S01:08000700:  00 20 83 E5
F00:0484       		
F00:0485       		;MOV r1, #BackgroundColor		;Color to fill
F00:0486       		;BL ClearToColor
F00:0487       	LDMFD sp!, {r0-r3, pc}
               S01:08000704:  0F 80 BD E8
F00:0488       	
F00:0489       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0490       BackgroundAndSpriteInit:
F00:0491       	STMFD sp!, {r0-r3, lr}
               S01:08000708:  0F 40 2D E9
F00:0492       	
F00:0493       		;Load Background Palette Colors
F00:0494       		ADRL r1, ColorPalette		;Palette Address
               S01:0800070C:  02 1B 8F E2 84 10 81 E2
F00:0495       		MOV r2, #BackgroundPaletteMemory
               S01:08000714:  05 24 A0 E3
F00:0496       		MOV r3, #16*2		;Number of colors * bytes per color
               S01:08000718:  20 30 A0 E3
F00:0497       		BL LoadHalfwords
               S01:0800071C:  30 00 00 EB
F00:0498       		
F00:0499       		;Load tilemap images
F00:0500       		ADRL r1, TilemapFiles	;File with tilemap patterns
               S01:08000720:  02 1B 8F E2 90 10 81 E2
F00:0501       		MOV r2, #VramTilemapPixelPatterns
               S01:08000728:  01 29 A0 E3 06 24 82 E3
F00:0502       		MOV r3, #TilemapFiles_END-TilemapFiles
               S01:08000730:  02 3B A0 E3
F00:0503       		BL LoadHalfwords
               S01:08000734:  2A 00 00 EB
F00:0504       		
F00:0505       		;Load tilemap patterns directly into VRAM
F00:0506       		ADRL r1, Tilemap
               S01:08000738:  2F 1C 8F E2 18 10 81 E2
F00:0507       		MOV r2, #VramBase	;Load the pattern into screen block 0 of character block 0
               S01:08000740:  06 24 A0 E3
F00:0508       		MOV r3, #Tilemap_END-Tilemap	;<width> x <height> tilemap with 2 bytes per tile
               S01:08000744:  01 3B A0 E3
F00:0509       		BL LoadBytes
               S01:08000748:  2B 00 00 EB
F00:0510       		
F00:0511       		;Load tilemap into Background Layer VRAM so our 32x32 tilemap becomes 64x32 and repeats
F00:0512       		ADRL r1, Tilemap
               S01:0800074C:  2F 1C 8F E2 04 10 81 E2
F00:0513       		MOV r2, #VramBackground	;Load the pattern into the screen block 1 of character block 0
               S01:08000754:  02 2B A0 E3 06 24 82 E3
F00:0514       		MOV r3, #Tilemap_END-Tilemap	;<width> x <height> tilemap with 2 bytes per tile
               S01:0800075C:  01 3B A0 E3
F00:0515       		BL LoadBytes
               S01:08000760:  25 00 00 EB
F00:0516       		
F00:0517       		;Load Sprite Palette Colors
F00:0518       		ADRL r1, ColorPalette		;Palette Address
               S01:08000764:  02 1B 8F E2 2C 10 81 E2
F00:0519       		MOV r2, #SpritePaletteMemory
               S01:0800076C:  02 2C A0 E3 05 24 82 E3
F00:0520       		MOV r3, #16*2		;Number of colors * bytes per color
               S01:08000774:  20 30 A0 E3
F00:0521       		BL LoadHalfwords
               S01:08000778:  19 00 00 EB
F00:0522       		
F00:0523       		;Load sprite images
F00:0524       		ADRL r1, SpriteFiles	;File with tilemap patterns
               S01:0800077C:  01 1A 8F E2 34 10 81 E2
F00:0525       		MOV r2, #VramSpritePixelPatterns
               S01:08000784:  01 28 A0 E3 06 24 82 E3
F00:0526       		MOV r3, #SpriteFiles_END-SpriteFiles
               S01:0800078C:  1E 3C A0 E3
F00:0527       		BL LoadHalfwords
               S01:08000790:  13 00 00 EB
F00:0528       		
F00:0529       		;Turn Screen On
F00:0530       		MOV r0, #LCDControl
               S01:08000794:  01 03 A0 E3
F00:0531       		MOV r1, #0x1140	;1 = Sprite on, 1 = layer on, 4 = 1D tile layout, 0 = screen mode 0
               S01:08000798:  45 1D A0 E3
F00:0532       		
F00:0533       		str r1, [r0]
               S01:0800079C:  00 10 80 E5
F00:0534       		
F00:0535       	LDMFD sp!, {r0-r3, pc}
               S01:080007A0:  0F 80 BD E8
F00:0536       	
F00:0537       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0538       ;r1 = color halfword
F00:0539       ClearToColor:
F00:0540       	STMFD sp!, {r1-r3, lr}
               S01:080007A4:  0E 40 2D E9
F00:0541       		MOV r3, #VramBase	;Start with vram base
               S01:080007A8:  06 34 A0 E3
F00:0542       		MOV r2, #240*160	;Take number of pixels in screen
               S01:080007AC:  96 2C A0 E3
F00:0543       		
F00:0544       FillScreen:
F00:0545       		STRH r1, [r3], #2	;Store halfword (color) into position in vram and increment it by 2 bytes (to next pixel)
               S01:080007B0:  B2 10 C3 E0
F00:0546       		SUBS r2, r2, #1		;Decrement and set signs of loop counter
               S01:080007B4:  01 20 52 E2
F00:0547       		BNE FillScreen		;Loop to fill screen
               S01:080007B8:  FC FF FF 1A
F00:0548       		
F00:0549       	LDMFD sp!, {r1-r3, pc}
               S01:080007BC:  0E 80 BD E8
F00:0550       	
F00:0551       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0552       ;r1 = X, r2 = Y
F00:0553       ;Return VRAM position of (x,Y)
F00:0554       ;Based on https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0555       GetScreenPos:
F00:0556       	STMFD sp!, {r1-r4, lr}
               S01:080007C0:  1E 40 2D E9
F00:0557       		MOV r0, #VramBase	;Vram
               S01:080007C4:  06 04 A0 E3
F00:0558       		MOV r3, #240*2		;bytes in a line (should be 240 * 2, but y position keeps getting shifted down by an extra factor of 2
               S01:080007C8:  1E 3E A0 E3
F00:0559       		MUL r2, r3, r2		;Multiply Y by line byte count
               S01:080007CC:  93 02 02 E0
F00:0560       		ADD r0, r0, r2		;Add number of bytes for y position
               S01:080007D0:  02 00 80 E0
F00:0561       		MOV r4, #2			;Move 2 into r4
               S01:080007D4:  02 40 A0 E3
F00:0562       		MUL r1, r4, r1		;Multiply x by 2, 2 bytes per pixel
               S01:080007D8:  94 01 01 E0
F00:0563       		ADD r0, r0, r1		;Add number of bytes for x position
               S01:080007DC:  01 00 80 E0
F00:0564       	LDMFD sp!, {r1-r4, pc}
               S01:080007E0:  1E 80 BD E8
F00:0565       	
F00:0566       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0567       ;r1 = Color Palette Location
F00:0568       ;r2 = GBA Palette Memory Location
F00:0569       ;r3 = number of bytes (halfwords, we load 2 at a time)
F00:0570       LoadHalfwords:
F00:0571       	STMFD sp!, {r1-r4, lr}
               S01:080007E4:  1E 40 2D E9
F00:0572       	
F00:0573       LoadHalfwordsRep:
F00:0574       		LDRH r4, [r1], #2	;Load current position in color palette into r1 and increment halfword
               S01:080007E8:  B2 40 D1 E0
F00:0575       		STRH r4, [r2], #2	;Store palette value in GBA Palette memory and increment halfword
               S01:080007EC:  B2 40 C2 E0
F00:0576       		
F00:0577       		SUBS r3, r3, #2
               S01:080007F0:  02 30 53 E2
F00:0578       		BNE LoadHalfwordsRep	;Repeat process until number of bytes reached
               S01:080007F4:  FB FF FF 1A
F00:0579       	
F00:0580       	LDMFD sp!, {r1-r4, pc}
               S01:080007F8:  1E 80 BD E8
F00:0581       	
F00:0582       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0583       ;r1 = Color Palette Location
F00:0584       ;r2 = GBA Palette Memory Location
F00:0585       ;r3 = number of bytes
F00:0586       LoadBytes:
F00:0587       	STMFD sp!, {r1-r4, lr}
               S01:080007FC:  1E 40 2D E9
F00:0588       	
F00:0589       LoadBytesRep:
F00:0590       		LDRB r4, [r1], #1	;Load current position in from byte array and increment 1 byte
               S01:08000800:  01 40 D1 E4
F00:0591       		STRH r4, [r2], #2	;Store palette value in halfword location and increment halfword
               S01:08000804:  B2 40 C2 E0
F00:0592       		
F00:0593       		SUBS r3, r3, #1
               S01:08000808:  01 30 53 E2
F00:0594       		BNE LoadBytesRep	;Repeat process until number of bytes reached
               S01:0800080C:  FB FF FF 1A
F00:0595       	
F00:0596       	LDMFD sp!, {r1-r4, pc}
               S01:08000810:  1E 80 BD E8
F00:0597       	
F00:0598       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0599       ;r1 = current VRAM position
F00:0600       ;Return VRAM position shifted down one line
F00:0601       ;https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0602       GetNextLine:
F00:0603       	ADD r0, r1, #240*2		;Simple add
               S01:08000814:  1E 0E 81 E2
F00:0604       	MOV pc, lr				;Return
               S01:08000818:  0E F0 A0 E1
F00:0605       	
F00:0606       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0607       ;r1 = current x position
F00:0608       ;r2 = current y position
F00:0609       ;r3 = next y position
F00:0610       ;Checks collision with background objects
F00:0611       ;Check player's position in relation to tiles
F00:0612       ;Get tile at that index in the tilemap ((TilemapWidth * y) + x)
F00:0613       ;If tile is equal or greater than the index mark (non-colliding tiles below, colliding tiles above) reset movement to 0
F00:0614       VerticalCollision:
F00:0615       	STMFD sp!, {r1-r7, lr}
               S01:0800081C:  FE 40 2D E9
F00:0616       		MOV r5, r3	;r5 = next y
               S01:08000820:  03 50 A0 E1
F00:0617       		MOV r6, r1	;r6 = current x
               S01:08000824:  01 60 A0 E1
F00:0618       		MOV r7, r2	;r7 = current y
               S01:08000828:  02 70 A0 E1
F00:0619       			
F00:0620       		CMP r5, r7
               S01:0800082C:  07 00 55 E1
F00:0621       		BEQ VerticalCollision_END
               S01:08000830:  43 00 00 0A
F00:0622       		BGT VerticalCollision_CheckDown	;Greater than means moving down since (0,0) is top left
               S01:08000834:  20 00 00 CA
F00:0623       		;Otherwise, we are less than and don't need to check
F00:0624       			
F00:0625       		VerticalCollision_CheckUp:
F00:0626       		;;;;;;;;;;;Top Left Collision
F00:0627       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0628       		MOV r1, r6	;Load player X position into first register
               S01:08000838:  06 10 A0 E1
F00:0629       		;Add nothing to get rightmost x value
F00:0630       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:0800083C:  08 20 A0 E3
F00:0631       		BL DIV
               S01:08000840:  C4 01 00 EB
F00:0632       		MOV r3, r0
               S01:08000844:  00 30 A0 E1
F00:0633       		
F00:0634       		MOV r1, r5	;Load player next Y position into first register
               S01:08000848:  05 10 A0 E1
F00:0635       		;Add nothing to get top X value
F00:0636       		MOV r2, #TileLength	;Divide Y by length of a tile
               S01:0800084C:  08 20 A0 E3
F00:0637       		BL DIV
               S01:08000850:  C0 01 00 EB
F00:0638       		MOV r4, r0
               S01:08000854:  00 40 A0 E1
F00:0639       		
F00:0640       		;Load tile index from tilemap
F00:0641       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000858:  2D 0C 8F E2 F8 00 80 E2
F00:0642       		MOV r1, #TilemapWidth
               S01:08000860:  20 10 A0 E3
F00:0643       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:08000864:  91 34 22 E0
F00:0644       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:08000868:  02 40 D0 E7
F00:0645       		
F00:0646       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0647       		CMP r4, #BackgroundCollideLimit
               S01:0800086C:  12 00 54 E3
F00:0648       		MOVGTE r5, r7	;If colliding, reset y position
               S01:08000870:  07 50 A0 C1
F00:0649       		BGE VerticalCollision_END	;End early, if we collided here, we couldn't have collided in the opposite direction and we 
               S01:08000874:  32 00 00 AA
F00:0650       		
F00:0651       		;;;;;;;;;;;Top Right Collision
F00:0652       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0653       		MOV r1, r6	;Load player X position into first register
               S01:08000878:  06 10 A0 E1
F00:0654       		ADD r1, r1, #PlayerWidth-1	;Add width of player to get rightmost x value, subtract 1 to get flush with wall (so we get
               S01:0800087C:  0F 10 81 E2
F00:0655       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000880:  08 20 A0 E3
F00:0656       		BL DIV
               S01:08000884:  B3 01 00 EB
F00:0657       		MOV r3, r0
               S01:08000888:  00 30 A0 E1
F00:0658       		
F00:0659       		MOV r1, r5	;Load player Y position into first register
               S01:0800088C:  05 10 A0 E1
F00:0660       		;Add nothing to get top X value
F00:0661       		MOV r2, #TileLength	;Divide Y by length of a tile
               S01:08000890:  08 20 A0 E3
F00:0662       		BL DIV
               S01:08000894:  AF 01 00 EB
F00:0663       		MOV r4, r0
               S01:08000898:  00 40 A0 E1
F00:0664       		
F00:0665       		;Load tile index from tilemap
F00:0666       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:0800089C:  2D 0C 8F E2 B4 00 80 E2
F00:0667       		MOV r1, #TilemapWidth
               S01:080008A4:  20 10 A0 E3
F00:0668       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:080008A8:  91 34 22 E0
F00:0669       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:080008AC:  02 40 D0 E7
F00:0670       		
F00:0671       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0672       		CMP r4, #BackgroundCollideLimit
               S01:080008B0:  12 00 54 E3
F00:0673       		MOVGTE r5, r7	;If colliding, reset y position
               S01:080008B4:  07 50 A0 C1
F00:0674       		
F00:0675       		B VerticalCollision_END	;Finished checking up, skip to end
               S01:080008B8:  21 00 00 EA
F00:0676       		
F00:0677       		VerticalCollision_CheckDown:
F00:0678       		;;;;;;;;;;;Bottom Left Collision
F00:0679       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0680       		MOV r1, r6	;Load player X position into first register
               S01:080008BC:  06 10 A0 E1
F00:0681       		;Add nothing to get left x value
F00:0682       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:080008C0:  08 20 A0 E3
F00:0683       		BL DIV
               S01:080008C4:  A3 01 00 EB
F00:0684       		MOV r3, r0
               S01:080008C8:  00 30 A0 E1
F00:0685       		
F00:0686       		;Y index is found the same way
F00:0687       		MOV r1, r5	;Load player X position into first register
               S01:080008CC:  05 10 A0 E1
F00:0688       		ADD r1, r1, #PlayerHeight-1	;Add height of player to get bottom y level, subtract 1 to get flush with wall (so we get 
               S01:080008D0:  0F 10 81 E2
F00:0689       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:080008D4:  08 20 A0 E3
F00:0690       		BL DIV
               S01:080008D8:  9E 01 00 EB
F00:0691       		MOV r4, r0
               S01:080008DC:  00 40 A0 E1
F00:0692       		
F00:0693       		;Load tile index from tilemap
F00:0694       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:080008E0:  2D 0C 8F E2 70 00 80 E2
F00:0695       		MOV r1, #TilemapWidth
               S01:080008E8:  20 10 A0 E3
F00:0696       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:080008EC:  91 34 22 E0
F00:0697       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:080008F0:  02 40 D0 E7
F00:0698       		
F00:0699       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0700       		CMP r4, #BackgroundCollideLimit
               S01:080008F4:  12 00 54 E3
F00:0701       		MOVGTE r5, r7	;If colliding, reset y position
               S01:080008F8:  07 50 A0 C1
F00:0702       		BGE VerticalCollision_END
               S01:080008FC:  10 00 00 AA
F00:0703       		
F00:0704       		;;;;;;;;;;;Bottom Right Collision
F00:0705       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0706       		MOV r1, r6	;Load player X position into first register
               S01:08000900:  06 10 A0 E1
F00:0707       		ADD r1, r1, #PlayerWidth-1;Add width to get right x value, subtract 1 to get flush with wall (so we get index INSIDE t
               S01:08000904:  0F 10 81 E2
F00:0708       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000908:  08 20 A0 E3
F00:0709       		BL DIV
               S01:0800090C:  91 01 00 EB
F00:0710       		MOV r3, r0
               S01:08000910:  00 30 A0 E1
F00:0711       		
F00:0712       		;Y index is found the same way
F00:0713       		MOV r1, r5	;Load player X position into first register
               S01:08000914:  05 10 A0 E1
F00:0714       		ADD r1, r1, #PlayerHeight-1	;Add height of player to get bottom y level, subtract 1 to get flush with wall (so we get 
               S01:08000918:  0F 10 81 E2
F00:0715       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:0800091C:  08 20 A0 E3
F00:0716       		BL DIV
               S01:08000920:  8C 01 00 EB
F00:0717       		MOV r4, r0
               S01:08000924:  00 40 A0 E1
F00:0718       		
F00:0719       		;Load tile index from tilemap
F00:0720       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000928:  2D 0C 8F E2 28 00 80 E2
F00:0721       		MOV r1, #TilemapWidth
               S01:08000930:  20 10 A0 E3
F00:0722       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:08000934:  91 34 22 E0
F00:0723       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:08000938:  02 40 D0 E7
F00:0724       		
F00:0725       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0726       		CMP r4, #BackgroundCollideLimit
               S01:0800093C:  12 00 54 E3
F00:0727       		MOVGE r5, r7	;If colliding, reset y position
               S01:08000940:  07 50 A0 A1
F00:0728       		
F00:0729       		VerticalCollision_END:
F00:0730       		
F00:0731       		;Update memory with new position
F00:0732       		MOV r6, #PlayerY
               S01:08000944:  02 64 A0 E3 23 60 86 E3
F00:0733       		STRB r5, [r6]
               S01:0800094C:  00 50 C6 E5
F00:0734       	LDMFD sp!, {r1-r7, pc}
               S01:08000950:  FE 80 BD E8
F00:0735       	
F00:0736       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0737       ;r1 = current x position
F00:0738       ;r2 = current y position
F00:0739       ;r3 = next x position
F00:0740       ;Checks collision with background objects
F00:0741       ;Check player's position in relation to tiles
F00:0742       ;Get tile at that index in the tilemap ((TilemapWidth * y) + x)
F00:0743       ;If tile is equal or greater than the index mark (non-colliding tiles below, colliding tiles above) reset movement to 0
F00:0744       HorizontalCollision:
F00:0745       	STMFD sp!, {r1-r7, lr}
               S01:08000954:  FE 40 2D E9
F00:0746       		MOV r5, r3	;r5 = next y
               S01:08000958:  03 50 A0 E1
F00:0747       		MOV r6, r1	;r6 = current x
               S01:0800095C:  01 60 A0 E1
F00:0748       		MOV r7, r2	;r7 = current y
               S01:08000960:  02 70 A0 E1
F00:0749       		
F00:0750       		CMP r5, r6	;Compare new position to last position
               S01:08000964:  06 00 55 E1
F00:0751       		BEQ HorizontalCollision_END	;If equal, we haven't moved, don't need to check collision
               S01:08000968:  43 00 00 0A
F00:0752       		BGT HorizontalCollision_CheckRight	;If current is greater than last position
               S01:0800096C:  20 00 00 CA
F00:0753       		
F00:0754       		HorizontalCollision_CheckLeft:
F00:0755       		;Checking just x component (in case colliding trying to move vertically also and there isn't a collision there or vice
F00:0756       		;;;;;;;;;;;Top Left Collision
F00:0757       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0758       		MOV r1, r5	;Load player X position into first register
               S01:08000970:  05 10 A0 E1
F00:0759       		;Add nothing to get rightmost x value
F00:0760       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000974:  08 20 A0 E3
F00:0761       		BL DIV
               S01:08000978:  76 01 00 EB
F00:0762       		MOV r3, r0
               S01:0800097C:  00 30 A0 E1
F00:0763       		
F00:0764       		;Y index is found the same way
F00:0765       		MOV r1, r7	;Load player y position into first register
               S01:08000980:  07 10 A0 E1
F00:0766       		;Add nothing to get top y value
F00:0767       		MOV r2, #TileLength	;Divide y by length of a tile
               S01:08000984:  08 20 A0 E3
F00:0768       		BL DIV
               S01:08000988:  72 01 00 EB
F00:0769       		MOV r4, r0
               S01:0800098C:  00 40 A0 E1
F00:0770       		
F00:0771       		;Load tile index from tilemap
F00:0772       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000990:  0B 0B 8F E2 C0 00 80 E2
F00:0773       		MOV r1, #TilemapWidth
               S01:08000998:  20 10 A0 E3
F00:0774       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:0800099C:  91 34 22 E0
F00:0775       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:080009A0:  02 40 D0 E7
F00:0776       		
F00:0777       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0778       		CMP r4, #BackgroundCollideLimit
               S01:080009A4:  12 00 54 E3
F00:0779       		MOVGTE r5, r6	;If colliding, reset x position
               S01:080009A8:  06 50 A0 C1
F00:0780       		BGE HorizontalCollision_END
               S01:080009AC:  32 00 00 AA
F00:0781       		
F00:0782       		;;;;;;;;;;;Bottom Left Collision
F00:0783       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0784       		MOV r1, r5	;Load player X position into first register
               S01:080009B0:  05 10 A0 E1
F00:0785       		;Add nothing to get left x value
F00:0786       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:080009B4:  08 20 A0 E3
F00:0787       		BL DIV
               S01:080009B8:  66 01 00 EB
F00:0788       		MOV r3, r0
               S01:080009BC:  00 30 A0 E1
F00:0789       		
F00:0790       		;Y index is found the same way
F00:0791       		MOV r1, r7	;Load player X position into first register
               S01:080009C0:  07 10 A0 E1
F00:0792       		ADD r1, r1, #PlayerHeight-1	;Add height of player to get bottom y level, subtract 1 to get flush with wall (so we get 
               S01:080009C4:  0F 10 81 E2
F00:0793       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:080009C8:  08 20 A0 E3
F00:0794       		BL DIV
               S01:080009CC:  61 01 00 EB
F00:0795       		MOV r4, r0
               S01:080009D0:  00 40 A0 E1
F00:0796       		
F00:0797       		;Load tile index from tilemap
F00:0798       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:080009D4:  0B 0B 8F E2 7C 00 80 E2
F00:0799       		MOV r1, #TilemapWidth
               S01:080009DC:  20 10 A0 E3
F00:0800       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:080009E0:  91 34 22 E0
F00:0801       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:080009E4:  02 40 D0 E7
F00:0802       		
F00:0803       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0804       		CMP r4, #BackgroundCollideLimit
               S01:080009E8:  12 00 54 E3
F00:0805       		MOVGTE r5, r6	;If colliding, reset x position
               S01:080009EC:  06 50 A0 C1
F00:0806       		BGE HorizontalCollision_END
               S01:080009F0:  21 00 00 AA
F00:0807       		
F00:0808       		HorizontalCollision_CheckRight:
F00:0809       		
F00:0810       		;;;;;;;;;;;Top Right Collision
F00:0811       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0812       		MOV r1, r5	;Load player X position into first register
               S01:080009F4:  05 10 A0 E1
F00:0813       		ADD r1, r1, #PlayerWidth-1	;Add width of player to get rightmost x value, subtract 1 to get flush with wall (so we get
               S01:080009F8:  0F 10 81 E2
F00:0814       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:080009FC:  08 20 A0 E3
F00:0815       		BL DIV
               S01:08000A00:  54 01 00 EB
F00:0816       		MOV r3, r0
               S01:08000A04:  00 30 A0 E1
F00:0817       		
F00:0818       		;Y index is found the same way
F00:0819       		MOV r1, r7	;Load player X position into first register
               S01:08000A08:  07 10 A0 E1
F00:0820       		;Add nothing to get top y value
F00:0821       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000A0C:  08 20 A0 E3
F00:0822       		BL DIV
               S01:08000A10:  50 01 00 EB
F00:0823       		MOV r4, r0
               S01:08000A14:  00 40 A0 E1
F00:0824       		
F00:0825       		;Load tile index from tilemap
F00:0826       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000A18:  0B 0B 8F E2 38 00 80 E2
F00:0827       		MOV r1, #TilemapWidth
               S01:08000A20:  20 10 A0 E3
F00:0828       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:08000A24:  91 34 22 E0
F00:0829       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:08000A28:  02 40 D0 E7
F00:0830       		
F00:0831       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0832       		CMP r4, #BackgroundCollideLimit
               S01:08000A2C:  12 00 54 E3
F00:0833       		MOVGTE r5, r6	;If colliding, reset x position
               S01:08000A30:  06 50 A0 C1
F00:0834       		BGE HorizontalCollision_END
               S01:08000A34:  10 00 00 AA
F00:0835       		
F00:0836       		;;;;;;;;;;;Bottom Right Collision
F00:0837       		;X index in tilemap is ((playerX - TileLength) / TileLength)
F00:0838       		MOV r1, r5	;Load player X position into first register
               S01:08000A38:  05 10 A0 E1
F00:0839       		ADD r1, r1, #PlayerWidth-1;Add width to get right x value, subtract 1 to get flush with wall (so we get index INSIDE t
               S01:08000A3C:  0F 10 81 E2
F00:0840       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000A40:  08 20 A0 E3
F00:0841       		BL DIV
               S01:08000A44:  43 01 00 EB
F00:0842       		MOV r3, r0
               S01:08000A48:  00 30 A0 E1
F00:0843       		
F00:0844       		;Y index is found the same way
F00:0845       		MOV r1, r7	;Load player X position into first register
               S01:08000A4C:  07 10 A0 E1
F00:0846       		ADD r1, r1, #PlayerHeight-1	;Add height of player to get bottom y level, subtract 1 to get flush with wall (so we get 
               S01:08000A50:  0F 10 81 E2
F00:0847       		MOV r2, #TileLength	;Divide X by length of a tile
               S01:08000A54:  08 20 A0 E3
F00:0848       		BL DIV
               S01:08000A58:  3E 01 00 EB
F00:0849       		MOV r4, r0
               S01:08000A5C:  00 40 A0 E1
F00:0850       		
F00:0851       		;Load tile index from tilemap
F00:0852       		ADRL r0, Tilemap	;Get addresses of tilemap, far away in code so use ADRL
               S01:08000A60:  2B 0C 8F E2 F0 00 80 E2
F00:0853       		MOV r1, #TilemapWidth
               S01:08000A68:  20 10 A0 E3
F00:0854       		MLA r2, r1, r4, r3	;r2 = ((r1 * r4) + r3) -> Load the tile at specified position from tilemap (Tilemap address + ((til
               S01:08000A6C:  91 34 22 E0
F00:0855       		LDRB r4, [r0, r2]	;Load data in tilemap
               S01:08000A70:  02 40 D0 E7
F00:0856       		
F00:0857       		;If greater than or equal to colliding limit, then we reset position to prevent movement and "collide" with the tile
F00:0858       		CMP r4, #BackgroundCollideLimit
               S01:08000A74:  12 00 54 E3
F00:0859       		MOVGTE r5, r6	;If colliding, reset x position
               S01:08000A78:  06 50 A0 C1
F00:0860       		
F00:0861       		HorizontalCollision_END:
F00:0862       		
F00:0863       		;Update memory with new position
F00:0864       		MOV r6, #PlayerX
               S01:08000A7C:  02 64 A0 E3 22 60 86 E3
F00:0865       		STRB r5, [r6]
               S01:08000A84:  00 50 C6 E5
F00:0866       	LDMFD sp!, {r1-r7, pc}
               S01:08000A88:  FE 80 BD E8
F00:0867       
F00:0868       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0869       ;r1 = Sprite number to draw
F00:0870       ;r2 = First sprite attribute (See code below for format)
F00:0871       ;r3 = Second sprite attribute (See code below for format)
F00:0872       ;r4	= Third sprite attribute (See code below for format)
F00:0873       ;Based on https://www.chibialiens.com/arm/platform.php#LessonP2
F00:0874       ;Redesigned slightly, GetNextLine was extracted into it's own function
F00:0875       DrawSprite:
F00:0876       	STMFD sp!, {r1-r5, lr}
               S01:08000A8C:  3E 40 2D E9
F00:0877       		MOV r5, #SpriteOAMSettings
               S01:08000A90:  07 54 A0 E3
F00:0878       		ADD r5, r5, r1, asl #3	;First 8 bytes is the sprite number, bit shift left to get 8 so we can set the first sprite att
               S01:08000A94:  81 51 85 E0
F00:0879       		
F00:0880       		;S=Shape Square / HRect / VRect
F00:0881       		;C=Colors 15/256
F00:0882       		;M=Mosaic
F00:0883       		;T=Transparent
F00:0884       		;D=Disable/Doublesize
F00:0885       		;R=Rotation
F00:0886       		;Y=Ypos
F00:0887       		;First Attribute - SSCMTTDRYYYYYYYY
F00:0888       		STRH r2, [r5]
               S01:08000A98:  B0 20 45 E1
F00:0889       		ADD r5, r5, #2	;Move to next halfword to set the second sprite attribute
               S01:08000A9C:  02 50 85 E2
F00:0890       		
F00:0891       		;S=Obj Size
F00:0892       		;VH=V/HFlip
F00:0893       		;R=Rotation Parameter
F00:0894       		;X=Xpos
F00:0895       		;Second Attribute - SSVHRRRXXXXXXXXX
F00:0896       		STRH r3, [r5]
               S01:08000AA0:  B0 30 45 E1
F00:0897       		ADD r5, r5, #2 ;Move to next halfword to set the third sprite attribute
               S01:08000AA4:  02 50 85 E2
F00:0898       		
F00:0899       		;C=Color Palette
F00:0900       		;P=Priority
F00:0901       		;T=Tile Number
F00:0902       		;Third Attribute - CCCCPPTTTTTTTTTT
F00:0903       		STRH r4, [r5]
               S01:08000AA8:  B0 40 45 E1
F00:0904       	LDMFD sp!, {r1-r5, pc}
               S01:08000AAC:  3E 80 BD E8
F00:0905       	
F00:0906       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0907       ;Choose which frame to render and then render it
F00:0908       ;
F00:0909       Render:
F00:0910       	STMFD sp!, {r1-r7, lr}
               S01:08000AB0:  FE 40 2D E9
F00:0911       		;See DrawSprite for meanings of the sprite attribute bits (r2-r4)
F00:0912       		MOV r1, #PlayerSpriteNum
               S01:08000AB4:  01 10 A0 E3
F00:0913       		
F00:0914       		MOV r2,#0b0000000000000000
               S01:08000AB8:  00 20 A0 E3
F00:0915       		MOV r4, #PlayerY
               S01:08000ABC:  02 44 A0 E3 23 40 84 E3
F00:0916       		LDRB r5, [r4]
               S01:08000AC4:  00 50 D4 E5
F00:0917       		ADD r2, r2, r5	;Add y pos to first sprite attribute (y pos is lowest 8 bits)
               S01:08000AC8:  05 20 82 E0
F00:0918       		
F00:0919       		MOV r3,#0b0100000000000000
               S01:08000ACC:  01 39 A0 E3
F00:0920       		MOV r4, #PlayerX
               S01:08000AD0:  02 44 A0 E3 22 40 84 E3
F00:0921       		LDRB r5, [r4]
               S01:08000AD8:  00 50 D4 E5
F00:0922       		ADD r3, r3, r5	;Add x pos to second sprite attribute (x pos is lowest 9 bits)
               S01:08000ADC:  05 30 83 E0
F00:0923       		
F00:0924       		MOV r4,#0b0000000000000000
               S01:08000AE0:  00 40 A0 E3
F00:0925       		
F00:0926       		;;;;;;;;;;;;;;; Animation ;;;;;;;;;;;;;;;;;; - Change the start tile we choose from the sprite tileset
F00:0927       		MOV r0, #PlayerCurrentAnimBegin	;Get address to the current address where animation indices beginning
               S01:08000AE4:  02 04 A0 E3 2C 00 80 E3
F00:0928       		LDR r5, [r0]	;Access memory and get address of the beginning of current animation
               S01:08000AEC:  00 50 90 E5
F00:0929       		MOV r0, #PlayerCurrentAnimIndex	;Address of index in current animation
               S01:08000AF0:  02 04 A0 E3 28 00 80 E3
F00:0930       		LDRB r6, [r0]		;Get index within current animation
               S01:08000AF8:  00 60 D0 E5
F00:0931       		LDRB r7, [r5, r6];Get actual index from beginning address location + index offset
               S01:08000AFC:  06 70 D5 E7
F00:0932       		ADD r4, r4, r7	;Add index in tilemap of the starting tile to draw for the player
               S01:08000B00:  07 40 84 E0
F00:0933       		
F00:0934       		;ADRL r0, Anim_PlayerIdleDown	;Load idle animation address
F00:0935       		;MOV r5, #PlayerCurrentAnimIndex	;Address of index in current animation
F00:0936       		;LDRB r6, [r5]	;Load index in current animation
F00:0937       		;LDRB r7, [r0, r6]	;Access r6 index in r0, the animation, to get the sprite tile index in the sprite tiles' tilemap
F00:0938       		;ADD r4, r4, r7
F00:0939       		
F00:0940       		;Draw sprite after getting current frame, parameters loaded in r1-r4
F00:0941       		BL DrawSprite
               S01:08000B04:  E0 FF FF EB
F00:0942       		
F00:0943       		;ADD r6, r6, #1	;Increment address to next index (one byte)
F00:0944       		MOV r0, #PlayerCurrentAnimEnd	;Get address of the current address where animation indices end
               S01:08000B08:  02 04 A0 E3 30 00 80 E3
F00:0945       		LDR r4, [r0]	;Get memory location where animation ends
               S01:08000B10:  00 40 90 E5
F00:0946       		SUB r4, r4, #1	;(- 1 to get the index of the last frame, not just past the last frame)
               S01:08000B14:  01 40 44 E2
F00:0947       		
F00:0948       		ADD r6, r6, #1	;Increment memory to see if next is equal to end of array
               S01:08000B18:  01 60 86 E2
F00:0949       		ADD r7, r5, r6	;Get start memory address + offset
               S01:08000B1C:  06 70 85 E0
F00:0950       		
F00:0951       		MOV r1, #PlayerCurrentAnimIndex	;Address of index in current animation
               S01:08000B20:  02 14 A0 E3 28 10 81 E3
F00:0952       		
F00:0953       		CMP r7, r4	;Test current address against end address
               S01:08000B28:  04 00 57 E1
F00:0954       		;MOVGTE r0, #PlayerCurrentAnimBegin	;If greater or equal, loop back to beginning of animation
F00:0955       			EORGTE r6, r6, r6	;Clear index to 0
               S01:08000B2C:  06 60 26 C0
F00:0956       			STRBGTE r6, [r1]	;If current address is equal or greater than end, reset the current address in memory to the address
               S01:08000B30:  00 60 81 E5
F00:0957       			
F00:0958       			STRBLT r6, [r1]	;Otherwise, store this new animation index as our current address
               S01:08000B34:  00 60 81 E5
F00:0959       		
F00:0960       	LDMFD sp!, {r1-r7, pc}
               S01:08000B38:  FE 80 BD E8
F00:0961       	
F00:0962       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0963       ;Use E conditional to check if pressed
F00:0964       ;r1 = key mask
F00:0965       ;Returns keymask in r0
F00:0966       GetButton:
F00:0967       	STMFD sp!, {r1-r2, lr}
               S01:08000B3C:  06 40 2D E9
F00:0968       		EOR r0, r0, r0
               S01:08000B40:  00 00 20 E0
F00:0969       		MOV r2, #InputLocation	;Input memory location
               S01:08000B44:  13 2E A0 E3 01 23 82 E3
F00:0970       		LDRH r0, [r2]			;Get value of input, (1 = not pressed)
               S01:08000B4C:  B0 00 52 E1
F00:0971       		MOV r2, #MaskKey		;Mask out superfluous bits
               S01:08000B50:  3F 2B A0 E3
F00:0972       		BIC r0, r0, r2			;Inverse AND the register to only keep input bits (last 10 bits)
               S01:08000B54:  02 00 C0 E1
F00:0973       		AND r0, r0, r1			;AND return register with input bits with the passed key mask
               S01:08000B58:  01 00 00 E0
F00:0974       	LDMFD sp!, {r1-r2, pc}
               S01:08000B5C:  06 80 BD E8
F00:0975       
F00:0976       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0977       
F00:0978       .INCLUDE "GBA_Core.asm"
F01:0001       .EQU Ram, 0x02000000	;RAM on the GBA starts at 0x02000000, builds upwards, can store whatever we want whereever we want,
F01:0002       
F01:0003       .EQU Stack, 0x03000000
F01:0004       
F01:0005       ;Used in a different screen mode
F01:0006       
F01:0007       .EQU LCDControl, 0x04000000			;Controls which layers are on, what sceenmode we're in
F01:0008       .EQU ScanlineCounter, 0x04000006	;Stores how many lines have been written
F01:0009       
F01:0010       .EQU BackgroundPaletteMemory, 0x05000000		;Location of GBA background palettes in memory
F01:0011       .EQU SpritePaletteMemory, 0x05000200	;Location of GBA hardware sprite palettes in memory memory
F01:0012       
F01:0013       .EQU VramBase, 0x06000000	;Base of VRAM, where address of data that is written to the screen starts, starts at Character
F01:0014       .EQU VramTilemapPixelPatterns, 0x06004000	;Location of tile pixels patterns (images) in memory, starts at Character Bloc
F01:0015       .EQU VramBackground, 0x06000800	;Memory location in VRAM of background layer, Screen Block 1 of Character Block 0
F01:0016       .EQU VramSpritePixelPatterns, 0x06010000	;Location of GBA sprite pixels patterns (images) in memory, screen block 2
F01:0017       
F01:0018       .EQU SpriteOAMSettings, 0x07000000	;Memory address for attributes for sprites that determine how they're drawn
F00:0979       .INCLUDE "GBA_Text.asm"
F02:0001       .include "GBA_Core.asm"
F03:0001       .EQU Ram, 0x02000000	;RAM on the GBA starts at 0x02000000, builds upwards, can store whatever we want whereever we want,
F03:0002       
F03:0003       .EQU Stack, 0x03000000
F03:0004       
F03:0005       ;Used in a different screen mode
F03:0006       
F03:0007       .EQU LCDControl, 0x04000000			;Controls which layers are on, what sceenmode we're in
F03:0008       .EQU ScanlineCounter, 0x04000006	;Stores how many lines have been written
F03:0009       
F03:0010       .EQU BackgroundPaletteMemory, 0x05000000		;Location of GBA background palettes in memory
F03:0011       .EQU SpritePaletteMemory, 0x05000200	;Location of GBA hardware sprite palettes in memory memory
F03:0012       
F03:0013       .EQU VramBase, 0x06000000	;Base of VRAM, where address of data that is written to the screen starts, starts at Character
F03:0014       .EQU VramTilemapPixelPatterns, 0x06004000	;Location of tile pixels patterns (images) in memory, starts at Character Bloc
F03:0015       .EQU VramBackground, 0x06000800	;Memory location in VRAM of background layer, Screen Block 1 of Character Block 0
F03:0016       .EQU VramSpritePixelPatterns, 0x06010000	;Location of GBA sprite pixels patterns (images) in memory, screen block 2
F03:0017       
F03:0018       .EQU SpriteOAMSettings, 0x07000000	;Memory address for attributes for sprites that determine how they're drawn
F02:0002       
F02:0003       .EQU CursorX, Ram+32	;32 bits past ram start
F02:0004       .EQU CursorY, Ram+33	;1 bit past CursorX
F02:0005       
F02:0006       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F02:0007       ;Comments added by me, Dillon Drummond
F02:0008       NewLine:
F02:0009       	STMFD sp!, {r0-r1, lr}	;Store stack pointer, registers 0-12, and link register on stack so we don't lose info from the 
               S01:08000B60:  03 40 2D E9
F02:0010       		MOV r0, #CursorX	;Get address of cursor x
               S01:08000B64:  02 04 A0 E3 20 00 80 E3
F02:0011       		EOR r1, r1, r1		;Clear r1
               S01:08000B6C:  01 10 21 E0
F02:0012       		STRB r1, [r0]		;Store 0 from r1 in CursorX, move cursor back to left side of screen
               S01:08000B70:  00 10 C0 E5
F02:0013       		
F02:0014       		MOV r0, #CursorY	;Get Y address
               S01:08000B74:  02 04 A0 E3 21 00 80 E3
F02:0015       		LDRB r1, [r0]		;Store CursorY valye in r1
               S01:08000B7C:  00 10 D0 E5
F02:0016       		ADD r1, r1, #1		;Add 1 to CursorY
               S01:08000B80:  01 10 81 E2
F02:0017       		STRB r1, [r0]		;Store the incremented CursorY vlaue in CursorY, moves cursor down
               S01:08000B84:  00 10 C0 E5
F02:0018       	LDMFD sp!, {r0-r1, pc}	;Load registers from stack, put link register in program counter to return
               S01:08000B88:  03 80 BD E8
F02:0019       
F02:0020       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F02:0021       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F02:0022       ;Comments added by me, Dillon Drummond
F02:0023       ;Some changes made
F02:0024       ;Paramters: r1 = string address
F02:0025       WriteText:
F02:0026       	STMFD sp!, {r0-r2, lr}
               S01:08000B8C:  07 40 2D E9
F02:0027       		MOV r2, r1			;Store parameter in temp variable so new parameter can be passed to WriteChar
               S01:08000B90:  01 20 A0 E1
F02:0028       		
F02:0029       RepeatWriteText:
F02:0030       		LDRB r1, [r2], #1 	;Load byte then shift by 1
               S01:08000B94:  01 10 D2 E4
F02:0031       		CMPS r1, #255		;Check if char is null terminator
               S01:08000B98:  FF 00 51 E3
F02:0032       		BEQ WriteTextDone	;If null terminator, exit
               S01:08000B9C:  01 00 00 0A
F02:0033       		BL WriteChar		;Otherwise, write character
               S01:08000BA0:  01 00 00 EB
F02:0034       		B RepeatWriteText	;Go back to begining of this block and check if there is another character or if at null terminator
               S01:08000BA4:  FA FF FF EA
F02:0035       	
F02:0036       WriteTextDone:
F02:0037       	LDMFD sp!, {r0-r2, pc}
               S01:08000BA8:  07 80 BD E8
F02:0038       	
F02:0039       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F02:0040       ;Source: https://www.chibialiens.com/arm/helloworld.php#LessonH2
F02:0041       ;Comments added by me, Dillon Drummond
F02:0042       ;r1 = character to write
F02:0043       WriteChar:
F02:0044       	STMFD sp!, {r0-r12, lr}	;Store registers and link register
               S01:08000BAC:  FF 5F 2D E9
F02:0045       		;Clear r4 and r5
F02:0046       		EOR r4, r4, r4
               S01:08000BB0:  04 40 24 E0
F02:0047       		EOR r5, r5, r5
               S01:08000BB4:  05 50 25 E0
F02:0048       		
F02:0049       		;Loading address of cursor x and y then loading values into r4 and r5
F02:0050       		MOV r3, #CursorX
               S01:08000BB8:  02 34 A0 E3 20 30 83 E3
F02:0051       		LDRB r4, [r3]
               S01:08000BC0:  00 40 D3 E5
F02:0052       		MOV r3, #CursorY
               S01:08000BC4:  02 34 A0 E3 21 30 83 E3
F02:0053       		LDRB r5, [r3]
               S01:08000BCC:  00 50 D3 E5
F02:0054       		
F02:0055       		;r4 = cursor x position, r5 = cursor y position
F02:0056       		
F02:0057       		MOV r3, #VramBase	;Load VRAM base address in, addresses after this point will modify screen, 2 bytes, half word, 16 bi
               S01:08000BD0:  06 34 A0 E3
F02:0058       		
F02:0059       		;Each char is 8 x 8 pixels
F02:0060       		;Each pixel is 2 bytes
F02:0061       		;8 lines of 16 bytes
F02:0062       		MOV r6, #16		;Bytes in a line of character
               S01:08000BD4:  10 60 A0 E3
F02:0063       		MUL r2, r4, r6	;Multiply cursor x position by 16
               S01:08000BD8:  94 06 02 E0
F02:0064       		ADD r3, r3, r2	;Add that position to r2 so we are at that x position in VRAM
               S01:08000BDC:  02 30 83 E0
F02:0065       		
F02:0066       		MOV r4, #240*8*2	;240 pixels per row, 8 lines per char, 2 bytes per pixel, (no longer need cursor x position, can writ
               S01:08000BE0:  0F 4C A0 E3
F02:0067       		MUL r2, r5, r4		;cursor y position * bytes per char row (8 screen lines, 240 pixels per line, 2 bytes per pixel)
               S01:08000BE4:  95 04 02 E0
F02:0068       		ADD r3, r3, r2		;Add number of bytes to move over in x direction (r3) and number of bytes to move down in the y direct
               S01:08000BE8:  02 30 83 E0
F02:0069       		
F02:0070       		;I added this, could potentially cause problems
F02:0071       		;Within each 8x8 space for chars, they are offset to the right by one pixel for some reason.  Since r3 is the location
F02:0072       		;;;;;;;;;;;;;;;;;;;;;;;
F02:0073       		SUB r3, r3, #2	;Subtract 1 byte from position, solves 1 byte right offset within each char space, may have something t
               S01:08000BEC:  02 30 43 E2
F02:0074       		;;;;;;;;;;;;;;;;;;;;;;;
F02:0075       		
F02:0076       		ADR r4,BitmapFont 	;Load address of font into r4
               S01:08000BF0:  58 40 8F E2
F02:0077       		
F02:0078       		SUB r1,r1,#32			;Subtract 32 from value in first paramter 
               S01:08000BF4:  20 10 41 E2
F02:0079       		ADD r4,r4,r1,asl #3		;Add the value to the bitmap font and shift left 3 to multiply by 8 and get address of the passed
               S01:08000BF8:  81 41 84 E0
F02:0080       		
F02:0081       		MOV r10,#8			;Loop counter for lines
               S01:08000BFC:  08 A0 A0 E3
F02:0082       WriteLine:
F02:0083       		MOV r7,#8 			;Loop counter for pixels
               S01:08000C00:  08 70 A0 E3
F02:0084       		LDRB r8,[r4],#1				;Load bitmap font value into r8
               S01:08000C04:  01 80 D4 E4
F02:0085       		MOV r9,#0b100000000			;Bitmask gets shifted over 1 through each loop
               S01:08000C08:  01 9C A0 E3
F02:0086       				
F02:0087       		MOV r2, #0b1111111101000000; Color: ABBBBBGGGGGRRRRR	A=Alpha
               S01:08000C0C:  FF 2C A0 E3 40 20 82 E3
F02:0088       DrawPixel:
F02:0089       		TST r8,r9			;Test r8 and r9, CMP but with AND function, uses bitmask on bitmap font to check if current pixel in r3 sh
               S01:08000C14:  09 00 18 E1
F02:0090       		STRNEH r2,[r3]		;SToRe if Not Equal Halfword, stores halfword if test is not equal, sets pixel at r3 to the color in r
               S01:08000C18:  B0 20 43 11
F02:0091       		ADD r3,r3,#2		;Increment r3 by 1 byte
               S01:08000C1C:  02 30 83 E2
F02:0092       		MOV r9,r9,ror #1	;Rotate bitmask (0b10000000 checks leftmost pixel, 0b01000000 checks the next one, etc.)
               S01:08000C20:  E9 90 A0 E1
F02:0093       		SUBS r7,r7,#1		;Decrement loop counter for pixels, set signs to check if after 8 pixels
               S01:08000C24:  01 70 57 E2
F02:0094       		BNE DrawPixel		;Loop for 8 pixels, until zero flag is set
               S01:08000C28:  F9 FF FF 1A
F02:0095       		
F02:0096       		ADD r3,r3,#480-16	;240 pixels * 2 bytes per pixel - 16 
               S01:08000C2C:  1D 3E 83 E2
F02:0097       		SUBS r10,r10,#1		;Decrement loop counter for lines, set signs to see if after 8 lines	
               S01:08000C30:  01 A0 5A E2
F02:0098       		BNE WriteLine		;If zeor flag set, exit.  Otherwise, repeat, go to next line
               S01:08000C34:  F1 FF FF 1A
F02:0099       LineDone:	
F02:0100       		MOV r3,#CursorX		;Get CursorX address
               S01:08000C38:  02 34 A0 E3 20 30 83 E3
F02:0101       		LDRB r1,[r3]		;Get CursorX value
               S01:08000C40:  00 10 D3 E5
F02:0102       		ADD r1,r1,#1		;Increment cursor by 1 position
               S01:08000C44:  01 10 81 E2
F02:0103       		STRB r1,[r3]		;Store incremented value back in address
               S01:08000C48:  00 10 C3 E5
F02:0104       		
F02:0105       	LDMFD sp!, {r0-r12, pc}	;Return
               S01:08000C4C:  FF 9F BD E8
F02:0106       	
F02:0107       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F02:0108       
F02:0109       ;Starts at ASCII number 32, simplifying by starting at 0
F02:0110       ;I translated the Presst Start 2P Google Font into 8 element arrays of byte sized hex codes
F02:0111       ;This effectively defines an 8x8 bitmap of a character
F02:0112       ;Method learned from https://www.chibialiens.com/arm/helloworld.php#LessonH2
F02:0113       BitmapFont:
F02:0114       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	;0 - Space
               S01:08000C50:  00
               S01:08000C51:  00
               S01:08000C52:  00
               S01:08000C53:  00
               S01:08000C54:  00
               S01:08000C55:  00
               S01:08000C56:  00
               S01:08000C57:  00
F02:0115       	.BYTE 0x70,0x70,0x70,0x60,0x60,0x00,0x60,0x00	;1 - !
               S01:08000C58:  70
               S01:08000C59:  70
               S01:08000C5A:  70
               S01:08000C5B:  60
               S01:08000C5C:  60
               S01:08000C5D:  00
               S01:08000C5E:  60
               S01:08000C5F:  00
F02:0116       	.BYTE 0x00,0x66,0x66,0x66,0x00,0x00,0x00,0x00	;2 - "
               S01:08000C60:  00
               S01:08000C61:  66
               S01:08000C62:  66
               S01:08000C63:  66
               S01:08000C64:  00
               S01:08000C65:  00
               S01:08000C66:  00
               S01:08000C67:  00
F02:0117       	.BYTE 0x00,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C	;3 - #
               S01:08000C68:  00
               S01:08000C69:  6C
               S01:08000C6A:  FE
               S01:08000C6B:  6C
               S01:08000C6C:  6C
               S01:08000C6D:  6C
               S01:08000C6E:  FE
               S01:08000C6F:  6C
F02:0118       	.BYTE 0x00,0x10,0x7C,0xD0,0x7C,0x16,0xFC,0x10	;4 - $
               S01:08000C70:  00
               S01:08000C71:  10
               S01:08000C72:  7C
               S01:08000C73:  D0
               S01:08000C74:  7C
               S01:08000C75:  16
               S01:08000C76:  FC
               S01:08000C77:  10
F02:0119       	.BYTE 0x00,0x62,0xA4,0xC8,0x10,0x26,0x4A,0x8C	;5 - %
               S01:08000C78:  00
               S01:08000C79:  62
               S01:08000C7A:  A4
               S01:08000C7B:  C8
               S01:08000C7C:  10
               S01:08000C7D:  26
               S01:08000C7E:  4A
               S01:08000C7F:  8C
F02:0120       	.BYTE 0x00,0x70,0xD8,0xD8,0x70,0xDA,0xCC,0x7E	;6 - &
               S01:08000C80:  00
               S01:08000C81:  70
               S01:08000C82:  D8
               S01:08000C83:  D8
               S01:08000C84:  70
               S01:08000C85:  DA
               S01:08000C86:  CC
               S01:08000C87:  7E
F02:0121       	.BYTE 0x00,0x30,0x30,0x60,0x00,0x00,0x00,0x00	;7 - '
               S01:08000C88:  00
               S01:08000C89:  30
               S01:08000C8A:  30
               S01:08000C8B:  60
               S01:08000C8C:  00
               S01:08000C8D:  00
               S01:08000C8E:  00
               S01:08000C8F:  00
F02:0122       	.BYTE 0x00,0x0C,0x18,0x30,0x30,0x30,0x18,0x0C	;8 - (
               S01:08000C90:  00
               S01:08000C91:  0C
               S01:08000C92:  18
               S01:08000C93:  30
               S01:08000C94:  30
               S01:08000C95:  30
               S01:08000C96:  18
               S01:08000C97:  0C
F02:0123       	.BYTE 0x00,0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30	;9 - )
               S01:08000C98:  00
               S01:08000C99:  30
               S01:08000C9A:  18
               S01:08000C9B:  0C
               S01:08000C9C:  0C
               S01:08000C9D:  0C
               S01:08000C9E:  18
               S01:08000C9F:  30
F02:0124       	.BYTE 0x00,0x6C,0x38,0xFE,0x38,0x6C,0x00,0x00	;10 - *
               S01:08000CA0:  00
               S01:08000CA1:  6C
               S01:08000CA2:  38
               S01:08000CA3:  FE
               S01:08000CA4:  38
               S01:08000CA5:  6C
               S01:08000CA6:  00
               S01:08000CA7:  00
F02:0125       	.BYTE 0x00,0x18,0x18,0x7E,0x7E,0x18,0x18,0x00	;11 - +
               S01:08000CA8:  00
               S01:08000CA9:  18
               S01:08000CAA:  18
               S01:08000CAB:  7E
               S01:08000CAC:  7E
               S01:08000CAD:  18
               S01:08000CAE:  18
               S01:08000CAF:  00
F02:0126       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x60	;12 - ,
               S01:08000CB0:  00
               S01:08000CB1:  00
               S01:08000CB2:  00
               S01:08000CB3:  00
               S01:08000CB4:  00
               S01:08000CB5:  30
               S01:08000CB6:  30
               S01:08000CB7:  60
F02:0127       	.BYTE 0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00	;12 - -
               S01:08000CB8:  00
               S01:08000CB9:  00
               S01:08000CBA:  00
               S01:08000CBB:  3C
               S01:08000CBC:  00
               S01:08000CBD:  00
               S01:08000CBE:  00
               S01:08000CBF:  00
F02:0128       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30	;13 - .
               S01:08000CC0:  00
               S01:08000CC1:  00
               S01:08000CC2:  00
               S01:08000CC3:  00
               S01:08000CC4:  00
               S01:08000CC5:  00
               S01:08000CC6:  30
               S01:08000CC7:  30
F02:0129       	.BYTE 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80	;14 - /
               S01:08000CC8:  01
               S01:08000CC9:  02
               S01:08000CCA:  04
               S01:08000CCB:  08
               S01:08000CCC:  10
               S01:08000CCD:  20
               S01:08000CCE:  40
               S01:08000CCF:  80
F02:0130       	.BYTE 0x38,0x4C,0xC6,0xC6,0xC6,0xC6,0x64,0x38	;15 - 0
               S01:08000CD0:  38
               S01:08000CD1:  4C
               S01:08000CD2:  C6
               S01:08000CD3:  C6
               S01:08000CD4:  C6
               S01:08000CD5:  C6
               S01:08000CD6:  64
               S01:08000CD7:  38
F02:0131       	.BYTE 0x00,0x18,0x38,0x18,0x18,0x18,0x18,0x7E	;16 - 1
               S01:08000CD8:  00
               S01:08000CD9:  18
               S01:08000CDA:  38
               S01:08000CDB:  18
               S01:08000CDC:  18
               S01:08000CDD:  18
               S01:08000CDE:  18
               S01:08000CDF:  7E
F02:0132       	.BYTE 0x00,0x7C,0xC6,0x0E,0x3C,0x78,0xE0,0xFE	;17 - 2
               S01:08000CE0:  00
               S01:08000CE1:  7C
               S01:08000CE2:  C6
               S01:08000CE3:  0E
               S01:08000CE4:  3C
               S01:08000CE5:  78
               S01:08000CE6:  E0
               S01:08000CE7:  FE
F02:0133       	.BYTE 0x00,0x7E,0x0C,0x18,0x3C,0x06,0xC6,0x7C	;18 - 3
               S01:08000CE8:  00
               S01:08000CE9:  7E
               S01:08000CEA:  0C
               S01:08000CEB:  18
               S01:08000CEC:  3C
               S01:08000CED:  06
               S01:08000CEE:  C6
               S01:08000CEF:  7C
F02:0134       	.BYTE 0x00,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C	;19 - 4
               S01:08000CF0:  00
               S01:08000CF1:  1C
               S01:08000CF2:  3C
               S01:08000CF3:  6C
               S01:08000CF4:  CC
               S01:08000CF5:  FE
               S01:08000CF6:  0C
               S01:08000CF7:  0C
F02:0135       	.BYTE 0x00,0xFC,0xC0,0xFC,0x06,0x06,0xC6,0x7C	;20 - 5
               S01:08000CF8:  00
               S01:08000CF9:  FC
               S01:08000CFA:  C0
               S01:08000CFB:  FC
               S01:08000CFC:  06
               S01:08000CFD:  06
               S01:08000CFE:  C6
               S01:08000CFF:  7C
F02:0136       	.BYTE 0x00,0x3C,0x60,0xC0,0xFC,0xC6,0xC6,0x7C	;21 - 6
               S01:08000D00:  00
               S01:08000D01:  3C
               S01:08000D02:  60
               S01:08000D03:  C0
               S01:08000D04:  FC
               S01:08000D05:  C6
               S01:08000D06:  C6
               S01:08000D07:  7C
F02:0137       	.BYTE 0x00,0xFE,0xC6,0x0C,0x18,0x30,0x30,0x30	;22 - 7
               S01:08000D08:  00
               S01:08000D09:  FE
               S01:08000D0A:  C6
               S01:08000D0B:  0C
               S01:08000D0C:  18
               S01:08000D0D:  30
               S01:08000D0E:  30
               S01:08000D0F:  30
F02:0138       	.BYTE 0x00,0x78,0xC4,0xE4,0x78,0x9E,0x86,0x7C	;23 - 8
               S01:08000D10:  00
               S01:08000D11:  78
               S01:08000D12:  C4
               S01:08000D13:  E4
               S01:08000D14:  78
               S01:08000D15:  9E
               S01:08000D16:  86
               S01:08000D17:  7C
F02:0139       	.BYTE 0x00,0x7C,0xC6,0xC6,0x7E,0x06,0x0C,0x78	;24 - 9
               S01:08000D18:  00
               S01:08000D19:  7C
               S01:08000D1A:  C6
               S01:08000D1B:  C6
               S01:08000D1C:  7E
               S01:08000D1D:  06
               S01:08000D1E:  0C
               S01:08000D1F:  78
F02:0140       	.BYTE 0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00	;25 - :
               S01:08000D20:  00
               S01:08000D21:  30
               S01:08000D22:  30
               S01:08000D23:  00
               S01:08000D24:  00
               S01:08000D25:  30
               S01:08000D26:  30
               S01:08000D27:  00
F02:0141       	.BYTE 0x00,0x30,0x30,0x00,0x30,0x30,0x60,0x00	;26 - ;
               S01:08000D28:  00
               S01:08000D29:  30
               S01:08000D2A:  30
               S01:08000D2B:  00
               S01:08000D2C:  30
               S01:08000D2D:  30
               S01:08000D2E:  60
               S01:08000D2F:  00
F02:0142       	.BYTE 0x00,0x0C,0x18,0x30,0x18,0x0C,0x00,0x00	;27 - <
               S01:08000D30:  00
               S01:08000D31:  0C
               S01:08000D32:  18
               S01:08000D33:  30
               S01:08000D34:  18
               S01:08000D35:  0C
               S01:08000D36:  00
               S01:08000D37:  00
F02:0143       	.BYTE 0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00	;28 - =
               S01:08000D38:  00
               S01:08000D39:  00
               S01:08000D3A:  7E
               S01:08000D3B:  00
               S01:08000D3C:  7E
               S01:08000D3D:  00
               S01:08000D3E:  00
               S01:08000D3F:  00
F02:0144       	.BYTE 0x00,0x30,0x18,0x0C,0x18,0x30,0x00,0x00	;29 - >
               S01:08000D40:  00
               S01:08000D41:  30
               S01:08000D42:  18
               S01:08000D43:  0C
               S01:08000D44:  18
               S01:08000D45:  30
               S01:08000D46:  00
               S01:08000D47:  00
F02:0145       	.BYTE 0x00,0x7C,0xFE,0xC6,0x0C,0x38,0x00,0x38	;30 - ?
               S01:08000D48:  00
               S01:08000D49:  7C
               S01:08000D4A:  FE
               S01:08000D4B:  C6
               S01:08000D4C:  0C
               S01:08000D4D:  38
               S01:08000D4E:  00
               S01:08000D4F:  38
F02:0146       	.BYTE 0x00,0x7C,0x82,0xBA,0xAA,0xBE,0x80,0x7C	;31 - @
               S01:08000D50:  00
               S01:08000D51:  7C
               S01:08000D52:  82
               S01:08000D53:  BA
               S01:08000D54:  AA
               S01:08000D55:  BE
               S01:08000D56:  80
               S01:08000D57:  7C
F02:0147       	.BYTE 0x00,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6	;32 - A
               S01:08000D58:  00
               S01:08000D59:  38
               S01:08000D5A:  6C
               S01:08000D5B:  C6
               S01:08000D5C:  C6
               S01:08000D5D:  FE
               S01:08000D5E:  C6
               S01:08000D5F:  C6
F02:0148       	.BYTE 0x00,0xFC,0xC6,0xC6,0xFC,0xC6,0xC6,0xFC	;33 - B
               S01:08000D60:  00
               S01:08000D61:  FC
               S01:08000D62:  C6
               S01:08000D63:  C6
               S01:08000D64:  FC
               S01:08000D65:  C6
               S01:08000D66:  C6
               S01:08000D67:  FC
F02:0149       	.BYTE 0x00,0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C	;34 - C
               S01:08000D68:  00
               S01:08000D69:  3C
               S01:08000D6A:  66
               S01:08000D6B:  C0
               S01:08000D6C:  C0
               S01:08000D6D:  C0
               S01:08000D6E:  66
               S01:08000D6F:  3C
F02:0150       	.BYTE 0x00,0xF8,0xCC,0xC6,0xC6,0xC6,0xCC,0xF8	;35 - D
               S01:08000D70:  00
               S01:08000D71:  F8
               S01:08000D72:  CC
               S01:08000D73:  C6
               S01:08000D74:  C6
               S01:08000D75:  C6
               S01:08000D76:  CC
               S01:08000D77:  F8
F02:0151       	.BYTE 0x00,0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xFE	;36 - E
               S01:08000D78:  00
               S01:08000D79:  FE
               S01:08000D7A:  C0
               S01:08000D7B:  C0
               S01:08000D7C:  FC
               S01:08000D7D:  C0
               S01:08000D7E:  C0
               S01:08000D7F:  FE
F02:0152       	.BYTE 0x00,0xFE,0xC0,0xC0,0xFC,0xC0,0xC0,0xC0	;37 - F
               S01:08000D80:  00
               S01:08000D81:  FE
               S01:08000D82:  C0
               S01:08000D83:  C0
               S01:08000D84:  FC
               S01:08000D85:  C0
               S01:08000D86:  C0
               S01:08000D87:  C0
F02:0153       	.BYTE 0x00,0x3E,0x60,0xC0,0xCE,0xC6,0x66,0x3E	;38 - G
               S01:08000D88:  00
               S01:08000D89:  3E
               S01:08000D8A:  60
               S01:08000D8B:  C0
               S01:08000D8C:  CE
               S01:08000D8D:  C6
               S01:08000D8E:  66
               S01:08000D8F:  3E
F02:0154       	.BYTE 0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,0xC6	;39 - H
               S01:08000D90:  00
               S01:08000D91:  C6
               S01:08000D92:  C6
               S01:08000D93:  C6
               S01:08000D94:  C6
               S01:08000D95:  FE
               S01:08000D96:  C6
               S01:08000D97:  C6
F02:0155       	.BYTE 0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x7E	;40 - I
               S01:08000D98:  00
               S01:08000D99:  7E
               S01:08000D9A:  18
               S01:08000D9B:  18
               S01:08000D9C:  18
               S01:08000D9D:  18
               S01:08000D9E:  18
               S01:08000D9F:  7E
F02:0156       	.BYTE 0x00,0x06,0x06,0x06,0x06,0x06,0xC6,0x7C	;41 - J
               S01:08000DA0:  00
               S01:08000DA1:  06
               S01:08000DA2:  06
               S01:08000DA3:  06
               S01:08000DA4:  06
               S01:08000DA5:  06
               S01:08000DA6:  C6
               S01:08000DA7:  7C
F02:0157       	.BYTE 0x00,0xC6,0xCC,0xD8,0xF0,0xF8,0xDC,0xCE	;42 - K
               S01:08000DA8:  00
               S01:08000DA9:  C6
               S01:08000DAA:  CC
               S01:08000DAB:  D8
               S01:08000DAC:  F0
               S01:08000DAD:  F8
               S01:08000DAE:  DC
               S01:08000DAF:  CE
F02:0158       	.BYTE 0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x7E	;43 - L
               S01:08000DB0:  00
               S01:08000DB1:  60
               S01:08000DB2:  60
               S01:08000DB3:  60
               S01:08000DB4:  60
               S01:08000DB5:  60
               S01:08000DB6:  60
               S01:08000DB7:  7E
F02:0159       	.BYTE 0x00,0xC6,0xEE,0xFE,0xD6,0xD6,0xC6,0xC6	;44 - M
               S01:08000DB8:  00
               S01:08000DB9:  C6
               S01:08000DBA:  EE
               S01:08000DBB:  FE
               S01:08000DBC:  D6
               S01:08000DBD:  D6
               S01:08000DBE:  C6
               S01:08000DBF:  C6
F02:0160       	.BYTE 0x00,0xC6,0xE6,0xF6,0xDE,0xDE,0xC6,0xC6	;45 - N
               S01:08000DC0:  00
               S01:08000DC1:  C6
               S01:08000DC2:  E6
               S01:08000DC3:  F6
               S01:08000DC4:  DE
               S01:08000DC5:  DE
               S01:08000DC6:  C6
               S01:08000DC7:  C6
F02:0161       	.BYTE 0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C	;46 - O
               S01:08000DC8:  00
               S01:08000DC9:  7C
               S01:08000DCA:  C6
               S01:08000DCB:  C6
               S01:08000DCC:  C6
               S01:08000DCD:  C6
               S01:08000DCE:  C6
               S01:08000DCF:  7C
F02:0162       	.BYTE 0x00,0xFC,0xC6,0xC6,0xC6,0xFC,0xC0,0xC0	;47 - P
               S01:08000DD0:  00
               S01:08000DD1:  FC
               S01:08000DD2:  C6
               S01:08000DD3:  C6
               S01:08000DD4:  C6
               S01:08000DD5:  FC
               S01:08000DD6:  C0
               S01:08000DD7:  C0
F02:0163       	.BYTE 0x00,0x7C,0xC6,0xC6,0xC6,0xDE,0xCC,0x7A	;48 - Q
               S01:08000DD8:  00
               S01:08000DD9:  7C
               S01:08000DDA:  C6
               S01:08000DDB:  C6
               S01:08000DDC:  C6
               S01:08000DDD:  DE
               S01:08000DDE:  CC
               S01:08000DDF:  7A
F02:0164       	.BYTE 0x00,0xFC,0xC6,0xC6,0xCE,0xF8,0xDC,0xCE	;49 - R
               S01:08000DE0:  00
               S01:08000DE1:  FC
               S01:08000DE2:  C6
               S01:08000DE3:  C6
               S01:08000DE4:  CE
               S01:08000DE5:  F8
               S01:08000DE6:  DC
               S01:08000DE7:  CE
F02:0165       	.BYTE 0x00,0x7C,0xC6,0xC0,0x7C,0x06,0xC6,0x7C	;50 - S
               S01:08000DE8:  00
               S01:08000DE9:  7C
               S01:08000DEA:  C6
               S01:08000DEB:  C0
               S01:08000DEC:  7C
               S01:08000DED:  06
               S01:08000DEE:  C6
               S01:08000DEF:  7C
F02:0166       	.BYTE 0x00,0x7E,0x18,0x18,0x18,0x18,0x18,0x18	;51 - T
               S01:08000DF0:  00
               S01:08000DF1:  7E
               S01:08000DF2:  18
               S01:08000DF3:  18
               S01:08000DF4:  18
               S01:08000DF5:  18
               S01:08000DF6:  18
               S01:08000DF7:  18
F02:0167       	.BYTE 0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C	;52 - U
               S01:08000DF8:  00
               S01:08000DF9:  C6
               S01:08000DFA:  C6
               S01:08000DFB:  C6
               S01:08000DFC:  C6
               S01:08000DFD:  C6
               S01:08000DFE:  C6
               S01:08000DFF:  7C
F02:0168       	.BYTE 0x00,0xC6,0xC6,0xC6,0xEE,0x7C,0x38,0x10	;53 - V
               S01:08000E00:  00
               S01:08000E01:  C6
               S01:08000E02:  C6
               S01:08000E03:  C6
               S01:08000E04:  EE
               S01:08000E05:  7C
               S01:08000E06:  38
               S01:08000E07:  10
F02:0169       	.BYTE 0x00,0xD6,0xD6,0xD6,0xD6,0xFE,0xEE,0x44	;54 - W
               S01:08000E08:  00
               S01:08000E09:  D6
               S01:08000E0A:  D6
               S01:08000E0B:  D6
               S01:08000E0C:  D6
               S01:08000E0D:  FE
               S01:08000E0E:  EE
               S01:08000E0F:  44
F02:0170       	.BYTE 0x00,0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6	;55 - X
               S01:08000E10:  00
               S01:08000E11:  C6
               S01:08000E12:  C6
               S01:08000E13:  6C
               S01:08000E14:  38
               S01:08000E15:  6C
               S01:08000E16:  C6
               S01:08000E17:  C6
F02:0171       	.BYTE 0x00,0x66,0x66,0x66,0x3C,0x18,0x18,0x18	;56 - Y
               S01:08000E18:  00
               S01:08000E19:  66
               S01:08000E1A:  66
               S01:08000E1B:  66
               S01:08000E1C:  3C
               S01:08000E1D:  18
               S01:08000E1E:  18
               S01:08000E1F:  18
F02:0172       	.BYTE 0x00,0xFE,0x0E,0x1C,0x38,0x70,0xE0,0xFE	;57 - Z
               S01:08000E20:  00
               S01:08000E21:  FE
               S01:08000E22:  0E
               S01:08000E23:  1C
               S01:08000E24:  38
               S01:08000E25:  70
               S01:08000E26:  E0
               S01:08000E27:  FE
F02:0173       	.BYTE 0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x3C	;58 - [
               S01:08000E28:  00
               S01:08000E29:  3C
               S01:08000E2A:  30
               S01:08000E2B:  30
               S01:08000E2C:  30
               S01:08000E2D:  30
               S01:08000E2E:  30
               S01:08000E2F:  3C
F02:0174       	.BYTE 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01	;59 - \ 
               S01:08000E30:  80
               S01:08000E31:  40
               S01:08000E32:  20
               S01:08000E33:  10
               S01:08000E34:  08
               S01:08000E35:  04
               S01:08000E36:  02
               S01:08000E37:  01
F02:0175       	.BYTE 0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C	;60 - ]
               S01:08000E38:  00
               S01:08000E39:  3C
               S01:08000E3A:  0C
               S01:08000E3B:  0C
               S01:08000E3C:  0C
               S01:08000E3D:  0C
               S01:08000E3E:  0C
               S01:08000E3F:  3C
F02:0176       	.BYTE 0x00,0x38,0x6C,0x00,0x00,0x00,0x00,0x00	;61 - ^
               S01:08000E40:  00
               S01:08000E41:  38
               S01:08000E42:  6C
               S01:08000E43:  00
               S01:08000E44:  00
               S01:08000E45:  00
               S01:08000E46:  00
               S01:08000E47:  00
F02:0177       	.BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE	;62 - _
               S01:08000E48:  00
               S01:08000E49:  00
               S01:08000E4A:  00
               S01:08000E4B:  00
               S01:08000E4C:  00
               S01:08000E4D:  00
               S01:08000E4E:  00
               S01:08000E4F:  FE
F02:0178       	.BYTE 0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00 	;63 - `
               S01:08000E50:  00
               S01:08000E51:  10
               S01:08000E52:  08
               S01:08000E53:  00
               S01:08000E54:  00
               S01:08000E55:  00
               S01:08000E56:  00
               S01:08000E57:  00
F02:0179       	.BYTE 0x00,0x00,0x00,0x7C,0x06,0x7E,0xC6,0x7E	;64 - a
               S01:08000E58:  00
               S01:08000E59:  00
               S01:08000E5A:  00
               S01:08000E5B:  7C
               S01:08000E5C:  06
               S01:08000E5D:  7E
               S01:08000E5E:  C6
               S01:08000E5F:  7E
F02:0180       	.BYTE 0x00,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0x7C	;65 - b
               S01:08000E60:  00
               S01:08000E61:  C0
               S01:08000E62:  C0
               S01:08000E63:  FC
               S01:08000E64:  C6
               S01:08000E65:  C6
               S01:08000E66:  C6
               S01:08000E67:  7C
F02:0181       	.BYTE 0x00,0x00,0x00,0x7E,0xC0,0xC0,0xC0,0x7E	;66 - c
               S01:08000E68:  00
               S01:08000E69:  00
               S01:08000E6A:  00
               S01:08000E6B:  7E
               S01:08000E6C:  C0
               S01:08000E6D:  C0
               S01:08000E6E:  C0
               S01:08000E6F:  7E
F02:0182       	.BYTE 0x00,0x06,0x06,0x7E,0xC6,0xC6,0xC6,0x7E	;67 - d
               S01:08000E70:  00
               S01:08000E71:  06
               S01:08000E72:  06
               S01:08000E73:  7E
               S01:08000E74:  C6
               S01:08000E75:  C6
               S01:08000E76:  C6
               S01:08000E77:  7E
F02:0183       	.BYTE 0x00,0x00,0x00,0x7C,0xC6,0xFE,0xC0,0x7C	;68 - e
               S01:08000E78:  00
               S01:08000E79:  00
               S01:08000E7A:  00
               S01:08000E7B:  7C
               S01:08000E7C:  C6
               S01:08000E7D:  FE
               S01:08000E7E:  C0
               S01:08000E7F:  7C
F02:0184       	.BYTE 0x00,0x0E,0x18,0x7E,0x18,0x18,0x18,0x18	;69 - f
               S01:08000E80:  00
               S01:08000E81:  0E
               S01:08000E82:  18
               S01:08000E83:  7E
               S01:08000E84:  18
               S01:08000E85:  18
               S01:08000E86:  18
               S01:08000E87:  18
F02:0185       	.BYTE 0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x7C	;70 - g
               S01:08000E88:  00
               S01:08000E89:  00
               S01:08000E8A:  7E
               S01:08000E8B:  C6
               S01:08000E8C:  C6
               S01:08000E8D:  7E
               S01:08000E8E:  06
               S01:08000E8F:  7C
F02:0186       	.BYTE 0x00,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xC6	;71 - h
               S01:08000E90:  00
               S01:08000E91:  C0
               S01:08000E92:  C0
               S01:08000E93:  FC
               S01:08000E94:  C6
               S01:08000E95:  C6
               S01:08000E96:  C6
               S01:08000E97:  C6
F02:0187       	.BYTE 0x00,0x18,0x00,0x38,0x18,0x18,0x18,0x7E	;72 - i
               S01:08000E98:  00
               S01:08000E99:  18
               S01:08000E9A:  00
               S01:08000E9B:  38
               S01:08000E9C:  18
               S01:08000E9D:  18
               S01:08000E9E:  18
               S01:08000E9F:  7E
F02:0188       	.BYTE 0x00,0x0C,0x00,0x1C,0x0C,0x0C,0x0C,0x78	;73 - j
               S01:08000EA0:  00
               S01:08000EA1:  0C
               S01:08000EA2:  00
               S01:08000EA3:  1C
               S01:08000EA4:  0C
               S01:08000EA5:  0C
               S01:08000EA6:  0C
               S01:08000EA7:  78
F02:0189       	.BYTE 0x00,0xC0,0xC0,0xC6,0xCC,0xF8,0xCC,0xC6	;74 - k
               S01:08000EA8:  00
               S01:08000EA9:  C0
               S01:08000EAA:  C0
               S01:08000EAB:  C6
               S01:08000EAC:  CC
               S01:08000EAD:  F8
               S01:08000EAE:  CC
               S01:08000EAF:  C6
F02:0190       	.BYTE 0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x7E	;75 - l
               S01:08000EB0:  00
               S01:08000EB1:  38
               S01:08000EB2:  18
               S01:08000EB3:  18
               S01:08000EB4:  18
               S01:08000EB5:  18
               S01:08000EB6:  18
               S01:08000EB7:  7E
F02:0191       	.BYTE 0x00,0x00,0x00,0xFC,0xB6,0xB6,0xB6,0xB6	;76 - m
               S01:08000EB8:  00
               S01:08000EB9:  00
               S01:08000EBA:  00
               S01:08000EBB:  FC
               S01:08000EBC:  B6
               S01:08000EBD:  B6
               S01:08000EBE:  B6
               S01:08000EBF:  B6
F02:0192       	.BYTE 0x00,0x00,0x00,0xFC,0xC6,0xC6,0xC6,0xC6	;77 - n
               S01:08000EC0:  00
               S01:08000EC1:  00
               S01:08000EC2:  00
               S01:08000EC3:  FC
               S01:08000EC4:  C6
               S01:08000EC5:  C6
               S01:08000EC6:  C6
               S01:08000EC7:  C6
F02:0193       	.BYTE 0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C	;78 - o
               S01:08000EC8:  00
               S01:08000EC9:  00
               S01:08000ECA:  00
               S01:08000ECB:  7C
               S01:08000ECC:  C6
               S01:08000ECD:  C6
               S01:08000ECE:  C6
               S01:08000ECF:  7C
F02:0194       	.BYTE 0x00,0x00,0xFC,0xC6,0xC6,0xFC,0xC0,0xC0	;79 - p
               S01:08000ED0:  00
               S01:08000ED1:  00
               S01:08000ED2:  FC
               S01:08000ED3:  C6
               S01:08000ED4:  C6
               S01:08000ED5:  FC
               S01:08000ED6:  C0
               S01:08000ED7:  C0
F02:0195       	.BYTE 0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x06	;80 - q
               S01:08000ED8:  00
               S01:08000ED9:  00
               S01:08000EDA:  7E
               S01:08000EDB:  C6
               S01:08000EDC:  C6
               S01:08000EDD:  7E
               S01:08000EDE:  06
               S01:08000EDF:  06
F02:0196       	.BYTE 0x00,0x00,0x00,0x6E,0x70,0x60,0x60,0x60	;81 - r
               S01:08000EE0:  00
               S01:08000EE1:  00
               S01:08000EE2:  00
               S01:08000EE3:  6E
               S01:08000EE4:  70
               S01:08000EE5:  60
               S01:08000EE6:  60
               S01:08000EE7:  60
F02:0197       	.BYTE 0x00,0x00,0x00,0x7C,0xC0,0x7C,0x06,0xFC	;82 - s
               S01:08000EE8:  00
               S01:08000EE9:  00
               S01:08000EEA:  00
               S01:08000EEB:  7C
               S01:08000EEC:  C0
               S01:08000EED:  7C
               S01:08000EEE:  06
               S01:08000EEF:  FC
F02:0198       	.BYTE 0x00,0x18,0x18,0x7E,0x18,0x18,0x18,0x18	;83 - t
               S01:08000EF0:  00
               S01:08000EF1:  18
               S01:08000EF2:  18
               S01:08000EF3:  7E
               S01:08000EF4:  18
               S01:08000EF5:  18
               S01:08000EF6:  18
               S01:08000EF7:  18
F02:0199       	.BYTE 0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0x7E	;84 - u
               S01:08000EF8:  00
               S01:08000EF9:  00
               S01:08000EFA:  00
               S01:08000EFB:  C6
               S01:08000EFC:  C6
               S01:08000EFD:  C6
               S01:08000EFE:  C6
               S01:08000EFF:  7E
F02:0200       	.BYTE 0x00,0x00,0x00,0x66,0x66,0x66,0x3C,0x18	;85 - v
               S01:08000F00:  00
               S01:08000F01:  00
               S01:08000F02:  00
               S01:08000F03:  66
               S01:08000F04:  66
               S01:08000F05:  66
               S01:08000F06:  3C
               S01:08000F07:  18
F02:0201       	.BYTE 0x00,0x00,0x00,0xD6,0xD6,0xD6,0xD6,0x6C	;86 - w
               S01:08000F08:  00
               S01:08000F09:  00
               S01:08000F0A:  00
               S01:08000F0B:  D6
               S01:08000F0C:  D6
               S01:08000F0D:  D6
               S01:08000F0E:  D6
               S01:08000F0F:  6C
F02:0202       	.BYTE 0x00,0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6	;87 - x
               S01:08000F10:  00
               S01:08000F11:  00
               S01:08000F12:  00
               S01:08000F13:  C6
               S01:08000F14:  6C
               S01:08000F15:  38
               S01:08000F16:  6C
               S01:08000F17:  C6
F02:0203       	.BYTE 0x00,0x00,0xC6,0xC6,0xC6,0x7E,0x06,0x7C	;88 - y
               S01:08000F18:  00
               S01:08000F19:  00
               S01:08000F1A:  C6
               S01:08000F1B:  C6
               S01:08000F1C:  C6
               S01:08000F1D:  7E
               S01:08000F1E:  06
               S01:08000F1F:  7C
F02:0204       	.BYTE 0x00,0x00,0x00,0xFE,0x1C,0x38,0x70,0xFE	;89 - z
               S01:08000F20:  00
               S01:08000F21:  00
               S01:08000F22:  00
               S01:08000F23:  FE
               S01:08000F24:  1C
               S01:08000F25:  38
               S01:08000F26:  70
               S01:08000F27:  FE
F02:0205       	.BYTE 0x00,0x0C,0x18,0x18,0x30,0x18,0x18,0x0C	;90 - {
               S01:08000F28:  00
               S01:08000F29:  0C
               S01:08000F2A:  18
               S01:08000F2B:  18
               S01:08000F2C:  30
               S01:08000F2D:  18
               S01:08000F2E:  18
               S01:08000F2F:  0C
F02:0206       	.BYTE 0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18	;91 - |
               S01:08000F30:  00
               S01:08000F31:  18
               S01:08000F32:  18
               S01:08000F33:  18
               S01:08000F34:  18
               S01:08000F35:  18
               S01:08000F36:  18
               S01:08000F37:  18
F02:0207       	.BYTE 0x00,0x30,0x18,0x18,0x0C,0x18,0x18,0x30	;92 - }
               S01:08000F38:  00
               S01:08000F39:  30
               S01:08000F3A:  18
               S01:08000F3B:  18
               S01:08000F3C:  0C
               S01:08000F3D:  18
               S01:08000F3E:  18
               S01:08000F3F:  30
F02:0208       	.BYTE 0x00,0x00,0x70,0xBA,0x1C,0x00,0x00,0x00	;93 - ~
               S01:08000F40:  00
               S01:08000F41:  00
               S01:08000F42:  70
               S01:08000F43:  BA
               S01:08000F44:  1C
               S01:08000F45:  00
               S01:08000F46:  00
               S01:08000F47:  00
F02:0209       	;.BYTE 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
F00:0980       .INCLUDE "GBA_Math.asm"
F04:0001       ;r1 = dividend
F04:0002       ;r2 = divisor
F04:0003       ;Don't bother saving r2, not changed
F04:0004       MOD:
F04:0005       	ADD r1, r1, r2	;Gives the result of flipping bits from r2 in r1
               S01:08000F48:  02 10 81 E0
F04:0006       	AND r0, r1, r2	;Thus, AND will give us the bits that represent the remainder
               S01:08000F4C:  02 00 01 E0
F04:0007       	SUB r1, r1, r2	;Reset r1 to original value
               S01:08000F50:  02 10 41 E0
F04:0008       	
F04:0009       	MOV pc, lr
               S01:08000F54:  0E F0 A0 E1
F04:0010       
F04:0011       ;http://www.tofla.iconbar.com/tofla/arm/arm02/index.htm
F04:0012       ;r1 = dividend
F04:0013       ;r2 = divisor
F04:0014       DIV:
F04:0015       STMFD sp!, {r1-r4, lr}
               S01:08000F58:  1E 40 2D E9
F04:0016       	;divide by 0 check
F04:0017       	CMP r2, #0
               S01:08000F5C:  00 00 52 E3
F04:0018       	BEQ DIV_End
               S01:08000F60:  0B 00 00 0A
F04:0019       	
F04:0020       	EOR r0, r0, r0
               S01:08000F64:  00 00 20 E0
F04:0021       	MOV r3, #1	;set bit 0, will be shifted left and right
               S01:08000F68:  01 30 A0 E3
F04:0022       	
F04:0023       	;Bitshift both left until divisor is almost greater than dividend
F04:0024       	DIV_Start:
F04:0025       		CMP r2, r1
               S01:08000F6C:  01 00 52 E1
F04:0026       		MOVLS r2, r2, LSL#1	;r2 will set the corresponding bit in r3 for every time subtraction succeeds
               S01:08000F70:  82 20 A0 91
F04:0027       		MOVLS r3, r3, LSL#1	;Bitshift r3 left to see the limit of the flag, how far r2 must go
               S01:08000F74:  83 30 A0 91
F04:0028       	BLS DIV_Start
               S01:08000F78:  FB FF FF 9A
F04:0029       	
F04:0030       	DIV_Next:
F04:0031       		CMP r1, r2	;Check if another subtraction can be made, carry flag set if (r1 > r2)
               S01:08000F7C:  02 00 51 E1
F04:0032       		SUBCS r1, r1, r2	;Subtract if carry flag is set in result
               S01:08000F80:  02 10 41 20
F04:0033       		ADDCS r0, r0, r3	;Add current bit in r3 to accumulator, r0
               S01:08000F84:  03 00 80 20
F04:0034       		
F04:0035       		MOVS r3, r3, LSR#1	;Shift r3 into carry flag
               S01:08000F88:  A3 30 B0 E1
F04:0036       		MOVCC r2, r2, LSR#1	;if bit 0 of r3 is o, shift r2 right (carry clear)
               S01:08000F8C:  A2 20 A0 31
F04:0037       	
F04:0038       		BCC DIV_Next	;Loop while carry is clear, carry is not clear when r1 < r2 and subtraction yields our result
               S01:08000F90:  F9 FF FF 3A
F04:0039       		
F04:0040       	DIV_End:
F04:0041       LDMFD sp!, {r1-r4, pc}
               S01:08000F94:  1E 80 BD E8
F00:0981       
F00:0982       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F00:0983       
F00:0984       ;-BBBBBGGGGGRRRRR
F00:0985       ColorPalette:
F00:0986       	.WORD 0b0000000000000000; ;0  %-BBBBBGGGGGRRRRR
               S01:08000F98:  00 00
F00:0987           .WORD 0b0000000000010000; ;1  %-BBBBBGGGGGRRRRR
               S01:08000F9A:  10 00
F00:0988           .WORD 0b0000001000000000; ;2  %-BBBBBGGGGGRRRRR
               S01:08000F9C:  00 02
F00:0989           .WORD 0b0000001000010000; ;3  %-BBBBBGGGGGRRRRR
               S01:08000F9E:  10 02
F00:0990           .WORD 0b0100000000000000; ;4  %-BBBBBGGGGGRRRRR
               S01:08000FA0:  00 40
F00:0991           .WORD 0b0100000000010000; ;5  %-BBBBBGGGGGRRRRR
               S01:08000FA2:  10 40
F00:0992           .WORD 0b0100001000000000; ;6  %-BBBBBGGGGGRRRRR
               S01:08000FA4:  00 42
F00:0993           .WORD 0b0110001100011000; ;7  %-BBBBBGGGGGRRRRR
               S01:08000FA6:  18 63
F00:0994           .WORD 0b0100001000010000; ;8  %-BBBBBGGGGGRRRRR
               S01:08000FA8:  10 42
F00:0995           .WORD 0b0000000000011111; ;9  %-BBBBBGGGGGRRRRR
               S01:08000FAA:  1F 00
F00:0996           .WORD 0b0000001111100000; ;10  %-BBBBBGGGGGRRRRR
               S01:08000FAC:  E0 03
F00:0997           .WORD 0b0000001111111111; ;11  %-BBBBBGGGGGRRRRR
               S01:08000FAE:  FF 03
F00:0998           .WORD 0b0111110000000000; ;12  %-BBBBBGGGGGRRRRR
               S01:08000FB0:  00 7C
F00:0999           .WORD 0b0111110000011111; ;13  %-BBBBBGGGGGRRRRR
               S01:08000FB2:  1F 7C
F00:1000           .WORD 0b0111111111100000; ;14  %-BBBBBGGGGGRRRRR
               S01:08000FB4:  E0 7F
F00:1001           .WORD 0b0111111111111111; ;15  %-BBBBBGGGGGRRRRR
               S01:08000FB6:  FF 7F
F00:1002       
F00:1003       	
F00:1004       TilemapFiles:
F00:1005       	.INCBIN "\Tilemaps\GameTilemap.RAW"
               S01:08000FB8:  AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA
               S01:08000FC8:  AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA
F00:1006       TilemapFiles_END:;Points to memory at end of files so we can get their size
F00:1007       
F00:1008       SpriteFiles:
F00:1009       	.INCBIN "\Tilemaps\CharacterSpriteTilemap.RAW"
               S01:080017B8:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S01:080017C8:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:1010       SpriteFiles_END:
F00:1011       
F00:1012       .EQU PlayerSpriteNum, 1	;Player is always our first sprite
F00:1013       .EQU PlayerTileStart, 1 ;Index of first sprite tile
F00:1014       
F00:1015       ;Indexes where the 4 tiles lie in the tilemap for each frame
F00:1016       Anim_PlayerIdleDown:
F00:1017       	.BYTE 1, 1, 1, 1, 5, 5, 5, 5, 9, 9 ,9, 9 , 5, 5, 5, 5	;Loop through the 3 idle frames
               S01:080035B8:  01
               S01:080035B9:  01
               S01:080035BA:  01
               S01:080035BB:  01
               S01:080035BC:  05
               S01:080035BD:  05
               S01:080035BE:  05
               S01:080035BF:  05
               S01:080035C0:  09
               S01:080035C1:  09
               S01:080035C2:  09
               S01:080035C3:  09
               S01:080035C4:  05
               S01:080035C5:  05
               S01:080035C6:  05
               S01:080035C7:  05
F00:1018       Anim_PlayerIdleDown_END:
F00:1019       Anim_PlayerWalkDown:
F00:1020       	.BYTE 1, 1, 1, 13, 13, 13, 17, 17, 17, 13, 13, 13, 1, 1, 1, 21, 21, 21, 25, 25, 25, 21, 21, 21	;Loop through the walk f
               S01:080035C8:  01
               S01:080035C9:  01
               S01:080035CA:  01
               S01:080035CB:  0D
               S01:080035CC:  0D
               S01:080035CD:  0D
               S01:080035CE:  11
               S01:080035CF:  11
               S01:080035D0:  11
               S01:080035D1:  0D
               S01:080035D2:  0D
               S01:080035D3:  0D
               S01:080035D4:  01
               S01:080035D5:  01
               S01:080035D6:  01
               S01:080035D7:  15
               S01:080035D8:  15
               S01:080035D9:  15
               S01:080035DA:  19
               S01:080035DB:  19
               S01:080035DC:  19
               S01:080035DD:  15
               S01:080035DE:  15
               S01:080035DF:  15
F00:1021       Anim_PlayerWalkDown_END:
F00:1022       
F00:1023       ;Subtract 2, I think it automatically ignores the empty spaces I put in the animation tileset
F00:1024       Anim_PlayerIdleRight:
F00:1025       	.BYTE 30, 30, 30, 30, 34, 34, 34, 34, 38, 38 ,38, 38 , 34, 34, 34, 34	;Loop through the 3 idle frames
               S01:080035E0:  1E
               S01:080035E1:  1E
               S01:080035E2:  1E
               S01:080035E3:  1E
               S01:080035E4:  22
               S01:080035E5:  22
               S01:080035E6:  22
               S01:080035E7:  22
               S01:080035E8:  26
               S01:080035E9:  26
               S01:080035EA:  26
               S01:080035EB:  26
               S01:080035EC:  22
               S01:080035ED:  22
               S01:080035EE:  22
               S01:080035EF:  22
F00:1026       Anim_PlayerIdleRight_END:
F00:1027       Anim_PlayerWalkRight:
F00:1028       	.BYTE 30, 30, 30, 42, 42, 42, 46, 46, 46, 42, 42, 42, 30, 30, 30, 50, 50, 50, 54, 54, 54, 50, 50, 50	;Loop through the 
               S01:080035F0:  1E
               S01:080035F1:  1E
               S01:080035F2:  1E
               S01:080035F3:  2A
               S01:080035F4:  2A
               S01:080035F5:  2A
               S01:080035F6:  2E
               S01:080035F7:  2E
               S01:080035F8:  2E
               S01:080035F9:  2A
               S01:080035FA:  2A
               S01:080035FB:  2A
               S01:080035FC:  1E
               S01:080035FD:  1E
               S01:080035FE:  1E
               S01:080035FF:  32
               S01:08003600:  32
               S01:08003601:  32
               S01:08003602:  36
               S01:08003603:  36
               S01:08003604:  36
               S01:08003605:  32
               S01:08003606:  32
               S01:08003607:  32
F00:1029       Anim_PlayerWalkRight_END:
F00:1030       
F00:1031       ;Subtract 4 from proper indices
F00:1032       Anim_PlayerIdleLeft:
F00:1033       	.BYTE 60, 60, 60, 60, 64, 64, 64, 64, 68, 68 ,68, 68 , 64, 64, 64, 64	;Loop through the 3 idle frames
               S01:08003608:  3C
               S01:08003609:  3C
               S01:0800360A:  3C
               S01:0800360B:  3C
               S01:0800360C:  40
               S01:0800360D:  40
               S01:0800360E:  40
               S01:0800360F:  40
               S01:08003610:  44
               S01:08003611:  44
               S01:08003612:  44
               S01:08003613:  44
               S01:08003614:  40
               S01:08003615:  40
               S01:08003616:  40
               S01:08003617:  40
F00:1034       Anim_PlayerIdleLeft_END:
F00:1035       Anim_PlayerWalkLeft:
F00:1036       	.BYTE 60, 60, 60, 72, 72, 72, 76, 76, 76, 72, 72, 72, 60, 60, 60, 80, 80, 80, 84, 84, 84, 80, 80, 80	;Loop through the 
               S01:08003618:  3C
               S01:08003619:  3C
               S01:0800361A:  3C
               S01:0800361B:  48
               S01:0800361C:  48
               S01:0800361D:  48
               S01:0800361E:  4C
               S01:0800361F:  4C
               S01:08003620:  4C
               S01:08003621:  48
               S01:08003622:  48
               S01:08003623:  48
               S01:08003624:  3C
               S01:08003625:  3C
               S01:08003626:  3C
               S01:08003627:  50
               S01:08003628:  50
               S01:08003629:  50
               S01:0800362A:  54
               S01:0800362B:  54
               S01:0800362C:  54
               S01:0800362D:  50
               S01:0800362E:  50
               S01:0800362F:  50
F00:1037       Anim_PlayerWalkLeft_END:
F00:1038       
F00:1039       ;Subtract 6 from proper indices
F00:1040       Anim_PlayerIdleUp:
F00:1041       	.BYTE 90, 90, 90, 90, 94, 94, 94, 94, 98, 98 ,98, 98 , 94, 94, 94, 94	;Loop through the 3 idle frames
               S01:08003630:  5A
               S01:08003631:  5A
               S01:08003632:  5A
               S01:08003633:  5A
               S01:08003634:  5E
               S01:08003635:  5E
               S01:08003636:  5E
               S01:08003637:  5E
               S01:08003638:  62
               S01:08003639:  62
               S01:0800363A:  62
               S01:0800363B:  62
               S01:0800363C:  5E
               S01:0800363D:  5E
               S01:0800363E:  5E
               S01:0800363F:  5E
F00:1042       Anim_PlayerIdleUp_END:
F00:1043       Anim_PlayerWalkUp:
F00:1044       	.BYTE 90, 90, 90, 102, 102, 102, 106, 106, 106, 102, 102, 102, 90, 90, 90, 110, 110, 110, 114, 114, 114, 110, 110, 110	
               S01:08003640:  5A
               S01:08003641:  5A
               S01:08003642:  5A
               S01:08003643:  66
               S01:08003644:  66
               S01:08003645:  66
               S01:08003646:  6A
               S01:08003647:  6A
               S01:08003648:  6A
               S01:08003649:  66
               S01:0800364A:  66
               S01:0800364B:  66
               S01:0800364C:  5A
               S01:0800364D:  5A
               S01:0800364E:  5A
               S01:0800364F:  6E
               S01:08003650:  6E
               S01:08003651:  6E
               S01:08003652:  72
               S01:08003653:  72
               S01:08003654:  72
               S01:08003655:  6E
               S01:08003656:  6E
               S01:08003657:  6E
F00:1045       Anim_PlayerWalkUp_END:
F00:1046       	
F00:1047       .EQU BackgroundCollideLimit, 18	;Colliding tiles start at this index
F00:1048       .EQU TileLength, 8	;Tiles are 8x8 pixels
F00:1049       .EQU TilemapWidth, 32
F00:1050       .EQU TilemapHeight, 32
F00:1051       
F00:1052       ;Screen is 240x160 pixels, 32x32 tiles in background, tiles are 8x8, screen shows 30x20 tiles-worth of pixels at a time
F00:1053       Tilemap:
F00:1054       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,25,24,2 ,0 ,0 ,1 ,0 ,12,3 ,3 ,15,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0
               S01:08003658:  00
               S01:08003659:  00
               S01:0800365A:  00
               S01:0800365B:  00
               S01:0800365C:  00
               S01:0800365D:  00
               S01:0800365E:  19
               S01:0800365F:  18
               S01:08003660:  02
               S01:08003661:  00
               S01:08003662:  00
               S01:08003663:  01
               S01:08003664:  00
               S01:08003665:  0C
               S01:08003666:  03
               S01:08003667:  03
               S01:08003668:  0F
               S01:08003669:  00
               S01:0800366A:  02
               S01:0800366B:  00
               S01:0800366C:  00
               S01:0800366D:  00
               S01:0800366E:  02
               S01:0800366F:  00
               S01:08003670:  00
               S01:08003671:  00
               S01:08003672:  01
               S01:08003673:  00
               S01:08003674:  01
               S01:08003675:  00
               S01:08003676:  00
               S01:08003677:  00
F00:1055       	.BYTE 0 ,2 ,0 ,1 ,2 ,0 ,25,24,1 ,2 ,0 ,0 ,0 ,12,3 ,3 ,15,1 ,0 ,0 ,0 ,2 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0
               S01:08003678:  00
               S01:08003679:  02
               S01:0800367A:  00
               S01:0800367B:  01
               S01:0800367C:  02
               S01:0800367D:  00
               S01:0800367E:  19
               S01:0800367F:  18
               S01:08003680:  01
               S01:08003681:  02
               S01:08003682:  00
               S01:08003683:  00
               S01:08003684:  00
               S01:08003685:  0C
               S01:08003686:  03
               S01:08003687:  03
               S01:08003688:  0F
               S01:08003689:  01
               S01:0800368A:  00
               S01:0800368B:  00
               S01:0800368C:  00
               S01:0800368D:  02
               S01:0800368E:  00
               S01:0800368F:  01
               S01:08003690:  00
               S01:08003691:  00
               S01:08003692:  02
               S01:08003693:  00
               S01:08003694:  00
               S01:08003695:  00
               S01:08003696:  01
               S01:08003697:  00
F00:1056       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,25,24,2 ,0 ,0 ,0 ,0 ,12,3 ,3 ,15,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2
               S01:08003698:  00
               S01:08003699:  00
               S01:0800369A:  00
               S01:0800369B:  00
               S01:0800369C:  00
               S01:0800369D:  00
               S01:0800369E:  19
               S01:0800369F:  18
               S01:080036A0:  02
               S01:080036A1:  00
               S01:080036A2:  00
               S01:080036A3:  00
               S01:080036A4:  00
               S01:080036A5:  0C
               S01:080036A6:  03
               S01:080036A7:  03
               S01:080036A8:  0F
               S01:080036A9:  00
               S01:080036AA:  02
               S01:080036AB:  00
               S01:080036AC:  00
               S01:080036AD:  00
               S01:080036AE:  00
               S01:080036AF:  00
               S01:080036B0:  00
               S01:080036B1:  00
               S01:080036B2:  00
               S01:080036B3:  00
               S01:080036B4:  00
               S01:080036B5:  00
               S01:080036B6:  00
               S01:080036B7:  02
F00:1057       	.BYTE 0 ,0 ,0 ,2 ,0 ,0 ,25,24,0 ,0 ,1 ,14,14,8 ,3 ,3 ,11,14,14,14,14,0 ,0 ,2 ,0 ,0 ,2 ,1 ,0 ,1 ,0 ,0
               S01:080036B8:  00
               S01:080036B9:  00
               S01:080036BA:  00
               S01:080036BB:  02
               S01:080036BC:  00
               S01:080036BD:  00
               S01:080036BE:  19
               S01:080036BF:  18
               S01:080036C0:  00
               S01:080036C1:  00
               S01:080036C2:  01
               S01:080036C3:  0E
               S01:080036C4:  0E
               S01:080036C5:  08
               S01:080036C6:  03
               S01:080036C7:  03
               S01:080036C8:  0B
               S01:080036C9:  0E
               S01:080036CA:  0E
               S01:080036CB:  0E
               S01:080036CC:  0E
               S01:080036CD:  00
               S01:080036CE:  00
               S01:080036CF:  02
               S01:080036D0:  00
               S01:080036D1:  00
               S01:080036D2:  02
               S01:080036D3:  01
               S01:080036D4:  00
               S01:080036D5:  01
               S01:080036D6:  00
               S01:080036D7:  00
F00:1058       	.BYTE 0 ,1 ,0 ,0 ,2 ,0 ,25,24,0 ,0 ,12,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,15,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0
               S01:080036D8:  00
               S01:080036D9:  01
               S01:080036DA:  00
               S01:080036DB:  00
               S01:080036DC:  02
               S01:080036DD:  00
               S01:080036DE:  19
               S01:080036DF:  18
               S01:080036E0:  00
               S01:080036E1:  00
               S01:080036E2:  0C
               S01:080036E3:  03
               S01:080036E4:  03
               S01:080036E5:  03
               S01:080036E6:  03
               S01:080036E7:  03
               S01:080036E8:  03
               S01:080036E9:  03
               S01:080036EA:  03
               S01:080036EB:  03
               S01:080036EC:  03
               S01:080036ED:  0F
               S01:080036EE:  02
               S01:080036EF:  00
               S01:080036F0:  00
               S01:080036F1:  00
               S01:080036F2:  00
               S01:080036F3:  01
               S01:080036F4:  00
               S01:080036F5:  00
               S01:080036F6:  00
               S01:080036F7:  00
F00:1059       	.BYTE 0 ,1 ,0 ,0 ,2 ,0 ,25,24,0 ,0 ,12,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,15,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0
               S01:080036F8:  00
               S01:080036F9:  01
               S01:080036FA:  00
               S01:080036FB:  00
               S01:080036FC:  02
               S01:080036FD:  00
               S01:080036FE:  19
               S01:080036FF:  18
               S01:08003700:  00
               S01:08003701:  00
               S01:08003702:  0C
               S01:08003703:  03
               S01:08003704:  03
               S01:08003705:  03
               S01:08003706:  03
               S01:08003707:  03
               S01:08003708:  03
               S01:08003709:  03
               S01:0800370A:  03
               S01:0800370B:  03
               S01:0800370C:  03
               S01:0800370D:  0F
               S01:0800370E:  02
               S01:0800370F:  00
               S01:08003710:  00
               S01:08003711:  00
               S01:08003712:  00
               S01:08003713:  01
               S01:08003714:  00
               S01:08003715:  00
               S01:08003716:  00
               S01:08003717:  00
F00:1060       	.BYTE 21,21,16,16,16,21,30,24,2 ,0 ,12,3 ,3 ,10,13,13,13,13,9 ,3 ,3 ,15,0 ,2 ,0 ,1 ,2 ,0 ,0 ,0 ,2 ,0
               S01:08003718:  15
               S01:08003719:  15
               S01:0800371A:  10
               S01:0800371B:  10
               S01:0800371C:  10
               S01:0800371D:  15
               S01:0800371E:  1E
               S01:0800371F:  18
               S01:08003720:  02
               S01:08003721:  00
               S01:08003722:  0C
               S01:08003723:  03
               S01:08003724:  03
               S01:08003725:  0A
               S01:08003726:  0D
               S01:08003727:  0D
               S01:08003728:  0D
               S01:08003729:  0D
               S01:0800372A:  09
               S01:0800372B:  03
               S01:0800372C:  03
               S01:0800372D:  0F
               S01:0800372E:  00
               S01:0800372F:  02
               S01:08003730:  00
               S01:08003731:  01
               S01:08003732:  02
               S01:08003733:  00
               S01:08003734:  00
               S01:08003735:  00
               S01:08003736:  02
               S01:08003737:  00
F00:1061       	.BYTE 32,32,16,16,16,32,32,24,0 ,0 ,12,3 ,3 ,15,0 ,2 ,0 ,1 ,12,3 ,3 ,15,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,1 ,0
               S01:08003738:  20
               S01:08003739:  20
               S01:0800373A:  10
               S01:0800373B:  10
               S01:0800373C:  10
               S01:0800373D:  20
               S01:0800373E:  20
               S01:0800373F:  18
               S01:08003740:  00
               S01:08003741:  00
               S01:08003742:  0C
               S01:08003743:  03
               S01:08003744:  03
               S01:08003745:  0F
               S01:08003746:  00
               S01:08003747:  02
               S01:08003748:  00
               S01:08003749:  01
               S01:0800374A:  0C
               S01:0800374B:  03
               S01:0800374C:  03
               S01:0800374D:  0F
               S01:0800374E:  00
               S01:0800374F:  00
               S01:08003750:  00
               S01:08003751:  00
               S01:08003752:  00
               S01:08003753:  02
               S01:08003754:  00
               S01:08003755:  00
               S01:08003756:  01
               S01:08003757:  00
F00:1062       	.BYTE 20,27,16,16,16,26,20,27,1 ,2 ,12,3 ,3 ,15,0 ,0 ,0 ,0 ,12,3 ,3 ,15,0 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,2
               S01:08003758:  14
               S01:08003759:  1B
               S01:0800375A:  10
               S01:0800375B:  10
               S01:0800375C:  10
               S01:0800375D:  1A
               S01:0800375E:  14
               S01:0800375F:  1B
               S01:08003760:  01
               S01:08003761:  02
               S01:08003762:  0C
               S01:08003763:  03
               S01:08003764:  03
               S01:08003765:  0F
               S01:08003766:  00
               S01:08003767:  00
               S01:08003768:  00
               S01:08003769:  00
               S01:0800376A:  0C
               S01:0800376B:  03
               S01:0800376C:  03
               S01:0800376D:  0F
               S01:0800376E:  00
               S01:0800376F:  01
               S01:08003770:  02
               S01:08003771:  00
               S01:08003772:  00
               S01:08003773:  00
               S01:08003774:  00
               S01:08003775:  00
               S01:08003776:  00
               S01:08003777:  02
F00:1063       	.BYTE 0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,12,3 ,3 ,15,0 ,0 ,0 ,0 ,12,3 ,3 ,15,0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0
               S01:08003778:  00
               S01:08003779:  00
               S01:0800377A:  00
               S01:0800377B:  02
               S01:0800377C:  00
               S01:0800377D:  00
               S01:0800377E:  00
               S01:0800377F:  00
               S01:08003780:  00
               S01:08003781:  00
               S01:08003782:  0C
               S01:08003783:  03
               S01:08003784:  03
               S01:08003785:  0F
               S01:08003786:  00
               S01:08003787:  00
               S01:08003788:  00
               S01:08003789:  00
               S01:0800378A:  0C
               S01:0800378B:  03
               S01:0800378C:  03
               S01:0800378D:  0F
               S01:0800378E:  00
               S01:0800378F:  00
               S01:08003790:  00
               S01:08003791:  00
               S01:08003792:  00
               S01:08003793:  01
               S01:08003794:  00
               S01:08003795:  02
               S01:08003796:  00
               S01:08003797:  00
F00:1064       	.BYTE 0 ,1 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,12,3 ,3 ,15,0 ,1 ,0 ,0 ,12,3 ,3 ,15,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0
               S01:08003798:  00
               S01:08003799:  01
               S01:0800379A:  00
               S01:0800379B:  00
               S01:0800379C:  00
               S01:0800379D:  01
               S01:0800379E:  00
               S01:0800379F:  02
               S01:080037A0:  00
               S01:080037A1:  00
               S01:080037A2:  0C
               S01:080037A3:  03
               S01:080037A4:  03
               S01:080037A5:  0F
               S01:080037A6:  00
               S01:080037A7:  01
               S01:080037A8:  00
               S01:080037A9:  00
               S01:080037AA:  0C
               S01:080037AB:  03
               S01:080037AC:  03
               S01:080037AD:  0F
               S01:080037AE:  02
               S01:080037AF:  00
               S01:080037B0:  00
               S01:080037B1:  00
               S01:080037B2:  02
               S01:080037B3:  00
               S01:080037B4:  00
               S01:080037B5:  00
               S01:080037B6:  00
               S01:080037B7:  00
F00:1065       	.BYTE 0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,12,3 ,3 ,11,14,14,14,14,8 ,3 ,3 ,15,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2
               S01:080037B8:  00
               S01:080037B9:  00
               S01:080037BA:  00
               S01:080037BB:  01
               S01:080037BC:  00
               S01:080037BD:  00
               S01:080037BE:  00
               S01:080037BF:  00
               S01:080037C0:  01
               S01:080037C1:  00
               S01:080037C2:  0C
               S01:080037C3:  03
               S01:080037C4:  03
               S01:080037C5:  0B
               S01:080037C6:  0E
               S01:080037C7:  0E
               S01:080037C8:  0E
               S01:080037C9:  0E
               S01:080037CA:  08
               S01:080037CB:  03
               S01:080037CC:  03
               S01:080037CD:  0F
               S01:080037CE:  00
               S01:080037CF:  00
               S01:080037D0:  00
               S01:080037D1:  02
               S01:080037D2:  00
               S01:080037D3:  00
               S01:080037D4:  00
               S01:080037D5:  00
               S01:080037D6:  00
               S01:080037D7:  02
F00:1066       	.BYTE 0 ,2 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,12,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,15,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0
               S01:080037D8:  00
               S01:080037D9:  02
               S01:080037DA:  00
               S01:080037DB:  00
               S01:080037DC:  02
               S01:080037DD:  00
               S01:080037DE:  00
               S01:080037DF:  00
               S01:080037E0:  02
               S01:080037E1:  00
               S01:080037E2:  0C
               S01:080037E3:  03
               S01:080037E4:  03
               S01:080037E5:  03
               S01:080037E6:  03
               S01:080037E7:  03
               S01:080037E8:  03
               S01:080037E9:  03
               S01:080037EA:  03
               S01:080037EB:  03
               S01:080037EC:  03
               S01:080037ED:  0F
               S01:080037EE:  00
               S01:080037EF:  02
               S01:080037F0:  00
               S01:080037F1:  00
               S01:080037F2:  00
               S01:080037F3:  00
               S01:080037F4:  02
               S01:080037F5:  00
               S01:080037F6:  00
               S01:080037F7:  00
F00:1067       	.BYTE 0 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,0 ,12,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,15,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0
               S01:080037F8:  00
               S01:080037F9:  01
               S01:080037FA:  00
               S01:080037FB:  00
               S01:080037FC:  02
               S01:080037FD:  00
               S01:080037FE:  00
               S01:080037FF:  01
               S01:08003800:  00
               S01:08003801:  00
               S01:08003802:  0C
               S01:08003803:  03
               S01:08003804:  03
               S01:08003805:  03
               S01:08003806:  03
               S01:08003807:  03
               S01:08003808:  03
               S01:08003809:  03
               S01:0800380A:  03
               S01:0800380B:  03
               S01:0800380C:  03
               S01:0800380D:  0F
               S01:0800380E:  02
               S01:0800380F:  00
               S01:08003810:  00
               S01:08003811:  00
               S01:08003812:  00
               S01:08003813:  01
               S01:08003814:  00
               S01:08003815:  00
               S01:08003816:  00
               S01:08003817:  00
F00:1068       	.BYTE 0 ,0 ,1 ,2 ,0 ,0 ,1 ,2 ,0 ,0 ,0 ,13,13,13,13,13,13,13,13,13,13,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0
               S01:08003818:  00
               S01:08003819:  00
               S01:0800381A:  01
               S01:0800381B:  02
               S01:0800381C:  00
               S01:0800381D:  00
               S01:0800381E:  01
               S01:0800381F:  02
               S01:08003820:  00
               S01:08003821:  00
               S01:08003822:  00
               S01:08003823:  0D
               S01:08003824:  0D
               S01:08003825:  0D
               S01:08003826:  0D
               S01:08003827:  0D
               S01:08003828:  0D
               S01:08003829:  0D
               S01:0800382A:  0D
               S01:0800382B:  0D
               S01:0800382C:  0D
               S01:0800382D:  00
               S01:0800382E:  01
               S01:0800382F:  00
               S01:08003830:  00
               S01:08003831:  00
               S01:08003832:  01
               S01:08003833:  00
               S01:08003834:  00
               S01:08003835:  00
               S01:08003836:  00
               S01:08003837:  00
F00:1069       	.BYTE 0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,1 ,2 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,2
               S01:08003838:  00
               S01:08003839:  00
               S01:0800383A:  00
               S01:0800383B:  00
               S01:0800383C:  00
               S01:0800383D:  02
               S01:0800383E:  00
               S01:0800383F:  00
               S01:08003840:  00
               S01:08003841:  02
               S01:08003842:  00
               S01:08003843:  00
               S01:08003844:  00
               S01:08003845:  00
               S01:08003846:  00
               S01:08003847:  01
               S01:08003848:  02
               S01:08003849:  00
               S01:0800384A:  01
               S01:0800384B:  00
               S01:0800384C:  02
               S01:0800384D:  00
               S01:0800384E:  00
               S01:0800384F:  00
               S01:08003850:  00
               S01:08003851:  02
               S01:08003852:  00
               S01:08003853:  00
               S01:08003854:  00
               S01:08003855:  02
               S01:08003856:  00
               S01:08003857:  02
F00:1070       	.BYTE 1 ,0 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0
               S01:08003858:  01
               S01:08003859:  00
               S01:0800385A:  01
               S01:0800385B:  02
               S01:0800385C:  00
               S01:0800385D:  00
               S01:0800385E:  00
               S01:0800385F:  00
               S01:08003860:  00
               S01:08003861:  01
               S01:08003862:  00
               S01:08003863:  00
               S01:08003864:  00
               S01:08003865:  02
               S01:08003866:  00
               S01:08003867:  00
               S01:08003868:  00
               S01:08003869:  00
               S01:0800386A:  02
               S01:0800386B:  00
               S01:0800386C:  00
               S01:0800386D:  00
               S01:0800386E:  00
               S01:0800386F:  00
               S01:08003870:  00
               S01:08003871:  01
               S01:08003872:  00
               S01:08003873:  02
               S01:08003874:  00
               S01:08003875:  00
               S01:08003876:  00
               S01:08003877:  00
F00:1071       	.BYTE 0 ,0 ,2 ,0 ,0 ,2 ,1 ,2 ,0 ,0 ,2 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0
               S01:08003878:  00
               S01:08003879:  00
               S01:0800387A:  02
               S01:0800387B:  00
               S01:0800387C:  00
               S01:0800387D:  02
               S01:0800387E:  01
               S01:0800387F:  02
               S01:08003880:  00
               S01:08003881:  00
               S01:08003882:  02
               S01:08003883:  00
               S01:08003884:  01
               S01:08003885:  00
               S01:08003886:  00
               S01:08003887:  02
               S01:08003888:  00
               S01:08003889:  00
               S01:0800388A:  01
               S01:0800388B:  00
               S01:0800388C:  02
               S01:0800388D:  00
               S01:0800388E:  00
               S01:0800388F:  00
               S01:08003890:  00
               S01:08003891:  00
               S01:08003892:  00
               S01:08003893:  00
               S01:08003894:  01
               S01:08003895:  00
               S01:08003896:  00
               S01:08003897:  00
F00:1072       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,1 ,0
               S01:08003898:  00
               S01:08003899:  00
               S01:0800389A:  00
               S01:0800389B:  00
               S01:0800389C:  00
               S01:0800389D:  00
               S01:0800389E:  00
               S01:0800389F:  00
               S01:080038A0:  00
               S01:080038A1:  00
               S01:080038A2:  00
               S01:080038A3:  00
               S01:080038A4:  00
               S01:080038A5:  00
               S01:080038A6:  00
               S01:080038A7:  00
               S01:080038A8:  00
               S01:080038A9:  00
               S01:080038AA:  00
               S01:080038AB:  00
               S01:080038AC:  00
               S01:080038AD:  00
               S01:080038AE:  01
               S01:080038AF:  00
               S01:080038B0:  02
               S01:080038B1:  00
               S01:080038B2:  00
               S01:080038B3:  00
               S01:080038B4:  00
               S01:080038B5:  00
               S01:080038B6:  01
               S01:080038B7:  00
F00:1073       	.BYTE 0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0
               S01:080038B8:  00
               S01:080038B9:  00
               S01:080038BA:  02
               S01:080038BB:  00
               S01:080038BC:  00
               S01:080038BD:  00
               S01:080038BE:  02
               S01:080038BF:  00
               S01:080038C0:  00
               S01:080038C1:  00
               S01:080038C2:  00
               S01:080038C3:  02
               S01:080038C4:  00
               S01:080038C5:  00
               S01:080038C6:  00
               S01:080038C7:  00
               S01:080038C8:  00
               S01:080038C9:  02
               S01:080038CA:  00
               S01:080038CB:  00
               S01:080038CC:  00
               S01:080038CD:  00
               S01:080038CE:  02
               S01:080038CF:  00
               S01:080038D0:  00
               S01:080038D1:  00
               S01:080038D2:  02
               S01:080038D3:  00
               S01:080038D4:  00
               S01:080038D5:  00
               S01:080038D6:  00
               S01:080038D7:  00
F00:1074       	.BYTE 0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,0
               S01:080038D8:  00
               S01:080038D9:  00
               S01:080038DA:  00
               S01:080038DB:  00
               S01:080038DC:  02
               S01:080038DD:  00
               S01:080038DE:  00
               S01:080038DF:  00
               S01:080038E0:  00
               S01:080038E1:  01
               S01:080038E2:  00
               S01:080038E3:  00
               S01:080038E4:  00
               S01:080038E5:  00
               S01:080038E6:  01
               S01:080038E7:  00
               S01:080038E8:  00
               S01:080038E9:  00
               S01:080038EA:  00
               S01:080038EB:  02
               S01:080038EC:  00
               S01:080038ED:  00
               S01:080038EE:  00
               S01:080038EF:  00
               S01:080038F0:  01
               S01:080038F1:  00
               S01:080038F2:  00
               S01:080038F3:  01
               S01:080038F4:  00
               S01:080038F5:  00
               S01:080038F6:  00
               S01:080038F7:  00
F00:1075       	.BYTE 0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2
               S01:080038F8:  00
               S01:080038F9:  00
               S01:080038FA:  01
               S01:080038FB:  00
               S01:080038FC:  00
               S01:080038FD:  00
               S01:080038FE:  00
               S01:080038FF:  00
               S01:08003900:  00
               S01:08003901:  00
               S01:08003902:  00
               S01:08003903:  00
               S01:08003904:  00
               S01:08003905:  00
               S01:08003906:  00
               S01:08003907:  00
               S01:08003908:  00
               S01:08003909:  00
               S01:0800390A:  01
               S01:0800390B:  00
               S01:0800390C:  00
               S01:0800390D:  00
               S01:0800390E:  00
               S01:0800390F:  00
               S01:08003910:  00
               S01:08003911:  02
               S01:08003912:  00
               S01:08003913:  00
               S01:08003914:  00
               S01:08003915:  00
               S01:08003916:  00
               S01:08003917:  02
F00:1076       	.BYTE 0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,1 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0
               S01:08003918:  00
               S01:08003919:  00
               S01:0800391A:  02
               S01:0800391B:  00
               S01:0800391C:  00
               S01:0800391D:  00
               S01:0800391E:  00
               S01:0800391F:  02
               S01:08003920:  00
               S01:08003921:  00
               S01:08003922:  00
               S01:08003923:  01
               S01:08003924:  00
               S01:08003925:  00
               S01:08003926:  00
               S01:08003927:  00
               S01:08003928:  02
               S01:08003929:  00
               S01:0800392A:  00
               S01:0800392B:  00
               S01:0800392C:  00
               S01:0800392D:  02
               S01:0800392E:  00
               S01:0800392F:  01
               S01:08003930:  00
               S01:08003931:  00
               S01:08003932:  00
               S01:08003933:  00
               S01:08003934:  02
               S01:08003935:  00
               S01:08003936:  00
               S01:08003937:  00
F00:1077       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,1 ,0 ,0 ,0
               S01:08003938:  00
               S01:08003939:  00
               S01:0800393A:  00
               S01:0800393B:  00
               S01:0800393C:  00
               S01:0800393D:  00
               S01:0800393E:  01
               S01:0800393F:  00
               S01:08003940:  00
               S01:08003941:  02
               S01:08003942:  00
               S01:08003943:  00
               S01:08003944:  00
               S01:08003945:  02
               S01:08003946:  00
               S01:08003947:  00
               S01:08003948:  00
               S01:08003949:  00
               S01:0800394A:  00
               S01:0800394B:  00
               S01:0800394C:  00
               S01:0800394D:  00
               S01:0800394E:  02
               S01:0800394F:  00
               S01:08003950:  00
               S01:08003951:  00
               S01:08003952:  02
               S01:08003953:  00
               S01:08003954:  01
               S01:08003955:  00
               S01:08003956:  00
               S01:08003957:  00
F00:1078       	.BYTE 0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2 ,0
               S01:08003958:  00
               S01:08003959:  00
               S01:0800395A:  01
               S01:0800395B:  00
               S01:0800395C:  00
               S01:0800395D:  00
               S01:0800395E:  00
               S01:0800395F:  00
               S01:08003960:  00
               S01:08003961:  00
               S01:08003962:  00
               S01:08003963:  01
               S01:08003964:  00
               S01:08003965:  00
               S01:08003966:  00
               S01:08003967:  00
               S01:08003968:  01
               S01:08003969:  00
               S01:0800396A:  02
               S01:0800396B:  00
               S01:0800396C:  00
               S01:0800396D:  01
               S01:0800396E:  00
               S01:0800396F:  00
               S01:08003970:  02
               S01:08003971:  00
               S01:08003972:  00
               S01:08003973:  00
               S01:08003974:  00
               S01:08003975:  00
               S01:08003976:  02
               S01:08003977:  00
F00:1079       	.BYTE 0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,2 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0
               S01:08003978:  00
               S01:08003979:  00
               S01:0800397A:  00
               S01:0800397B:  00
               S01:0800397C:  00
               S01:0800397D:  01
               S01:0800397E:  00
               S01:0800397F:  02
               S01:08003980:  00
               S01:08003981:  00
               S01:08003982:  02
               S01:08003983:  00
               S01:08003984:  02
               S01:08003985:  00
               S01:08003986:  00
               S01:08003987:  00
               S01:08003988:  00
               S01:08003989:  00
               S01:0800398A:  00
               S01:0800398B:  01
               S01:0800398C:  00
               S01:0800398D:  00
               S01:0800398E:  00
               S01:0800398F:  00
               S01:08003990:  00
               S01:08003991:  01
               S01:08003992:  00
               S01:08003993:  00
               S01:08003994:  00
               S01:08003995:  01
               S01:08003996:  00
               S01:08003997:  00
F00:1080       	.BYTE 0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2
               S01:08003998:  00
               S01:08003999:  01
               S01:0800399A:  00
               S01:0800399B:  02
               S01:0800399C:  00
               S01:0800399D:  00
               S01:0800399E:  00
               S01:0800399F:  00
               S01:080039A0:  00
               S01:080039A1:  00
               S01:080039A2:  00
               S01:080039A3:  00
               S01:080039A4:  00
               S01:080039A5:  00
               S01:080039A6:  01
               S01:080039A7:  00
               S01:080039A8:  02
               S01:080039A9:  00
               S01:080039AA:  00
               S01:080039AB:  00
               S01:080039AC:  01
               S01:080039AD:  02
               S01:080039AE:  00
               S01:080039AF:  00
               S01:080039B0:  00
               S01:080039B1:  00
               S01:080039B2:  00
               S01:080039B3:  00
               S01:080039B4:  00
               S01:080039B5:  00
               S01:080039B6:  00
               S01:080039B7:  02
F00:1081       	.BYTE 0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,1 ,2 ,0 ,0 ,0 ,0
               S01:080039B8:  00
               S01:080039B9:  00
               S01:080039BA:  00
               S01:080039BB:  00
               S01:080039BC:  00
               S01:080039BD:  00
               S01:080039BE:  00
               S01:080039BF:  01
               S01:080039C0:  00
               S01:080039C1:  00
               S01:080039C2:  00
               S01:080039C3:  00
               S01:080039C4:  02
               S01:080039C5:  00
               S01:080039C6:  00
               S01:080039C7:  00
               S01:080039C8:  00
               S01:080039C9:  00
               S01:080039CA:  02
               S01:080039CB:  00
               S01:080039CC:  00
               S01:080039CD:  00
               S01:080039CE:  00
               S01:080039CF:  02
               S01:080039D0:  00
               S01:080039D1:  00
               S01:080039D2:  01
               S01:080039D3:  02
               S01:080039D4:  00
               S01:080039D5:  00
               S01:080039D6:  00
               S01:080039D7:  00
F00:1082       	.BYTE 0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,1
               S01:080039D8:  00
               S01:080039D9:  00
               S01:080039DA:  00
               S01:080039DB:  00
               S01:080039DC:  01
               S01:080039DD:  00
               S01:080039DE:  01
               S01:080039DF:  00
               S01:080039E0:  00
               S01:080039E1:  02
               S01:080039E2:  00
               S01:080039E3:  00
               S01:080039E4:  01
               S01:080039E5:  00
               S01:080039E6:  00
               S01:080039E7:  02
               S01:080039E8:  00
               S01:080039E9:  00
               S01:080039EA:  00
               S01:080039EB:  01
               S01:080039EC:  00
               S01:080039ED:  00
               S01:080039EE:  00
               S01:080039EF:  00
               S01:080039F0:  00
               S01:080039F1:  00
               S01:080039F2:  00
               S01:080039F3:  00
               S01:080039F4:  01
               S01:080039F5:  00
               S01:080039F6:  00
               S01:080039F7:  01
F00:1083       	.BYTE 0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,0 ,0
               S01:080039F8:  00
               S01:080039F9:  01
               S01:080039FA:  00
               S01:080039FB:  02
               S01:080039FC:  00
               S01:080039FD:  00
               S01:080039FE:  00
               S01:080039FF:  00
               S01:08003A00:  01
               S01:08003A01:  00
               S01:08003A02:  00
               S01:08003A03:  01
               S01:08003A04:  00
               S01:08003A05:  00
               S01:08003A06:  00
               S01:08003A07:  00
               S01:08003A08:  00
               S01:08003A09:  00
               S01:08003A0A:  00
               S01:08003A0B:  00
               S01:08003A0C:  00
               S01:08003A0D:  00
               S01:08003A0E:  01
               S01:08003A0F:  00
               S01:08003A10:  01
               S01:08003A11:  00
               S01:08003A12:  00
               S01:08003A13:  02
               S01:08003A14:  00
               S01:08003A15:  00
               S01:08003A16:  00
               S01:08003A17:  00
F00:1084       	.BYTE 0 ,0 ,0 ,1 ,0 ,1 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2
               S01:08003A18:  00
               S01:08003A19:  00
               S01:08003A1A:  00
               S01:08003A1B:  01
               S01:08003A1C:  00
               S01:08003A1D:  01
               S01:08003A1E:  00
               S01:08003A1F:  02
               S01:08003A20:  00
               S01:08003A21:  00
               S01:08003A22:  00
               S01:08003A23:  00
               S01:08003A24:  02
               S01:08003A25:  00
               S01:08003A26:  00
               S01:08003A27:  00
               S01:08003A28:  01
               S01:08003A29:  00
               S01:08003A2A:  00
               S01:08003A2B:  01
               S01:08003A2C:  00
               S01:08003A2D:  00
               S01:08003A2E:  00
               S01:08003A2F:  02
               S01:08003A30:  00
               S01:08003A31:  00
               S01:08003A32:  00
               S01:08003A33:  00
               S01:08003A34:  00
               S01:08003A35:  00
               S01:08003A36:  00
               S01:08003A37:  02
F00:1085       	.BYTE 0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,2 ,0 ,0
               S01:08003A38:  00
               S01:08003A39:  00
               S01:08003A3A:  02
               S01:08003A3B:  00
               S01:08003A3C:  00
               S01:08003A3D:  00
               S01:08003A3E:  02
               S01:08003A3F:  00
               S01:08003A40:  00
               S01:08003A41:  02
               S01:08003A42:  00
               S01:08003A43:  00
               S01:08003A44:  00
               S01:08003A45:  00
               S01:08003A46:  00
               S01:08003A47:  02
               S01:08003A48:  00
               S01:08003A49:  00
               S01:08003A4A:  00
               S01:08003A4B:  00
               S01:08003A4C:  00
               S01:08003A4D:  00
               S01:08003A4E:  00
               S01:08003A4F:  00
               S01:08003A50:  00
               S01:08003A51:  02
               S01:08003A52:  00
               S01:08003A53:  00
               S01:08003A54:  00
               S01:08003A55:  02
               S01:08003A56:  00
               S01:08003A57:  00
F00:1086       Tilemap_END:
F00:1087       	
F00:1088       


Sections:
S01  seg8000000


Sources:
F00  GBA_Drummond.asm
F01  GBA_Core.asm
F02  GBA_Text.asm
F03  GBA_Core.asm
F04  GBA_Math.asm


Symbols:
TilemapHeight EXPR(32=0x20) UNUSED 
PlayerTileStart EXPR(1=0x1) UNUSED 
DIV_Next EXPR(134221692=0x8000f7c) ABS 
DIV_Start EXPR(134221676=0x8000f6c) ABS 
DIV_End EXPR(134221716=0x8000f94) ABS 
MOD EXPR(134221640=0x8000f48) UNUSED ABS 
LineDone EXPR(134220856=0x8000c38) UNUSED ABS 
DrawPixel EXPR(134220820=0x8000c14) ABS 
WriteLine EXPR(134220800=0x8000c00) ABS 
BitmapFont EXPR(134220880=0x8000c50) ABS 
WriteChar EXPR(134220716=0x8000bac) ABS 
WriteTextDone EXPR(134220712=0x8000ba8) ABS 
RepeatWriteText EXPR(134220692=0x8000b94) ABS 
WriteText EXPR(134220684=0x8000b8c) UNUSED ABS 
NewLine EXPR(134220640=0x8000b60) UNUSED ABS 
CursorY EXPR(33554465=0x2000021) 
CursorX EXPR(33554464=0x2000020) 
PlayerSpriteNum EXPR(1=0x1) 
SpriteOAMSettings EXPR(117440512=0x7000000) 
DrawSprite EXPR(134220428=0x8000a8c) ABS 
HorizontalCollision_CheckLeft EXPR(134220144=0x8000970) UNUSED ABS 
HorizontalCollision_CheckRight EXPR(134220276=0x80009f4) ABS 
HorizontalCollision_END EXPR(134220412=0x8000a7c) ABS 
BackgroundCollideLimit EXPR(18=0x12) 
TilemapWidth EXPR(32=0x20) 
DIV EXPR(134221656=0x8000f58) ABS 
TileLength EXPR(8=0x8) 
VerticalCollision_CheckUp EXPR(134219832=0x8000838) UNUSED ABS 
VerticalCollision_CheckDown EXPR(134219964=0x80008bc) ABS 
VerticalCollision_END EXPR(134220100=0x8000944) ABS 
GetNextLine EXPR(134219796=0x8000814) UNUSED ABS 
LoadBytesRep EXPR(134219776=0x8000800) ABS 
LoadHalfwordsRep EXPR(134219752=0x80007e8) ABS 
GetScreenPos EXPR(134219712=0x80007c0) UNUSED ABS 
FillScreen EXPR(134219696=0x80007b0) ABS 
ClearToColor EXPR(134219684=0x80007a4) UNUSED ABS 
SpriteFiles_END EXPR(134231480=0x80035b8) ABS 
VramSpritePixelPatterns EXPR(100728832=0x6010000) 
SpriteFiles EXPR(134223800=0x80017b8) ABS 
SpritePaletteMemory EXPR(83886592=0x5000200) 
VramBackground EXPR(100665344=0x6000800) 
LoadBytes EXPR(134219772=0x80007fc) ABS 
Tilemap_END EXPR(134232664=0x8003a58) ABS 
VramBase EXPR(100663296=0x6000000) 
Tilemap EXPR(134231640=0x8003658) ABS 
TilemapFiles_END EXPR(134223800=0x80017b8) ABS 
VramTilemapPixelPatterns EXPR(100679680=0x6004000) 
TilemapFiles EXPR(134221752=0x8000fb8) ABS 
LoadHalfwords EXPR(134219748=0x80007e4) ABS 
BackgroundPaletteMemory EXPR(83886080=0x5000000) 
ColorPalette EXPR(134221720=0x8000f98) ABS 
LCDControl EXPR(67108864=0x4000000) 
SpriteTest EXPR(134218980=0x80004e4) ABS 
SpriteTestAddress EXPR(134218976=0x80004e0) UNUSED ABS 
AsciiTest4 EXPR(134218964=0x80004d4) ABS 
AsciiTestAddress4 EXPR(134218960=0x80004d0) UNUSED ABS 
AsciiTest3 EXPR(134218916=0x80004a4) ABS 
AsciiTestAddress3 EXPR(134218912=0x80004a0) UNUSED ABS 
AsciiTest2 EXPR(134218868=0x8000474) ABS 
AsciiTestAddress2 EXPR(134218864=0x8000470) UNUSED ABS 
AsciiTest1 EXPR(134218824=0x8000448) ABS 
AsciiTestAddress1 EXPR(134218820=0x8000444) UNUSED ABS 
DelayNextBlank EXPR(134218788=0x8000424) ABS 
ScanlineCounter EXPR(67108870=0x4000006) 
DelayNextDraw EXPR(134218760=0x8000408) ABS 
DelayFrame EXPR(134218752=0x8000400) ABS 
Render EXPR(134220464=0x8000ab0) ABS 
HorizontalCollision EXPR(134220116=0x8000954) ABS 
VerticalCollision EXPR(134219804=0x800081c) ABS 
Anim_PlayerIdleRight_END EXPR(134231536=0x80035f0) ABS 
Anim_PlayerIdleRight EXPR(134231520=0x80035e0) ABS 
Anim_PlayerWalkRight_END EXPR(134231560=0x8003608) ABS 
Anim_PlayerWalkRight EXPR(134231536=0x80035f0) ABS 
FaceRightCheck_END EXPR(134218712=0x80003d8) ABS 
Anim_PlayerIdleLeft_END EXPR(134231576=0x8003618) ABS 
Anim_PlayerIdleLeft EXPR(134231560=0x8003608) ABS 
Anim_PlayerWalkLeft_END EXPR(134231600=0x8003630) ABS 
Anim_PlayerWalkLeft EXPR(134231576=0x8003618) ABS 
FaceLeftCheck_END EXPR(134218608=0x8000370) ABS 
Anim_PlayerWalkDown_END EXPR(134231520=0x80035e0) ABS 
Anim_PlayerWalkDown EXPR(134231496=0x80035c8) ABS 
FaceDownCheck_END EXPR(134218504=0x8000308) ABS 
Anim_PlayerIdleUp_END EXPR(134231616=0x8003640) ABS 
Anim_PlayerIdleUp EXPR(134231600=0x8003630) ABS 
ChangeAnimation_END EXPR(134218712=0x80003d8) ABS 
Anim_PlayerWalkUp_END EXPR(134231640=0x8003658) ABS 
Anim_PlayerWalkUp EXPR(134231616=0x8003640) ABS 
FaceUpCheck_END EXPR(134218400=0x80002a0) ABS 
GetButton EXPR(134220604=0x8000b3c) ABS 
GameLoop EXPR(134218076=0x800015c) ABS 
Anim_PlayerIdleDown_END EXPR(134231496=0x80035c8) ABS 
Anim_PlayerIdleDown EXPR(134231480=0x80035b8) ABS 
BackgroundAndSpriteInit EXPR(134219528=0x8000708) ABS 
ScreenInit EXPR(134219492=0x80006e4) ABS 
Stack EXPR(50331648=0x3000000) 
Main EXPR(134217960=0x80000e8) ABS 
PlayerCurrentAnimEnd EXPR(33554480=0x2000030) 
PlayerCurrentAnimBegin EXPR(33554476=0x200002c) 
PlayerCurrentAnimIndex EXPR(33554472=0x2000028) 
PlayerFace EXPR(33554468=0x2000024) 
PlayerY EXPR(33554467=0x2000023) 
PlayerX EXPR(33554466=0x2000022) 
Ram EXPR(33554432=0x2000000) 
FacingRight EXPR(3=0x3) 
FacingUp EXPR(2=0x2) 
FacingLeft EXPR(1=0x1) 
FacingDown EXPR(0=0x0) 
PlayerHeight EXPR(16=0x10) 
PlayerWidth EXPR(16=0x10) 
ScreenYBound EXPR(160=0xa0) 
ScreenXBound EXPR(240=0xf0) 
BackgroundColor EXPR(49680=0xc210) UNUSED 
MaskKey EXPR(64512=0xfc00) 
Key_LeftBump EXPR(512=0x200) UNUSED 
Key_RightBump EXPR(256=0x100) UNUSED 
Key_Down EXPR(128=0x80) 
Key_Up EXPR(64=0x40) 
Key_Left EXPR(32=0x20) 
Key_Right EXPR(16=0x10) 
Key_Start EXPR(8=0x8) UNUSED 
Key_Select EXPR(4=0x4) UNUSED 
Key_B EXPR(2=0x2) UNUSED 
Key_A EXPR(1=0x1) UNUSED 
InputLocation EXPR(67109168=0x4000130) 
__VASM EXPR(0=0x0) INTERNAL 
BuildGBA EXPR(1=0x1) UNUSED 
vasm EXPR(1=0x1) UNUSED 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
